// Generated by CoffeeScript 1.11.1
var data;

data = {
  "Nyheter": {
    "Nyheter": {
      b: "# NYHETER 2017-03-01\n#   A3: Listor, Växelcykel, Kalkylator\n#   A5: Palindrom, Rövarspråk\n#   A7: Bignum, Pokerhand\n#   A8: List recursion\n\n# Klicka nu på A0!",
      a: ""
    }
  },
  "A0: One Parameter": {
    Operator1: {
      b: "# Försök att skapa funktionen f.\n# f(2) ska bli 2. f(3) ska bli 3.\n# Den första kolumnen (gul) innehåller INDATA.\n# Den andra kolumnen (grön) innehåller UTDATA du ska återskapa.\n# Den tredje kolumnen (röd eller grön) innehåller UTDATA skapad av din kod.\n\n# Se till att göra de RÖDA cellerna GRÖNA! Gå till sista raden med PgDn.\n\n# Ändra nollan till en tvåa. Nu blir enbart den första RÖDA cellen GRÖN.\n# Ändra tvåan till en trea.  Nu blir enbart den andra RÖDA cellen GRÖN.\n# Ändra trean till ett x.    Nu blir båda de RÖDA cellerna GRÖNA!\n\n# Gå till nästa övning genom att klicka på Operator2.\n\nf = (x) -> 0",
      a: "f = (x) -> x",
      c: {
        "f 2": 2,
        "f 3": 3
      }
    },
    Operator2: {
      b: "# Välj en av dessa operatorer: + - * / %\n# f(7) == 8\n# f(8) == 9\n# f(x) == ?\n# Sju ska bli åtta och åtta ska bli nio. Vad ska f skicka ut?\n\nf = (x) -> 0",
      a: "f = (x) -> x+1",
      c: {
        "3+2": 5,
        "3-2": 1,
        "3*2": 6,
        "6/2": 3,
        "5%2": 1,
        "6%2": 0,
        "f 7": 8,
        "f 8": 9
      }
    },
    Operator3: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> 2*x",
      c: {
        "f 5": 10,
        "f 6": 12
      }
    },
    Operator4: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> x*x",
      c: {
        "f 5": 25,
        "f 6": 36
      }
    },
    Operator5: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> -x",
      c: {
        "f -4": 4,
        "f 3": -3
      }
    },
    Operator6: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> x-2",
      c: {
        "f 7": 5,
        "f 17": 15
      }
    },
    Operator7: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> x/2",
      c: {
        "f 8": 4,
        "f 6": 3
      }
    },
    Operator8: {
      b: "# + - * / %\n\nf = (x) -> 0		",
      a: "f = (x) -> x%2",
      c: {
        "f 7": 1,
        "f 8": 0,
        "f 10": 0,
        "f 11": 1
      }
    },
    Operator9: {
      b: "# == < > !=\n\nf = (x) -> null			",
      a: "f = (x) -> x == 2",
      c: {
        "1 == 1": true,
        "1 == 2": false,
        "1 != 1": false,
        "1 != 2": true,
        "1 < 1": false,
        "1 < 2": true,
        "1 > 1": false,
        "1 > 2": false,
        "1 <= 1": true,
        "1 <= 2": true,
        "1 >= 1": true,
        "1 >= 2": false,
        "f 1": false,
        "f 2": true,
        "f 3": false,
        "f 4": false
      }
    },
    Operator10: {
      b: "# == < > !=\n\nf = (x) -> null		",
      a: "f = (x) -> x > 2",
      c: {
        "f 1": false,
        "f 2": false,
        "f 3": true,
        "f 4": true
      }
    },
    Operator11: {
      b: "# == < > !=\n\nf = (x) -> null		",
      a: "f = (x) -> x > 2",
      c: {
        "f 1": false,
        "f 2": false,
        "f 3": true,
        "f 4": true
      }
    },
    Operator12: {
      b: "# == < > !=\n\nf = (x) -> null	",
      a: "f = (x) -> x != 2",
      c: {
        "f 1": true,
        "f 2": false,
        "f 3": true,
        "f 4": true
      }
    }
  },
  "A1: Two Parameters": {
    Operator1: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a*b",
      c: {
        "g 3,4": 12,
        "g 4,6": 24
      }
    },
    Operator2: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a+b",
      c: {
        "g 3,4": 7,
        "g 4,6": 10
      }
    },
    Operator3: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> b-a",
      c: {
        "g 3,4": 1,
        "g 4,6": 2
      }
    },
    Operator4: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a/b",
      c: {
        "g 8,4": 2,
        "g 12,3": 4
      }
    },
    Operator5: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a%b",
      c: {
        "g 8,4": 0,
        "g 9,4": 1,
        "g 10,4": 2,
        "g 11,4": 3
      }
    },
    Operator6: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a == b",
      c: {
        "g 0,0": true,
        "g 1,1": true,
        "g 7,4": false,
        "g 6,4": false
      }
    },
    Operator7: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a - b == 1",
      c: {
        "g 7,6": true,
        "g 5,4": true,
        "g 7,4": false,
        "g 6,4": false
      }
    },
    Operator8: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a + b == 7",
      c: {
        "g 7,0": true,
        "g 5,2": true,
        "g 7,4": false,
        "g 6,4": false
      }
    }
  },
  'A2: range lerp for': {
    range: {
      b: "# LOC:3 range\n\nf = (n) -> []\ng = (a,b) -> []\nh = (a,b,n) -> []",
      a: "f = (n) -> range n\ng = (a,b) -> range a,b\ng = (a,b,n) -> range a,b,n",
      c: {
        "range 3": [0, 1, 2],
        "range 1,4": [1, 2, 3],
        "range 1,9,2": [1, 3, 5, 7],
        "f 5": [0, 1, 2, 3, 4],
        "f 6": [0, 1, 2, 3, 4, 5],
        "g 1,5": [1, 2, 3, 4],
        "g 2,4": [2, 3],
        "g -2,0": [-2, -1],
        "h 0,10,1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        "h 0,10,2": [0, 2, 4, 6, 8],
        "h 0,-10,-1": [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
      }
    },
    "lerp": {
      b: "# LOC:1 lerp\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,i) -> 0",
      a: "f = (a,b,i) -> lerp a,b,i",
      c: {
        "lerp 8,12,0": 8,
        "lerp 8,12,1": 12,
        "lerp 8,12,0.5": 10,
        "lerp 8,12,-1": 4,
        "lerp 8,12,2": 16,
        "f 10,20,0": 10,
        "f 10,20,1": 20,
        "f 10,20,2": 30,
        "f 10,20,0.5": 15,
        "f 10,20,-1": 0
      }
    },
    "for": {
      b: "# LOC:1 for in range lerp\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,n) -> []",
      a: "f = (a,b,n) -> lerp a,b,i for i in range n",
      c: {
        "(i*i for i in range 5)": [0, 1, 4, 9, 16],
        "f 0,0,5": [0, 0, 0, 0, 0],
        "f 1,2,5": [1, 2, 3, 4, 5],
        "f 5,4,5": [5, 4, 3, 2, 1],
        "f -1,-2,5": [-1, -2, -3, -4, -5],
        "f 5,25,10": [5, 25, 45, 65, 85, 105, 125, 145, 165, 185],
        "f -0.1,0.0,3": [-0.1, 0.0, 0.1]
      }
    }
  },
  "A3: [ ]": {
    Introduktion: {
      b: "# LOC:16 if < then else\n# Sortera UTAN att använda loopar\n# Du får inte heller använda någon punkt\n\nsort2 = (a,b) -> [a,b]\nsort3 = (a,b,c) -> [a,b,c]\nsort4 = (a,b,c,d) -> [a,b,c,d]\nsort5 = (a,b,c,d,e) -> [a,b,c,d,e]\n",
      a: "sort2 = (a,b) -> if a>b then [b,a] else [a,b]\n\nsort3 = (a,b,c) ->\n	[a,b] = sort2 a,b\n	[b,c] = sort2 b,c\n	[a,b] = sort2 a,b\n	[a,b,c]\n\nsort4 = (a,b,c,d) ->\n	[a,b,c] = sort3 a,b,c\n	[b,c,d] = sort3 b,c,d\n	[a,b] = sort2 a,b\n	[a,b,c,d]\n\nsort5 = (a,b,c,d,e) ->\n	[a,b,c,d] = sort4 a,b,c,d\n	[b,c,d,e] = sort4 b,c,d,e\n	[a,b] = sort2 a,b\n	[a,b,c,d,e]",
      c: {
        "if 1 < 2 then [1,2] else [2,1]": [1, 2],
        "sort2 3,4": [3, 4],
        "sort2 4,3": [3, 4],
        "sort3 3,4,5": [3, 4, 5],
        "sort3 3,5,4": [3, 4, 5],
        "sort3 4,3,5": [3, 4, 5],
        "sort3 4,5,3": [3, 4, 5],
        "sort3 5,3,4": [3, 4, 5],
        "sort3 5,4,3": [3, 4, 5],
        "sort4 3,4,5,6": [3, 4, 5, 6],
        "sort4 3,4,6,5": [3, 4, 5, 6],
        "sort4 3,5,4,6": [3, 4, 5, 6],
        "sort4 3,5,6,4": [3, 4, 5, 6],
        "sort4 3,6,4,5": [3, 4, 5, 6],
        "sort4 3,6,5,4": [3, 4, 5, 6],
        "sort4 4,3,5,6": [3, 4, 5, 6],
        "sort4 4,3,6,5": [3, 4, 5, 6],
        "sort4 4,5,3,6": [3, 4, 5, 6],
        "sort4 4,5,6,3": [3, 4, 5, 6],
        "sort4 4,6,3,5": [3, 4, 5, 6],
        "sort4 4,6,5,3": [3, 4, 5, 6],
        "sort4 5,3,4,6": [3, 4, 5, 6],
        "sort4 5,3,6,4": [3, 4, 5, 6],
        "sort4 5,4,3,6": [3, 4, 5, 6],
        "sort4 5,4,6,3": [3, 4, 5, 6],
        "sort4 5,6,3,4": [3, 4, 5, 6],
        "sort4 5,6,4,3": [3, 4, 5, 6],
        "sort4 6,3,4,5": [3, 4, 5, 6],
        "sort4 6,3,5,4": [3, 4, 5, 6],
        "sort4 6,4,3,5": [3, 4, 5, 6],
        "sort4 6,4,5,3": [3, 4, 5, 6],
        "sort4 6,5,3,4": [3, 4, 5, 6],
        "sort4 6,5,4,3": [3, 4, 5, 6],
        "sort5 5,4,3,2,1": [1, 2, 3, 4, 5],
        "sort5 3,5,2,4,1": [1, 2, 3, 4, 5],
        "sort5 5,2,3,4,1": [1, 2, 3, 4, 5]
      }
    },
    Listor: {
      b: "# LOC:11 length push concat pop sort .. []\n\nantal = (a) -> 0\nfetch = (a,i) -> 0 \nkonkatenera = (a,b) -> [] \nsortera = (a) -> []\nförsta = (a,n) -> []\nmitti = (a,i,j) -> []\nsista = (a,n) -> []",
      a: "antal = (a) -> a.length\nfetch = (a,i) -> a[i]\nkonkatenera = (a,b) -> a.concat b\nsortera = (a) -> a.sort()\nförsta = (a,n) -> a[..n-1]\nmitti = (a,i,j) -> a[i..j]\nsista = (a,n) -> a[-n..]",
      c: {
        "[1,2].concat [3,4]": [1, 2, 3, 4],
        "[2,3,4,5].length": 4,
        "[11,22,33,44][2]": 33,
        "[11,22,33,44][..2]": [11, 22, 33],
        "[11,22,33,44][1..]": [22, 33, 44],
        "[11,22,33,44][1..2]": [22, 33],
        "[4,2,3,1].sort()": [1, 2, 3, 4],
        "[4,2,3,1].sort().reverse()": [4, 3, 2, 1],
        "antal [1,2,3]": 3,
        "antal [5,4,1,2,9,3,7]": 7,
        "fetch [4,5,6],0": 4,
        "fetch [4,5,6],2": 6,
        "konkatenera [1,2,3],[4,5,6]": [1, 2, 3, 4, 5, 6],
        "sortera [5,4,1,2,9,3,7]": [1, 2, 3, 4, 5, 7, 9],
        "första [11,12,13,14,15],3": [11, 12, 13],
        "mitti [11,12,13,14,15],1,2": [12, 13],
        "sista [11,12,13,14,15],4": [12, 13, 14, 15]
      }
    },
    Växelcykel: {
      b: "# LOC:4 [] for in push sort - /\n# Din växelcykel har stora och små kugghjul. I vilken i ordning ligger växlarna? \n\ngear = (big, small) -> []",
      a: "gear = (big, small) ->\n	res = []\n	res.push [Math.round(b/s * 100)/100,b,s] for s in small for b in big\n	res.sort() ",
      c: {
        "Math.round 3.1415": 3,
        "Math.round(3.1415 * 10)/10": 3.1,
        "gear [43,53], [13,21]": [[2.05, 43, 21], [2.52, 53, 21], [3.31, 43, 13], [4.08, 53, 13]],
        "gear [43,53], [13,15,17,19,21]": [[2.05, 43, 21], [2.26, 43, 19], [2.52, 53, 21], [2.53, 43, 17], [2.79, 53, 19], [2.87, 43, 15], [3.12, 53, 17], [3.31, 43, 13], [3.53, 53, 15], [4.08, 53, 13]]
      }
    },
    Kalkylator: {
      b: "# LOC:7 [] for in split == push pop if else parseInt\n\ncalc = (command) -> 0",
      a: "calc = (command) ->\n	stack = []\n	for cmd in command.split ' '\n		if cmd == '+' then stack.push stack.pop() + stack.pop()\n		else if cmd == '*' then stack.push stack.pop() * stack.pop()\n		else stack.push parseInt cmd\n	stack.pop()		",
      c: {
        "'a b c'.split ' '": ['a', 'b', 'c'],
        '1+2': 3,
        "'1'+'2'": '12',
        "1+'2'": '12',
        "'1'+2": '12',
        "parseInt '3'": 3,
        "parseFloat '3.14'": 3.14,
        "calc '2'": 2,
        "calc '2 3'": 3,
        "calc '2 3 +'": 5,
        "calc '2 3 *'": 6,
        "calc '2 3 4 * +'": 14
      }
    }
  },
  "A4: { }": {
    "Boys and Girls": {
      b: "# LOC:7 {} [] for in length + /\n\ngirls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\nnames = (kids) -> kid.name for kid in kids\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\navg = (numbers) -> 0",
      a: "girls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\nnames = (kids) -> kid.name for kid in kids\n\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n	\navg = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "avg ages girls": 11,
        "avg ages boys": 9.5
      }
    }
  },
  'A5: " "': {
    Introduktion: {
      b: "# LOC:8 length [] .. + indexOf split join for in\n# LOC betyder Lines Of Code, dvs antal kodrader.\n# Åtta kodrader är lagom för detta problem.\n# Färre innebär sämre läsbarhet.\n# Har du fler bör du fundera på en kortare lösning.\n\nantal = (s) -> 0\ntecken = (s,i) -> \"\"\nmitti = (s,i,j) -> \"\"\nkonkatenera = (s,t) -> \"\"\nleta = (s,t) -> 0\nsplittra = (s,avgr) -> [] \nhopslagning = (a,avgr='') -> \"\" \ndubbla = (s) -> \"\"",
      a: "antal = (s) -> s.length\ntecken = (s,i) -> s[i]\nmitti = (s,i,j) -> s[i..j]\nkonkatenera = (s,t) -> s + t\nleta = (s,t) -> s.indexOf t\nsplittra = (s,avgr) -> s.split avgr\nhopslagning = (a,avgr='') -> a.join(avgr)\ndubbla = (s) -> hopslagning (tecken + tecken for tecken in s)",
      c: {
        '"Javascript".length': 10,
        '"Javascript".indexOf "a"': 1,
        '"1,2,3".split ","': ["1", "2", "3"],
        '["1","2","3"].join " "': "1 2 3",
        'antal "Coffee"': 6,
        'tecken "Coffee",1': 'o',
        'mitti "Coffee",1,3': 'off',
        'mitti "Coffee",3,5': 'fee',
        'konkatenera "Coffee","script"': 'Coffeescript',
        'leta "Coffee","e"': 4,
        'leta "Coffee","x"': -1,
        "splittra '2 3 +',' '": ['2', '3', '+'],
        "hopslagning ['2', '3', '+'], '|'": "2|3|+",
        'dubbla "script"': 'ssccrriipptt'
      }
    },
    Palindrom: {
      b: "# LOC:1 join reverse split\n# Ett palindrom blir samma ord om man vänder på det.\n# Ordet palindrom är inte ett palindrom.\n\npalindrom = (word) -> null",
      a: "palindrom = (word) -> word.split(\"\").reverse().join(\"\") == word",
      c: {
        "palindrom 'badrum'": false,
        "palindrom 'kök'": true,
        "palindrom 'kajak'": true,
        "palindrom 'kanot'": false
      }
    },
    Rövarspråk: {
      b: "# LOC:1 for in if then else + join '' ()\n\nrs = (word,extra='o') -> \"\"",
      a: "rs = (word,extra='o') -> ((if letter in 'aeiouy åäö' then letter else letter + extra + letter) for letter in word).join(\"\")",
      c: {
        "rs 'kalas fint'": 'kokalolasos fofinontot',
        "rs 'bokstav'": 'bobokoksostotavov',
        "rs 'kalas fint','i'": 'kikalilasis fifinintit',
        "rs 'bokstav','e'": 'bebokeksestetavev',
        "rs 'kalas fint','a'": 'kakalalasas fafinantat'
      }
    }
  },
  "A6: Interpolation": {
    linearequation1: {
      b: "# LOC:1 *\n\nf = (x) -> 0",
      a: "f = (x) -> 2 * x",
      c: {
        "f 2": 4,
        "f 3": 6
      }
    },
    linearequation2: {
      b: "# LOC:1 * +\n\nf = (x) -> 0",
      a: "f = (x) -> 3 + 2 * x",
      c: {
        "f 2": 7,
        "f 3": 9
      }
    },
    lerp: {
      b: "# LOC:1 * + -\n\nlerp = (y1,y2,x) -> 0",
      a: "lerp = (y1,y2,x) -> y1 + (y2-y1) * x",
      c: {
        "lerp 10,16,-1": 4,
        "lerp 10,16,0": 10,
        "lerp 10,16,0.5": 13,
        "lerp 10,16,1": 16,
        "lerp 10,16,2": 22
      }
    },
    map: {
      b: "# LOC:1 * + - /\n\nmap = (x,x1,x2,y1,y2) -> 0",
      a: "map = (x,x1,x2,y1,y2) -> y1 + (y2-y1) * (x-x1)/(x2-x1)",
      c: {
        "map 0,1,3,20,40": 10,
        "map 1,1,3,20,40": 20,
        "map 2,1,3,20,40": 30,
        "map 3,1,3,20,40": 40,
        "map 75,50,100,0,1": 0.5,
        "map 16,0,40,0,200": 80
      }
    },
    Hour2Degree: {
      b: "# LOC:1 map\n\nh2d = (x) -> 0",
      a: "h2d = (x) -> map(15-x,0,12,0,360) % 360",
      c: {
        "h2d 0": 90,
        "h2d 1": 60,
        "h2d 2": 30,
        "h2d 3": 0,
        "h2d 4": 330,
        "h2d 5": 300,
        "h2d 6": 270,
        "h2d 7": 240,
        "h2d 8": 210,
        "h2d 9": 180,
        "h2d 10": 150,
        "h2d 11": 120,
        "h2d 12": 90
      }
    },
    Hour2Radian: {
      b: "# LOC:1 map\n\nh2r = (x) -> 0",
      a: "h2r = (x) -> (map 15-x,0,12,0,2*Math.PI) % (2*Math.PI)",
      c: {
        "h2r 0": 3 * Math.PI / 6,
        "h2r 3": 0 * Math.PI / 6,
        "h2r 4": 11 * Math.PI / 6,
        "h2r 5": 10 * Math.PI / 6,
        "h2r 6": 9 * Math.PI / 6,
        "h2r 7": 8 * Math.PI / 6,
        "h2r 9": 6 * Math.PI / 6,
        "h2r 10": 5 * Math.PI / 6,
        "h2r 11": 4 * Math.PI / 6,
        "h2r 12": 3 * Math.PI / 6
      }
    }
  },
  "A7: class": {
    Kid: {
      b: "# LOC:8 class constructor new @ [] for in length + /\n# Innan du löser denna uppgift: Be att få se Bouncing Balls!\n\nclass Kid\n	constructor : (name,age) ->\n\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\nnames = (kids) -> []\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\naverage = (numbers) -> 0\n",
      a: "\nclass Kid\n	constructor : (@name,@age) ->\n	\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\n\nnames = (kids) -> kid.name for kid in kids\n	\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n	\naverage = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "average ages girls": 11,
        "average ages boys": 9.5
      }
    },
    Simplex: {
      b: "# LOC:14 class constructor new [] @	+ - *\n# Tips: Spela p5Complex innan du påbörjar denna övning.	\n\nclass Simplex\n	constructor : (x,y) ->\n	translate : -> @\n	scale : -> @\n	rotate : -> @\n	mirror : -> @\n\na = new Simplex 1,3\nb = new Simplex -2,4",
      a: "class Simplex\n	constructor : (@x,@y) ->\n	translate : -> \n		@x += 1\n		@\n	scale : -> \n		[@x,@y] = [2*@x,2*@y] \n		@\n	rotate : -> \n		[@x,@y] = [-@y,@x]\n		@\n	mirror : ->\n		[@x,@y] = [@y,@x]\n		@",
      c: {
        "pp a": "{x:1,y:3}",
        "pp a.translate()": "{x:2,y:3}",
        "pp a.scale()": "{x:2,y:6}",
        "pp a.rotate()": "{x:-3,y:1}",
        "pp a.mirror()": "{x:3,y:1}",
        "pp a.translate().scale()": "{x:4,y:6}",
        "pp a.scale().translate()": "{x:3,y:6}",
        "pp b": "{x:-2,y:4}",
        "pp b.translate()": "{x:-1,y:4}",
        "pp b.scale()": "{x:-4,y:8}",
        "pp b.rotate()": "{x:-4,y:-2}",
        "pp b.mirror()": "{x:4,y:-2}",
        "pp b.translate().scale()": "{x:-2,y:8}",
        "pp b.scale().translate()": "{x:-3,y:8}",
        "pp b.mirror().mirror()": "{x:-2,y:4}",
        "pp b.rotate().rotate().rotate().rotate()": "{x:-2,y:4}"
      }
    },
    Bignum: {
      b: "# LOC:22 class constructor new @ parseInt reverse length push floor slice unshift join for if\n# Med Bignum kan man räkna exakt med tal med tusentals siffor.\n# Du programmerar på samma sätt som om du räknar med papper och penna.\n# Multiplikationen använder sig av additionen samt inskiftande av noll för varje siffra.\n\nclass Bignum\n	constructor : (s) -> @list=[]\n	to_s : () -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7",
      a: "\n# observera att reverse() vänder PÅ plats.\n# clona därför med slice() i t ex to_s\n#reversera = (arr) -> arr.slice().reverse() \n\nclass Bignum\n	constructor : (s) ->\n		@list = (parseInt(ch) for ch in s)\n		@list.reverse()\n\n	to_s : () -> @list.slice().reverse().join(\"\")\n\n	add : (other) ->\n		if @list.length < other.list.length then return other.add @ \n		carry = 0\n		res = new Bignum \"\"\n		for d1, pos in @list\n			d = d1 + (other.list[pos] || 0) + carry\n			res.list.push d % 10\n			carry = Math.floor d / 10\n		if carry then res.list.push 1\n		res\n\n	mul : (other) ->\n		res = new Bignum \"\"\n		for digit,d in other.list.slice().reverse()\n			for i in range digit\n				res = res.add @\n			if d < other.list.length-1 then res.list.unshift 0\n		res\n	\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7\n	",
      c: {
        "parseInt '1'": 1,
        "[1,2,3].reverse()": [3, 2, 1],
        "[1,2,3].length": 3,
        "Math.floor 3.14": 3,
        "[11,22,33].slice 1": [22, 33],
        "[11,22,33].slice 1,2": [22],
        "[11,22,33].slice()": [11, 22, 33],
        "12345678901234567890 + 1": 12345678901234567000,
        "a.list": [3, 2, 1],
        "a.to_s()": "123",
        "a.add(b).to_s()": "131",
        "b.add(a).to_s()": "131",
        "a.add(c).to_s()": "1122",
        "a.add(b).add(c).to_s()": "1130",
        "e.add(f).to_s()": "12345678901234567891",
        "g.to_s()": "1267650600228229401496703205376",
        "a.mul(b).to_s()": "984",
        "a.mul(c).to_s()": "122877",
        "a.mul(d).to_s()": "56088",
        "h.to_s()": "340282366920938463463374607431768211456"
      }
    },
    Complex: {
      b: "# LOC:31 class constructor new @ -> if + * == > < \n# Börja med att få bort onödiga nollor och ettor i to_s!\n\nclass Complex\n	constructor : (@x,@y) ->\n	to_s : -> @x + \" \" + @y + \"i\"\n	add : (other) -> @\n	mul : (other) -> @",
      a: "class Complex\n	constructor : (@x,@y) ->\n	add : (other) ->\n		new Complex @x+other.x, @y+other.y\n	mul : (other) ->\n		a = @x\n		b = @y\n		c = other.x\n		d = other.y\n		new Complex a*c-b*d, b*c+a*d\n	to_s : ->\n		sx = \"\" if @x == 0\n		sx = \"" + this.x + "\" if @x > 0\n		sx = \"" + this.x + "\" if @x < 0\n\n		sy = \"\" if @y == 0\n		sy = \"-i\" if @y == -1\n		sy = \"i\" if @y == 1\n		sy = \"" + this.y + "i\" if @y > 1\n		sy = \"" + this.y + "i\" if @y < -1\n\n		if sx!=\"\" and sy!=\"\"\n			if @y < 0\n				s = sx+sy\n			else if @y==0\n				s = sx\n			else\n				s = sx + \"+\" + sy\n		else if @x==0 and @y==0\n			s = \"0\"\n		else \n			s = sx + sy\n		s",
      c: {
        "new Complex(-1,0).to_s()": "-1",
        "new Complex(-1,-1).to_s()": "-1-i",
        "new Complex(0,-1).to_s()": "-i",
        "new Complex(0,0).to_s()": "0",
        "new Complex(0,1).to_s()": "i",
        "new Complex(1,-2).to_s()": "1-2i",
        "new Complex(1,-1).to_s()": "1-i",
        "new Complex(1,0).to_s()": "1",
        "new Complex(1,1).to_s()": "1+i",
        "new Complex(1,2).to_s()": "1+2i",
        "new Complex(1,2).add(new Complex(1,-1)).to_s()": "2+i",
        "new Complex(1,2).mul(new Complex(1,-1)).to_s()": "3+i"
      }
    },
    PokerHand: {
      b: "# LOC:41 class constructor new _.sortBy _.flatten _.isEqual _.without  \n#        split for in range indexOf push unshift reverse and not if then keys length\n\n# https://sv.wikipedia.org/wiki/Pokerhand\n\n# 9	Färgstege (straight flush)\n# 8	Fyrtal (four of a kind)\n# 7	Kåk (full house)\n# 6	Färg (flush)\n# 5	Stege (straight)\n# 4	Triss (three of a kind)\n# 3	Två par (two pairs)\n# 2	Par (pair)\n# 1	Högt kort (high card)\n\n# Ingen färg är bättre än någon annan färg. Vissa händer är värda lika mycket.\n\nclass Hand\n	constructor : (s) -> @separator = []\n	compare : (other) -> -2\n",
      a: "class Hand\n	constructor : (s) ->\n		@colorcount = {} \n		@valuecount = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n		@value = []\n		@separator = []\n		for card in s.split \" \"\n			@colorcount[card[0..1]] = true\n			iValue = \"  23456789TJQKA\".indexOf card[2]\n			@valuecount[iValue] += 1	\n			@value.push iValue	\n		for v,i in @valuecount \n			if v > 0 then @separator.push [v,i]\n		@valuecount = @sortera _.without @valuecount, 0 \n		@value = @sortera @value\n		@separator = _.sortBy @separator, (list) -> -1000*list[0]-list[1] # pga att js sorterar listor alfabetiskt. t ex [11] < [2].\n		@separator = _.flatten @separator\n\n		# Specialbehandling av A5432 eftersom esset räknas som 14.\n		if _.isEqual @separator,[1, 14, 1, 5, 1, 4, 1, 3, 1,  2]\n			@separator =          [1,  5, 1, 4, 1, 3, 1, 2, 1, 14]\n		@separator.unshift @calc()\n\n	compare : (other) -> \n		for i in range @separator.length\n			if @separator[i] > other.separator[i] then return -1\n			if @separator[i] < other.separator[i] then return 1\n		0	\n\n	calc : ->\n		if @stege() and @flush() then return 9\n		if _.isEqual(@valuecount,[1,4]) then return 8\n		if _.isEqual(@valuecount,[2,3]) then return 7\n		if @flush() then return 6\n		if @stege() then return 5\n		if _.isEqual(@valuecount,[1,1,3]) then return 4\n		if _.isEqual(@valuecount,[1,2,2]) then return 3\n		if _.isEqual(@valuecount,[1,1,1,2]) then return 2\n		1\n\n	sortera : (arr) -> _.sortBy arr \n	flush : -> Object.keys(@colorcount).length==1\n	stege : ->\n		if not _.isEqual(@valuecount, [1,1,1,1,1]) then return false\n		if @value[0] + 4 == @value[4] then return true\n		_.isEqual @value, [2,3,4,5,14]\n",
      c: {
        '[1,2,3] == [1,2,3]': false,
        '_.isEqual [1,2,3], [1,2,3]': true,
        '_.isEqual [1,2,3], [1,2,4]': false,
        '_.flatten [1,[2,1],3]': [1, 2, 1, 3],
        '_.without [1,2,1,3], 1': [2, 3],
        '_.sortBy ["per", "anna", "bo"]': ["anna", "bo", "per"],
        '_.sortBy ["per", "anna", "bo"], (w) -> w.length': ["bo", "per", "anna"],
        '(new Hand "spA sp2 sp3 sp4 sp5").separator': [9, 1, 5, 1, 4, 1, 3, 1, 2, 1, 14],
        '(new Hand "ru7 sp7 hj7 kl7 spJ").separator': [8, 4, 7, 1, 11],
        '(new Hand "ru8 sp8 hj8 kl9 sp9").separator': [7, 3, 8, 2, 9],
        '(new Hand "ru7 ru3 ru5 ru9 ruK").separator': [6, 1, 13, 1, 9, 1, 7, 1, 5, 1, 3],
        '(new Hand "ru7 hj8 ru9 hj5 ru6").separator': [5, 1, 9, 1, 8, 1, 7, 1, 6, 1, 5],
        '(new Hand "ru7 hj8 ru8 kl8 ruJ").separator': [4, 3, 8, 1, 11, 1, 7],
        '(new Hand "ru7 hj7 ru8 kl8 ruJ").separator': [3, 2, 8, 2, 7, 1, 11],
        '(new Hand "sp7 hj3 ru3 kl4 spA").separator': [2, 2, 3, 1, 14, 1, 7, 1, 4],
        '(new Hand "sp7 hj3 ru2 kl4 spA").separator': [1, 1, 14, 1, 7, 1, 4, 1, 3, 1, 2],
        '(new Hand "spA sp2 sp3 sp4 sp5").compare new Hand "ruA ru2 ru3 ru4 ru5"': 0,
        '(new Hand "ru7 sp7 hj7 kl7 spJ").compare new Hand "ru6 sp5 hj6 kl6 spQ"': -1,
        '(new Hand "ru8 sp8 hj8 kl9 sp9").compare new Hand "ru6 sp6 hj6 ru9 hj9"': -1,
        '(new Hand "ru7 ru3 ru5 ru9 ruK").compare new Hand "hj7 hj3 hj5 hj9 hjK"': 0,
        '(new Hand "ru7 hj8 ru9 hj5 ru6").compare new Hand "hj7 ru8 kl9 hjT sp6"': 1,
        '(new Hand "ru7 hj8 ru8 kl8 ruJ").compare new Hand "kl7 hj9 ru9 kl9 ruQ"': 1,
        '(new Hand "ru7 hj7 ru8 kl8 ruJ").compare new Hand "sp7 kl7 sp8 hj8 ruT"': -1,
        '(new Hand "hj7 kl3 sp3 kl4 hjA").compare new Hand "sp7 hj3 ru3 klK spA"': 1,
        '(new Hand "sp7 hj3 ru2 kl4 spA").compare new Hand "hj7 ru3 ru5 sp4 hjA"': 1
      }
    },
    Polynom: {
      b: "# LOC:52 class constructor new [] @ or for in range length ** push reverse join " + "\n# Uppgiften innehåller matematik på gymnasienivå.\n\nclass Polynom\n	constructor : (lst) -> @lst=[]\n	to_s : -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n	power : (n) -> @\n	value : (x) -> 0\n	diff : -> @\n	integ : -> @\n	compose : (other)	-> @\n\na = new Polynom [5,4,3]\nb = new Polynom [4,3]\nc = new Polynom [0,0,1]\nd = new Polynom [3,2]\ne = new Polynom [5,0,-1]",
      a: "class Polynom\n	constructor : (@lst) ->\n\n	add : (other) ->\n		h = []\n		h[i] = (h[i] or 0) + value for value,i in @lst\n		h[i] = (h[i] or 0) + value for value,i in other.lst\n		new Polynom h\n\n	mul : (other) ->\n		h = (0 for i in range @lst.length + other.lst.length - 1)\n		for value1,i1 in @lst\n			for value2,i2 in other.lst\n				i = i1+i2\n				h[i] = (h[i] or 0) + value1 * value2\n		new Polynom h\n\n	power : (n) ->\n		res = new Polynom [1]\n		res = res.mul @ for i in range n\n		res\n\n	compose : (other)	->\n		res = new Polynom []\n		for value,i in @lst\n			res = res.add (new Polynom [value]).mul other.power i\n		res\n\n	value : (x) ->\n		res = 0\n		res += value * x ** i for value,i in @lst\n		res\n\n	diff : ->\n		lst = []\n		for value,i in @lst\n			if i != 0 then lst[i-1] = i*value\n		new Polynom lst\n\n	integ : ->\n		lst = [0]\n		for value,i in @lst\n			i += 1\n			lst[i] = value/i\n		new Polynom lst\n\n	to_s : ->\n		arr = []\n		for item,i in @lst\n			if item == 0 then continue\n			if item == 1 \n				if i==0 then arr.push \"1\"\n				else if i==1 then arr.push \"x\"\n				else arr.push \"x^\" + i\n			else				\n				if i==0 then arr.push item\n				else if i==1 then arr.push item + \"*x\"\n				else arr.push item + \"*x^\" + i\n		arr.reverse()\n		arr.join \"+\"",
      c: {
        "a.lst": [5, 4, 3],
        "b.lst": [4, 3],
        "a.to_s()": "3*x^2+4*x+5",
        "c.to_s()": "x^2",
        "a.add(b).to_s()": "3*x^2+7*x+9",
        "a.mul(b).to_s()": "9*x^3+24*x^2+31*x+20",
        "a.value(2)": 25,
        "a.power(2).lst": [25, 40, 46, 24, 9],
        "b.power(3).lst": [64, 144, 108, 27],
        "a.diff().lst": [4, 6],
        "a.integ().lst": [0, 5, 2, 1],
        "c.integ().to_s()": "0.3333333333333333*x^3",
        "c.integ().value(3)": 9,
        "d.compose(d).lst": [9, 4],
        "d.compose(e).lst": [13, 0, -2],
        "e.compose(d).lst": [-4, -12, -4],
        "e.compose(e).lst": [-20, 0, 10, 0, -1]
      }
    }
  },
  "A8: Advanced": {
    path: {
      b: "# LOC:1 concat if then else\n\ntree = {3:0, 4:8, 5:3, 6:3, 10:5, 7:5, 12:6, 8:6, 20:10, 9:7, 24:12, 14:12}\n\npath = (tree,x) -> []",
      a: "path = (tree,x) -> if x==0 then return [] else [x].concat path tree,tree[x]",
      c: {
        "path tree, 4": [4, 8, 6, 3],
        "path tree, 20": [20, 10, 5, 3],
        "path tree, 9": [9, 7, 5, 3]
      }
    },
    summa: {
      b: "# LOC:1 _.isEqual _.isNumber _.head _.tail\n\nsumma = (tree) -> 0",
      a: "summa = (tree) -> return if _.isEqual tree,[] then 0 else if _.isNumber tree then tree else	summa(_.head tree) + summa _.tail tree ",
      c: {
        "_.isNumber '12'": false,
        "_.isNumber 12": true,
        "_.isNumber [12]": false,
        "_.head [11,22,33]": 11,
        "_.tail [11,22,33]": [22, 33],
        "summa [1,2,3,4]": 10,
        "summa [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 161
      }
    },
    "list recursion": {
      b: "# LOC:7 typeof if then else for in range min length\n# Lägg märke till javascripts felaktiga hantering av tal vid jämförelse av listor.\n\ncompare = (a,b) -> -2\n",
      a: "compare = (a,b) ->\n	if typeof a != \"object\" \n		if a > b then return -1 else if a < b then return 1 else return 0\n	for i in range min a.length,b.length\n		c = compare a[i],b[i]\n		if c != 0 then return c\n	0",
      c: {
        "typeof 1": "number",
        "typeof 3.14": "number",
        'typeof ""': "string",
        "typeof []": "object",
        "typeof {}": "object",
        "min 1,2": 1,
        "min 2,1": 1,
        "11 > 2": true,
        "[11] > [2]": false,
        "[11] > [10]": true,
        "11 == 11": true,
        '"11" == "11"': true,
        "[11] == [11]": false,
        "compare 11, 2": -1,
        "compare [11], [2]": -1,
        "compare [11], [10]": -1,
        "compare [11], [11]": 0,
        "compare [2], [11]": 1,
        "compare [1,[2,3]], [1,[2,3]]": 0,
        "compare [10,[2,3]], [1,[2,3]]": -1,
        "compare [1,[20,3]], [1,[2,3]]": -1,
        "compare [1,[2,30]], [1,[2,3]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,23]], [[12,13],14]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 0,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,25]], [[12,13],14]]": 1
      }
    },
    filter: {
      b: "# LOC:1 filter\n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\ng = (djur, art) -> []\n",
      a: "g = (djur, art) -> djur.filter (d) -> d.art == art\n",
      c: {
        "[1,-2,0,3,-4].filter (x) -> x > 0": [1, 3],
        "g djur,'hund'": [
          {
            namn: 'Karo',
            art: 'hund'
          }, {
            namn: 'Rocky',
            art: 'hund'
          }
        ],
        "g djur,'fisk'": [
          {
            namn: 'Albert',
            art: 'fisk'
          }, {
            namn: 'Herbert',
            art: 'fisk'
          }
        ],
        "g djur,'kanin'": [
          {
            namn: 'Fluffy',
            art: 'kanin'
          }
        ],
        "g djur,'katt'": [
          {
            namn: 'Trixie',
            art: 'katt'
          }
        ],
        "g djur,'papegoja'": []
      }
    },
    comprehension: {
      b: "# LOC:1 for \n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\nnamn = (djur) -> []\n",
      a: "namn = (djur) -> (d.namn for d in djur)",
      c: {
        "(2**i for i in range 5)": [1, 2, 4, 8, 16],
        "namn djur": ['Fluffy', 'Karo', 'Rocky', 'Albert', 'Trixie', 'Herbert']
      }
    },
    reduce: {
      b: "# LOC:1 reduce\n\nica = [\n	{pris: 123, antal:1}\n	{pris: 34, antal:2}\n	{pris: 78, antal:4}\n	{pris: 96, antal:5}\n]\nkonsum = [\n	{pris: 100, antal:1}\n	{pris: 30, antal:1}\n	{pris: 70, antal:1}\n	{pris: 90, antal:1}\n]\n\nsumma = (varor) -> 0",
      a: "summa = (varor) -> varor.reduce ((sum, vara) -> sum + vara.pris * vara.antal), 0",
      c: {
        "ica.reduce ((sum, vara) -> sum + vara.antal), 0": 12,
        "konsum.reduce ((sum, vara) -> sum + vara.pris), 0": 290,
        "summa ica": 983,
        "summa konsum": 290
      }
    },
    sortBy: {
      b: "# LOC:1 _.sortBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\nsortera = (djur,f) -> []",
      a: "sortera = (djur,f) -> _.sortBy djur, f",
      c: {
        "sortera djur,(d)->d.length": ["Karo", "Rocky", "Fluffy", "Albert", "Trixie", "Herbert"],
        "sortera djur": ["Albert", "Fluffy", "Herbert", "Karo", "Rocky", "Trixie"]
      }
    },
    groupBy: {
      b: "# LOC:1 groupBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\ngruppera = (djur,f) -> {}",
      a: "gruppera = (djur,f) -> _.groupBy djur, f",
      c: {
        "gruppera djur,(d) -> d.length": {
          "4": ["Karo"],
          "5": ["Rocky"],
          "6": ["Fluffy", "Albert", "Trixie"],
          "7": ["Herbert"]
        },
        "gruppera djur,(d) -> _.last(d)": {
          "y": ["Fluffy", "Rocky"],
          "o": ["Karo"],
          "t": ["Albert", "Herbert"],
          "e": ["Trixie"]
        }
      }
    },
    split: {
      b: "# LOC:1 split for in _.object\n\nparametrar = (url) -> {}",
      a: "parametrar = (url) -> _.object(f.split '=' for f in url.split('?')[1].split('&'))",
      c: {
        "_.object ['moe', 'larry', 'curly'], [30, 40, 50]": {
          moe: 30,
          larry: 40,
          curly: 50
        },
        "_.object [['moe', 30], ['larry', 40], ['curly', 50]]": {
          moe: 30,
          larry: 40,
          curly: 50
        },
        "parametrar 'dn.se?x=0&y=1'": {
          x: '0',
          y: '1'
        },
        "parametrar 'svd.se?page=7'": {
          page: '7'
        },
        "parametrar 'aftonbladet.se?article=123456&date=2016-12-01'": {
          article: '123456',
          date: '2016-12-01'
        },
        "parametrar 'expressen.se?city=Stockholm'": {
          city: 'Stockholm'
        },
        "parametrar 'http://stackoverflow.com/search?q=coffeescript'": {
          q: 'coffeescript'
        }
      }
    }
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Assert\data.coffee