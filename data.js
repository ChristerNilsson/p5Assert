// Generated by CoffeeScript 1.11.1
var data;

data = {
  "Nyheter": {
    "Nyheter": {
      b: "# NYHETER 2017-03-01\n#   A3: Listor, Växelcykel, Kalkylator\n#   A5: Palindrom, Rövarspråk\n#   A7: Bignum, Simplex, Complex\n#   A8: List recursion, Pokerhand\n\n# Klicka nu på A0!",
      a: ""
    }
  },
  "A0: One Parameter": {
    Ture: {
      b: "# Maskinen Ture är trasig! Ture är ledsen. Du måste laga Ture!\n# Just nu skickar Ture alltid ut nollor. Här är felet!\n# Skickar man in en tvåa till Ture ska en tvåa komma ut.\n# Namnet på det man skickar in till Ture står mellan parenteserna. Namnet är x.  \n# x kan vara olika saker. Till exempel en tvåa eller en trea.\n# Efter pilen talar man om vad som ska komma ut från Ture. \n#   Den gula kolumnen innehåller det som skickas in till Ture.\n#   Den gröna kolumnen innehåller det som ska komma ut ur Ture.\n#   Den röda kolumnen innehåller det som kommer ut ur Ture. \n# Se till att göra de RÖDA cellerna GRÖNA!\n# Tryck nu på PgDn och gör Ture glad igen!\n#   Ändra nollan till en tvåa. Nu skickas bara tvåor ut.\n#   Ändra tvåan till en trea.  Nu skickas bara treor ut.\n#   Ändra trean till ett x.    Nu blir alla de RÖDA cellerna GRÖNA och Ture är glad igen!\n# Gå till nästa uppgift genom att klicka på Wilma i listan till vänster.\nTure = (x) -> 0",
      a: "Ture = (x) -> x",
      c: {
        "Ture 0": 0,
        "Ture 2": 2,
        "Ture 3": 3
      }
    },
    Wilma: {
      b: "# Om man skickar en sjua till Wilma ska det komma tillbaks en åtta.\n# Om man skickar en åtta till Wilma ska det komma tillbaks en nia.\n# Vad ska Wilma skicka tillbaks om det kommer in ett x ?\n# Prova att använda plus.\n\nWilma = (x) -> 0",
      a: "Wilma = (x) -> x+1",
      c: {
        "3 + 1": 4,
        "Wilma 7": 8,
        "Wilma 8": 9
      }
    },
    Noel: {
      b: "# Någon av dessa löser problemet: + - * / %\n\nNoel = (x) -> null",
      a: "Noel = (x) -> 2*x",
      c: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "Noel 5": 10,
        "Noel 6": 12
      }
    },
    Greta: {
      b: "# + - * / %\n\nGreta = (x) -> undefined",
      a: "Greta = (x) -> x*x",
      c: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "Greta 1": 1,
        "Greta 2": 4,
        "Greta 3": 9,
        "Greta 4": 16,
        "Greta 5": 25
      }
    },
    Viktor: {
      b: "# + - * / %\n\nViktor = (x) -> \"LOL!\"",
      a: "Viktor = (x) -> -x",
      c: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "Viktor -4": 4,
        "Viktor 3": -3
      }
    },
    Sabrina: {
      b: "# + - * / %\n\nSabrina = (x) -> \"Zzzz....\"",
      a: "Sabrina = (x) -> x-2",
      c: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "Sabrina 7": 5,
        "Sabrina 17": 15
      }
    },
    David: {
      b: "# + - * / %\n\nDavid = (x) -> \"Tillfälligt avbrott\"",
      a: "David = (x) -> x/2",
      c: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "David 8": 4,
        "David 6": 3
      }
    },
    Gabriella: {
      b: "# + - * / %\n\nGabriella = (x) -> \"No connection.\"		",
      a: "Gabriella = (x) -> x % 2",
      c: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "Gabriella 7": 1,
        "Gabriella 8": 0,
        "Gabriella 10": 0,
        "Gabriella 11": 1
      }
    },
    Beppe: {
      b: "# == < > !=\n\nBeppe = (x) -> \"Försök igen senare.\"			",
      a: "Beppe = (x) -> x == 2",
      c: {
        "1 == 1": true,
        "1 == 2": false,
        "1 != 1": false,
        "1 != 2": true,
        "1 < 1": false,
        "1 < 2": true,
        "1 > 1": false,
        "1 > 2": false,
        "1 <= 1": true,
        "1 <= 2": true,
        "1 >= 1": true,
        "1 >= 2": false,
        "Beppe 1": false,
        "Beppe 2": true,
        "Beppe 3": false,
        "Beppe 4": false
      }
    },
    Karolina: {
      b: "# == < > !=\n\nKarolina = (x) -> \"Kommer om en minut\"	",
      a: "Karolina = (x) -> x > 2",
      c: {
        "1 == 1": true,
        "1 == 2": false,
        "1 != 1": false,
        "1 != 2": true,
        "1 < 1": false,
        "1 < 2": true,
        "1 > 1": false,
        "1 > 2": false,
        "1 <= 1": true,
        "1 <= 2": true,
        "1 >= 1": true,
        "1 >= 2": false,
        "Karolina 1": false,
        "Karolina 2": false,
        "Karolina 3": true,
        "Karolina 4": true
      }
    },
    Kasper: {
      b: "# == < > !=\n\nKasper = (x) -> \"Gone fishing\"	",
      a: "Kasper = (x) -> x > 2",
      c: {
        "1 == 1": true,
        "1 == 2": false,
        "1 != 1": false,
        "1 != 2": true,
        "1 < 1": false,
        "1 < 2": true,
        "1 > 1": false,
        "1 > 2": false,
        "1 <= 1": true,
        "1 <= 2": true,
        "1 >= 1": true,
        "1 >= 2": false,
        "Kasper 1": false,
        "Kasper 2": false,
        "Kasper 3": true,
        "Kasper 4": true
      }
    },
    Miranda: {
      b: "# == < > !=\n\nMiranda = (x) -> \"Tralala...\"",
      a: "Miranda = (x) -> x != 2",
      c: {
        "1 == 1": true,
        "1 == 2": false,
        "1 != 1": false,
        "1 != 2": true,
        "1 < 1": false,
        "1 < 2": true,
        "1 > 1": false,
        "1 > 2": false,
        "1 <= 1": true,
        "1 <= 2": true,
        "1 >= 1": true,
        "1 >= 2": false,
        "Miranda 1": true,
        "Miranda 2": false,
        "Miranda 3": true,
        "Miranda 4": true
      }
    }
  },
  "A1: Two Parameters": {
    Operator1: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a*b",
      c: {
        "g 3,4": 12,
        "g 4,6": 24
      }
    },
    Operator2: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a+b",
      c: {
        "g 3,4": 7,
        "g 4,6": 10
      }
    },
    Operator3: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> b-a",
      c: {
        "g 3,4": 1,
        "g 4,6": 2
      }
    },
    Operator4: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a/b",
      c: {
        "g 8,4": 2,
        "g 12,3": 4
      }
    },
    Operator5: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a%b",
      c: {
        "g 8,4": 0,
        "g 9,4": 1,
        "g 10,4": 2,
        "g 11,4": 3
      }
    },
    Operator6: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a == b",
      c: {
        "g 0,0": true,
        "g 1,1": true,
        "g 7,4": false,
        "g 6,4": false
      }
    },
    Operator7: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a - b == 1",
      c: {
        "g 7,6": true,
        "g 5,4": true,
        "g 7,4": false,
        "g 6,4": false
      }
    },
    Operator8: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a + b == 7",
      c: {
        "g 7,0": true,
        "g 5,2": true,
        "g 7,4": false,
        "g 6,4": false
      }
    }
  },
  'A2: range lerp for': {
    range: {
      b: "# LOC:3 range []\n\nf = (n) -> []\ng = (a,b) -> []\nh = (a,b,n) -> []",
      a: "f = (n) -> range n\ng = (a,b) -> range a,b\ng = (a,b,n) -> range a,b,n",
      c: {
        "range 3": [0, 1, 2],
        "range 1,4": [1, 2, 3],
        "range 1,9,2": [1, 3, 5, 7],
        "f 5": [0, 1, 2, 3, 4],
        "f 6": [0, 1, 2, 3, 4, 5],
        "g 1,5": [1, 2, 3, 4],
        "g 2,4": [2, 3],
        "g -2,0": [-2, -1],
        "h 0,10,1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        "h 0,10,2": [0, 2, 4, 6, 8],
        "h 0,-10,-1": [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
      }
    },
    "lerp": {
      b: "# LOC:1 lerp + - * /\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,i) -> 0",
      a: "f = (a,b,i) -> lerp a,b,i",
      c: {
        "lerp 8,12,0": 8,
        "lerp 8,12,1": 12,
        "lerp 8,12,0.5": 10,
        "lerp 8,12,-1": 4,
        "lerp 8,12,2": 16,
        "f 10,20,0": 10,
        "f 10,20,1": 20,
        "f 10,20,2": 30,
        "f 10,20,0.5": 15,
        "f 10,20,-1": 0
      }
    },
    "for": {
      b: "# LOC:1 for in range lerp []\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,n) -> []",
      a: "f = (a,b,n) -> lerp a,b,i for i in range n",
      c: {
        "(i*i for i in range 5)": [0, 1, 4, 9, 16],
        "f 0,0,5": [0, 0, 0, 0, 0],
        "f 1,2,5": [1, 2, 3, 4, 5],
        "f 5,4,5": [5, 4, 3, 2, 1],
        "f -1,-2,5": [-1, -2, -3, -4, -5],
        "f 5,25,10": [5, 25, 45, 65, 85, 105, 125, 145, 165, 185],
        "f -0.1,0.0,3": [-0.1, 0.0, 0.1]
      }
    }
  },
  "A3: [ ]": {
    Introduktion: {
      b: "# LOC:16 if < then else []\n# Sortera UTAN att använda loopar\n# Sortera UTAN att använda någon färdig sorteringsrutin\n\nsort2 = (a,b) -> [a,b]\nsort3 = (a,b,c) -> [a,b,c]\nsort4 = (a,b,c,d) -> [a,b,c,d]\nsort5 = (a,b,c,d,e) -> [a,b,c,d,e]\n",
      a: "sort2 = (a,b) -> if a>b then [b,a] else [a,b]\n\nsort3 = (a,b,c) ->\n	[a,b] = sort2 a,b\n	[b,c] = sort2 b,c\n	[a,b] = sort2 a,b\n	[a,b,c]\n\nsort4 = (a,b,c,d) ->\n	[a,b,c] = sort3 a,b,c\n	[b,c,d] = sort3 b,c,d\n	[a,b] = sort2 a,b\n	[a,b,c,d]\n\nsort5 = (a,b,c,d,e) ->\n	[a,b,c,d] = sort4 a,b,c,d\n	[b,c,d,e] = sort4 b,c,d,e\n	[a,b] = sort2 a,b\n	[a,b,c,d,e]",
      c: {
        "if 11 < 2 then [11,2] else [2,11]": [2, 11],
        "sort2 11,2": [2, 11],
        "sort2 2,11": [2, 11],
        "sort3 11,4,5": [4, 5, 11],
        "sort3 11,5,4": [4, 5, 11],
        "sort3 4,11,5": [4, 5, 11],
        "sort3 4,5,11": [4, 5, 11],
        "sort3 5,11,4": [4, 5, 11],
        "sort3 5,4,11": [4, 5, 11],
        "sort4 11,4,5,6": [4, 5, 6, 11],
        "sort4 11,4,6,5": [4, 5, 6, 11],
        "sort4 11,5,4,6": [4, 5, 6, 11],
        "sort4 11,5,6,4": [4, 5, 6, 11],
        "sort4 11,6,4,5": [4, 5, 6, 11],
        "sort4 11,6,5,4": [4, 5, 6, 11],
        "sort4 4,11,5,6": [4, 5, 6, 11],
        "sort4 4,11,6,5": [4, 5, 6, 11],
        "sort4 4,5,11,6": [4, 5, 6, 11],
        "sort4 4,5,6,11": [4, 5, 6, 11],
        "sort4 4,6,11,5": [4, 5, 6, 11],
        "sort4 4,6,5,11": [4, 5, 6, 11],
        "sort4 5,11,4,6": [4, 5, 6, 11],
        "sort4 5,11,6,4": [4, 5, 6, 11],
        "sort4 5,4,11,6": [4, 5, 6, 11],
        "sort4 5,4,6,11": [4, 5, 6, 11],
        "sort4 5,6,11,4": [4, 5, 6, 11],
        "sort4 5,6,4,11": [4, 5, 6, 11],
        "sort4 6,11,4,5": [4, 5, 6, 11],
        "sort4 6,11,5,4": [4, 5, 6, 11],
        "sort4 6,4,11,5": [4, 5, 6, 11],
        "sort4 6,4,5,11": [4, 5, 6, 11],
        "sort4 6,5,11,4": [4, 5, 6, 11],
        "sort4 6,5,4,11": [4, 5, 6, 11],
        "sort5 5,4,11,2,1": [1, 2, 4, 5, 11],
        "sort5 11,5,2,4,1": [1, 2, 4, 5, 11],
        "sort5 5,2,11,4,1": [1, 2, 4, 5, 11]
      }
    },
    Listor: {
      b: "# LOC:11 length push concat pop sort .. []\n\nantal = (a) -> 0\nfetch = (a,i) -> 0 \nkonkatenera = (a,b) -> [] \nsortera = (a) -> []\nförsta = (a,n) -> []\nmitti = (a,i,j) -> []\nsista = (a,n) -> []",
      a: "antal = (a) -> a.length\nfetch = (a,i) -> a[i]\nkonkatenera = (a,b) -> a.concat b\nsortera = (a) -> a.sort()\nförsta = (a,n) -> a[..n-1]\nmitti = (a,i,j) -> a[i..j]\nsista = (a,n) -> a[-n..]",
      c: {
        "[1,2].concat [3,4]": [1, 2, 3, 4],
        "[2,3,4,5].length": 4,
        "[11,22,33,44][2]": 33,
        "[11,22,33,44][..2]": [11, 22, 33],
        "[11,22,33,44][1..]": [22, 33, 44],
        "[11,22,33,44][1..2]": [22, 33],
        "[4,2,3,1].sort()": [1, 2, 3, 4],
        "[4,2,3,1].sort().reverse()": [4, 3, 2, 1],
        "antal [1,2,3]": 3,
        "antal [5,4,1,2,9,3,7]": 7,
        "fetch [4,5,6],0": 4,
        "fetch [4,5,6],2": 6,
        "konkatenera [1,2,3],[4,5,6]": [1, 2, 3, 4, 5, 6],
        "sortera [5,4,1,2,9,3,7]": [1, 2, 3, 4, 5, 7, 9],
        "första [11,12,13,14,15],3": [11, 12, 13],
        "mitti [11,12,13,14,15],1,2": [12, 13],
        "sista [11,12,13,14,15],4": [12, 13, 14, 15]
      }
    },
    Växelcykel: {
      b: "# LOC:4 [] for in push sort - /\n# Din växelcykel har stora och små kugghjul. I vilken i ordning ligger växlarna? \n\ngear = (big, small) -> []",
      a: "gear = (big, small) ->\n	res = []\n	res.push [Math.round(b/s * 100)/100,b,s] for s in small for b in big\n	res.sort() ",
      c: {
        "Math.round 3.1415": 3,
        "Math.round(3.1415 * 10)/10": 3.1,
        "gear [43,53], [13,21]": [[2.05, 43, 21], [2.52, 53, 21], [3.31, 43, 13], [4.08, 53, 13]],
        "gear [43,53], [13,15,17,19,21]": [[2.05, 43, 21], [2.26, 43, 19], [2.52, 53, 21], [2.53, 43, 17], [2.79, 53, 19], [2.87, 43, 15], [3.12, 53, 17], [3.31, 43, 13], [3.53, 53, 15], [4.08, 53, 13]]
      }
    },
    Kalkylator: {
      b: "# LOC:7 [] for in split == push pop if else parseInt\n\ncalc = (command) -> 0",
      a: "calc = (command) ->\n	stack = []\n	for cmd in command.split ' '\n		if cmd == '+' then stack.push stack.pop() + stack.pop()\n		else if cmd == '*' then stack.push stack.pop() * stack.pop()\n		else stack.push parseInt cmd\n	stack.pop()		",
      c: {
        "'a b c'.split ' '": ['a', 'b', 'c'],
        '1 + 2': 3,
        "'1' + '2'": '12',
        "1 + '2'": '12',
        "'1' + 2": '12',
        "parseInt '3'": 3,
        "parseFloat '3.14'": 3.14,
        "calc '2'": 2,
        "calc '2 3'": 3,
        "calc '2 3 +'": 5,
        "calc '2 3 *'": 6,
        "calc '2 3 4 * +'": 14
      }
    }
  },
  "A4: { }": {
    "Boys and Girls": {
      b: "# LOC:7 {} [] for in length + /\n\ngirls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\nnames = (kids) -> kid.name for kid in kids\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\navg = (numbers) -> 0",
      a: "girls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\nnames = (kids) -> kid.name for kid in kids\n\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n	\navg = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "avg ages girls": 11,
        "avg ages boys": 9.5
      }
    }
  },
  'A5: " "': {
    Introduktion: {
      b: "# LOC:8 length [] .. + \"\" indexOf split join for in\n# LOC betyder Lines Of Code, dvs antal kodrader.\n# Åtta kodrader är lagom för detta problem.\n# Färre innebär sämre läsbarhet.\n# Har du fler bör du fundera på en kortare lösning.\n\nantal = (s) -> 0\ntecken = (s,i) -> \"\"\nmitti = (s,i,j) -> \"\"\nkonkatenera = (s,t) -> \"\"\nleta = (s,t) -> 0\nsplittra = (s,avgr) -> [] \nhopslagning = (a,avgr='') -> \"\" \ndubbla = (s) -> \"\"",
      a: "antal = (s) -> s.length\ntecken = (s,i) -> s[i]\nmitti = (s,i,j) -> s[i..j]\nkonkatenera = (s,t) -> s + t\nleta = (s,t) -> s.indexOf t\nsplittra = (s,avgr) -> s.split avgr\nhopslagning = (a,avgr='') -> a.join(avgr)\ndubbla = (s) -> hopslagning (tecken + tecken for tecken in s)",
      c: {
        '"Javascript".length': 10,
        '"Javascript".indexOf "a"': 1,
        '"1,2,3".split ","': ["1", "2", "3"],
        '["1","2","3"].join " "': "1 2 3",
        'antal "Coffee"': 6,
        'tecken "Coffee",1': 'o',
        'mitti "Coffee",1,3': 'off',
        'mitti "Coffee",3,5': 'fee',
        'konkatenera "Coffee","script"': 'Coffeescript',
        'leta "Coffee","e"': 4,
        'leta "Coffee","x"': -1,
        "splittra '2 3 +',' '": ['2', '3', '+'],
        "hopslagning ['2', '3', '+'], '|'": "2|3|+",
        'dubbla "script"': 'ssccrriipptt'
      }
    },
    Palindrom: {
      b: "# LOC:1 join reverse split \"\"\n# Ett palindrom blir samma ord om man vänder på det.\n# Ordet palindrom är inte ett palindrom.\n\npalindrom = (word) -> null",
      a: "palindrom = (word) -> word.split(\"\").reverse().join(\"\") == word",
      c: {
        "palindrom 'badrum'": false,
        "palindrom 'kök'": true,
        "palindrom 'kajak'": true,
        "palindrom 'kanot'": false
      }
    },
    Rövarspråk: {
      b: "# LOC:1 for in if then else + join '' ()\n\nrs = (word,extra='o') -> \"\"",
      a: "rs = (word,extra='o') -> ((if letter in 'aeiouy åäö' then letter else letter + extra + letter) for letter in word).join(\"\")",
      c: {
        "rs 'kalas fint'": 'kokalolasos fofinontot',
        "rs 'bokstav'": 'bobokoksostotavov',
        "rs 'kalas fint','i'": 'kikalilasis fifinintit',
        "rs 'bokstav','e'": 'bebokeksestetavev',
        "rs 'kalas fint','a'": 'kakalalasas fafinantat'
      }
    }
  },
  "A6: Interpolation": {
    linearequation1: {
      b: "# LOC:1 *\n\nf = (x) -> 0",
      a: "f = (x) -> 2 * x",
      c: {
        "f 2": 4,
        "f 3": 6
      }
    },
    linearequation2: {
      b: "# LOC:1 * +\n\nf = (x) -> 0",
      a: "f = (x) -> 3 + 2 * x",
      c: {
        "f 2": 7,
        "f 3": 9
      }
    },
    lerp: {
      b: "# LOC:1 * + -\n\nlerp = (y1,y2,x) -> 0",
      a: "lerp = (y1,y2,x) -> y1 + (y2-y1) * x",
      c: {
        "lerp 10,16,-1": 4,
        "lerp 10,16,0": 10,
        "lerp 10,16,0.5": 13,
        "lerp 10,16,1": 16,
        "lerp 10,16,2": 22
      }
    },
    map: {
      b: "# LOC:1 * + - /\n\nmap = (x,x1,x2,y1,y2) -> 0",
      a: "map = (x,x1,x2,y1,y2) -> y1 + (y2-y1) * (x-x1)/(x2-x1)",
      c: {
        "map 0,1,3,20,40": 10,
        "map 1,1,3,20,40": 20,
        "map 2,1,3,20,40": 30,
        "map 3,1,3,20,40": 40,
        "map 75,50,100,0,1": 0.5,
        "map 16,0,40,0,200": 80
      }
    },
    Hour2Degree: {
      b: "# LOC:1 map + - * / %\n\nh2d = (x) -> 0",
      a: "h2d = (x) -> map(15-x,0,12,0,360) % 360",
      c: {
        "h2d 0": 90,
        "h2d 1": 60,
        "h2d 2": 30,
        "h2d 3": 0,
        "h2d 4": 330,
        "h2d 5": 300,
        "h2d 6": 270,
        "h2d 7": 240,
        "h2d 8": 210,
        "h2d 9": 180,
        "h2d 10": 150,
        "h2d 11": 120,
        "h2d 12": 90
      }
    },
    Hour2Radian: {
      b: "# LOC:1 map + - * / % Math.PI\n\nh2r = (x) -> 0",
      a: "h2r = (x) -> (map 15-x,0,12,0,2*Math.PI) % (2*Math.PI)",
      c: {
        "h2r 0": 3 * Math.PI / 6,
        "h2r 3": 0 * Math.PI / 6,
        "h2r 4": 11 * Math.PI / 6,
        "h2r 5": 10 * Math.PI / 6,
        "h2r 6": 9 * Math.PI / 6,
        "h2r 7": 8 * Math.PI / 6,
        "h2r 9": 6 * Math.PI / 6,
        "h2r 10": 5 * Math.PI / 6,
        "h2r 11": 4 * Math.PI / 6,
        "h2r 12": 3 * Math.PI / 6
      }
    }
  },
  "A7: class": {
    Kid: {
      b: "# LOC:8 class constructor new @ [] for in length + /\n# Innan du löser denna uppgift: Be att få se Bouncing Balls!\n\nclass Kid\n	constructor : (name,age) ->\n\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\n\nnames = (kids) -> []\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\naverage = (numbers) -> 0\n",
      a: "\nclass Kid\n	constructor : (@name,@age) ->\n	\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\n\nnames = (kids) -> kid.name for kid in kids\n	\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n	\naverage = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "average ages girls": 11,
        "average ages boys": 9.5
      }
    },
    Simplex: {
      b: "# LOC:14 class constructor new [] @	+ - *\n# Tips: Spela p5Complex innan du påbörjar denna övning.	\n\nclass Simplex\n	constructor : (x,y) ->\n	translate : -> @\n	scale : -> @\n	rotate : -> @\n	mirror : -> @\n\na = new Simplex 1,3\nb = new Simplex -2,4",
      a: "class Simplex\n	constructor : (@x,@y) ->\n	translate : -> \n		@x += 1\n		@\n	scale : -> \n		[@x,@y] = [2*@x,2*@y] \n		@\n	rotate : -> \n		[@x,@y] = [-@y,@x]\n		@\n	mirror : ->\n		[@x,@y] = [@y,@x]\n		@",
      c: {
        "pp a": "{x:1,y:3}",
        "pp a.translate()": "{x:2,y:3}",
        "pp a.scale()": "{x:2,y:6}",
        "pp a.rotate()": "{x:-3,y:1}",
        "pp a.mirror()": "{x:3,y:1}",
        "pp a.translate().scale()": "{x:4,y:6}",
        "pp a.scale().translate()": "{x:3,y:6}",
        "pp b": "{x:-2,y:4}",
        "pp b.translate()": "{x:-1,y:4}",
        "pp b.scale()": "{x:-4,y:8}",
        "pp b.rotate()": "{x:-4,y:-2}",
        "pp b.mirror()": "{x:4,y:-2}",
        "pp b.translate().scale()": "{x:-2,y:8}",
        "pp b.scale().translate()": "{x:-3,y:8}",
        "pp b.mirror().mirror()": "{x:-2,y:4}",
        "pp b.rotate().rotate().rotate().rotate()": "{x:-2,y:4}"
      }
    },
    Bignum: {
      b: "# LOC:22 class constructor new @ parseInt reverse length push floor slice unshift join for if\n# Med Bignum kan man räkna exakt med tal med tusentals siffor.\n# Du programmerar på samma sätt som om du räknar med papper och penna.\n# Multiplikationen använder sig av additionen samt inskiftande av noll för varje siffra.\n\nclass Bignum\n	constructor : (s) -> @list=[]\n	to_s : () -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7",
      a: "\n# observera att reverse() vänder PÅ plats.\n# clona därför med slice() i t ex to_s\n#reversera = (arr) -> arr.slice().reverse() \n\nclass Bignum\n	constructor : (s) ->\n		@list = (parseInt(ch) for ch in s)\n		@list.reverse()\n\n	to_s : () -> @list.slice().reverse().join(\"\")\n\n	add : (other) ->\n		if @list.length < other.list.length then return other.add @ \n		carry = 0\n		res = new Bignum \"\"\n		for d1, pos in @list\n			d = d1 + (other.list[pos] || 0) + carry\n			res.list.push d % 10\n			carry = Math.floor d / 10\n		if carry then res.list.push 1\n		res\n\n	mul : (other) ->\n		res = new Bignum \"\"\n		for digit,d in other.list.slice().reverse()\n			for i in range digit\n				res = res.add @\n			if d < other.list.length-1 then res.list.unshift 0\n		res\n	\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7\n	",
      c: {
        "parseInt '1'": 1,
        "[1,2,3].reverse()": [3, 2, 1],
        "[1,2,3].length": 3,
        "Math.floor 3.14": 3,
        "[11,22,33].slice 1": [22, 33],
        "[11,22,33].slice 1,2": [22],
        "[11,22,33].slice()": [11, 22, 33],
        "12345678901234567890 + 1": 12345678901234567000,
        "a.list": [3, 2, 1],
        "a.to_s()": "123",
        "a.add(b).to_s()": "131",
        "b.add(a).to_s()": "131",
        "a.add(c).to_s()": "1122",
        "a.add(b).add(c).to_s()": "1130",
        "e.add(f).to_s()": "12345678901234567891",
        "g.to_s()": "1267650600228229401496703205376",
        "a.mul(b).to_s()": "984",
        "a.mul(c).to_s()": "122877",
        "a.mul(d).to_s()": "56088",
        "h.to_s()": "340282366920938463463374607431768211456"
      }
    },
    Complex: {
      b: "# LOC:31 class constructor new @ -> if + * == > < \n# Börja med att få bort onödiga nollor och ettor i to_s!\n\nclass Complex\n	constructor : (@x,@y) ->\n	to_s : -> @x + \" \" + @y + \"i\"\n	add : (other) -> @\n	mul : (other) -> @",
      a: "class Complex\n	constructor : (@x,@y) ->\n	add : (other) ->\n		new Complex @x+other.x, @y+other.y\n	mul : (other) ->\n		a = @x\n		b = @y\n		c = other.x\n		d = other.y\n		new Complex a*c-b*d, b*c+a*d\n	to_s : ->\n		sx = \"\" if @x == 0\n		sx = \"" + this.x + "\" if @x > 0\n		sx = \"" + this.x + "\" if @x < 0\n\n		sy = \"\" if @y == 0\n		sy = \"-i\" if @y == -1\n		sy = \"i\" if @y == 1\n		sy = \"" + this.y + "i\" if @y > 1\n		sy = \"" + this.y + "i\" if @y < -1\n\n		if sx!=\"\" and sy!=\"\"\n			if @y < 0\n				s = sx+sy\n			else if @y==0\n				s = sx\n			else\n				s = sx + \"+\" + sy\n		else if @x==0 and @y==0\n			s = \"0\"\n		else \n			s = sx + sy\n		s",
      c: {
        "new Complex(-1,0).to_s()": "-1",
        "new Complex(-1,-1).to_s()": "-1-i",
        "new Complex(0,-1).to_s()": "-i",
        "new Complex(0,0).to_s()": "0",
        "new Complex(0,1).to_s()": "i",
        "new Complex(1,-2).to_s()": "1-2i",
        "new Complex(1,-1).to_s()": "1-i",
        "new Complex(1,0).to_s()": "1",
        "new Complex(1,1).to_s()": "1+i",
        "new Complex(1,2).to_s()": "1+2i",
        "new Complex(1,2).add(new Complex(1,-1)).to_s()": "2+i",
        "new Complex(1,2).mul(new Complex(1,-1)).to_s()": "3+i"
      }
    },
    Polynom: {
      b: "# LOC:52 class constructor new [] @ or for in range length ** push reverse join " + "\n# Uppgiften innehåller matematik på gymnasienivå.\n\nclass Polynom\n	constructor : (lst) -> @lst=[]\n	to_s : -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n	power : (n) -> @\n	value : (x) -> 0\n	diff : -> @\n	integ : -> @\n	compose : (other)	-> @\n",
      a: "class Polynom\n	constructor : (@lst) ->\n\n	add : (other) ->\n		h = []\n		h[i] = (h[i] or 0) + value for value,i in @lst\n		h[i] = (h[i] or 0) + value for value,i in other.lst\n		new Polynom h\n\n	mul : (other) ->\n		h = (0 for i in range @lst.length + other.lst.length - 1)\n		for value1,i1 in @lst\n			for value2,i2 in other.lst\n				i = i1+i2\n				h[i] = (h[i] or 0) + value1 * value2\n		new Polynom h\n\n	power : (n) ->\n		res = new Polynom [1]\n		res = res.mul @ for i in range n\n		res\n\n	compose : (other)	->\n		res = new Polynom []\n		for value,i in @lst\n			res = res.add (new Polynom [value]).mul other.power i\n		res\n\n	value : (x) ->\n		res = 0\n		res += value * x ** i for value,i in @lst\n		res\n\n	diff : ->\n		lst = []\n		for value,i in @lst\n			if i != 0 then lst[i-1] = i*value\n		new Polynom lst\n\n	integ : ->\n		lst = [0]\n		for value,i in @lst\n			i += 1\n			lst[i] = value/i\n		new Polynom lst\n\n	to_s : ->\n		arr = []\n		for item,i in @lst\n			if item == 0 then continue\n			if item == 1 \n				if i==0 then arr.push \"1\"\n				else if i==1 then arr.push \"x\"\n				else arr.push \"x^\" + i\n			else				\n				if i==0 then arr.push item\n				else if i==1 then arr.push item + \"*x\"\n				else arr.push item + \"*x^\" + i\n		arr.reverse()\n		arr.join \"+\"",
      c: {
        "(new Polynom [5,4,3]).lst": [5, 4, 3],
        "(new Polynom [4,3]).lst": [4, 3],
        "(new Polynom [5,4,3]).to_s()": "3*x^2+4*x+5",
        "(new Polynom [0,0,1]).to_s()": "x^2",
        "(new Polynom [5,4,3]).add(new Polynom [4,3]).to_s()": "3*x^2+7*x+9",
        "(new Polynom [5,4,3]).mul(new Polynom [4,3]).to_s()": "9*x^3+24*x^2+31*x+20",
        "(new Polynom [5,4,3]).value(2)": 25,
        "(new Polynom [5,4,3]).power(2).lst": [25, 40, 46, 24, 9],
        "(new Polynom [4,3]).power(3).lst": [64, 144, 108, 27],
        "(new Polynom [5,4,3]).diff().lst": [4, 6],
        "(new Polynom [5,4,3]).integ().lst": [0, 5, 2, 1],
        "(new Polynom [0,0,1]).integ().to_s()": "0.3333333333333333*x^3",
        "(new Polynom [0,0,1]).integ().value(3)": 9,
        "(new Polynom [3,2]).compose(new Polynom [3,2]).lst": [9, 4],
        "(new Polynom [3,2]).compose(new Polynom [5,0,-1]).lst": [13, 0, -2],
        "(new Polynom [5,0,-1]).compose(new Polynom [3,2]).lst": [-4, -12, -4],
        "(new Polynom [5,0,-1]).compose(new Polynom [5,0,-1]).lst": [-20, 0, 10, 0, -1]
      }
    }
  },
  "A8: Advanced": {
    path: {
      b: "# LOC:1 concat if then else\n\ntree = {3:0, 4:8, 5:3, 6:3, 10:5, 7:5, 12:6, 8:6, 20:10, 9:7, 24:12, 14:12}\n\npath = (tree,x) -> []",
      a: "path = (tree,x) -> if x==0 then return [] else [x].concat path tree,tree[x]",
      c: {
        "path tree, 4": [4, 8, 6, 3],
        "path tree, 20": [20, 10, 5, 3],
        "path tree, 9": [9, 7, 5, 3]
      }
    },
    summa: {
      b: "# LOC:1 _.isEqual _.isNumber _.head _.tail\n\nsumma = (tree) -> 0",
      a: "summa = (tree) -> return if _.isEqual tree,[] then 0 else if _.isNumber tree then tree else	summa(_.head tree) + summa _.tail tree ",
      c: {
        "_.isNumber '12'": false,
        "_.isNumber 12": true,
        "_.isNumber [12]": false,
        "_.head [11,22,33]": 11,
        "_.tail [11,22,33]": [22, 33],
        "summa [1,2,3,4]": 10,
        "summa [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 161
      }
    },
    "list recursion": {
      b: "# LOC:7 typeof if then else for in range min length\n# Lägg märke till javascripts felaktiga hantering av tal vid jämförelse av listor.\n\ncompare = (a,b) -> -2\n",
      a: "compare = (a,b) ->\n	if typeof a != \"object\" \n		if a > b then return -1 else if a < b then return 1 else return 0\n	for i in range min a.length,b.length\n		c = compare a[i],b[i]\n		if c != 0 then return c\n	0",
      c: {
        "typeof 1": "number",
        "typeof 3.14": "number",
        'typeof ""': "string",
        "typeof []": "object",
        "typeof {}": "object",
        "min 1,2": 1,
        "min 2,1": 1,
        "11 > 2": true,
        "[11] > [2]": false,
        "[11] > [10]": true,
        "11 == 11": true,
        '"11" == "11"': true,
        "[11] == [11]": false,
        "compare 11, 2": -1,
        "compare [11], [2]": -1,
        "compare [11], [10]": -1,
        "compare [11], [11]": 0,
        "compare [2], [11]": 1,
        "compare [1,[2,3]], [1,[2,3]]": 0,
        "compare [10,[2,3]], [1,[2,3]]": -1,
        "compare [1,[20,3]], [1,[2,3]]": -1,
        "compare [1,[2,30]], [1,[2,3]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,23]], [[12,13],14]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 0,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,25]], [[12,13],14]]": 1
      }
    },
    filter: {
      b: "# LOC:1 filter\n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\ng = (djur, art) -> []\n",
      a: "g = (djur, art) -> djur.filter (d) -> d.art == art\n",
      c: {
        "[1, -2, 0, 3, -4].filter (x) -> x > 0": [1, 3],
        "g djur,'hund'": [
          {
            namn: 'Karo',
            art: 'hund'
          }, {
            namn: 'Rocky',
            art: 'hund'
          }
        ],
        "g djur,'fisk'": [
          {
            namn: 'Albert',
            art: 'fisk'
          }, {
            namn: 'Herbert',
            art: 'fisk'
          }
        ],
        "g djur,'kanin'": [
          {
            namn: 'Fluffy',
            art: 'kanin'
          }
        ],
        "g djur,'katt'": [
          {
            namn: 'Trixie',
            art: 'katt'
          }
        ],
        "g djur,'papegoja'": []
      }
    },
    comprehension: {
      b: "# LOC:1 for \n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\nnamn = (djur) -> []\n",
      a: "namn = (djur) -> (d.namn for d in djur)",
      c: {
        "(2**i for i in range 5)": [1, 2, 4, 8, 16],
        "namn djur": ['Fluffy', 'Karo', 'Rocky', 'Albert', 'Trixie', 'Herbert']
      }
    },
    reduce: {
      b: "# LOC:1 reduce\n\nica = [\n	{pris: 123, antal:1}\n	{pris: 34, antal:2}\n	{pris: 78, antal:4}\n	{pris: 96, antal:5}\n]\nkonsum = [\n	{pris: 100, antal:1}\n	{pris: 30, antal:1}\n	{pris: 70, antal:1}\n	{pris: 90, antal:1}\n]\n\nsumma = (varor) -> 0",
      a: "summa = (varor) -> varor.reduce ((sum, vara) -> sum + vara.pris * vara.antal), 0",
      c: {
        "ica.reduce ((sum, vara) -> sum + vara.antal), 0": 12,
        "konsum.reduce ((sum, vara) -> sum + vara.pris), 0": 290,
        "summa ica": 983,
        "summa konsum": 290
      }
    },
    sortBy: {
      b: "# LOC:1 _.sortBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\nsortera = (djur,f) -> []",
      a: "sortera = (djur,f) -> _.sortBy djur, f",
      c: {
        "_.sortBy ['one', 'two', 'three', 'four'], 'length'": ["one", "two", "four", "three"],
        "sortera djur, (d) -> d.length": ["Karo", "Rocky", "Fluffy", "Albert", "Trixie", "Herbert"],
        "sortera djur": ["Albert", "Fluffy", "Herbert", "Karo", "Rocky", "Trixie"]
      }
    },
    groupBy: {
      b: "# LOC:1 _.groupBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\ngruppera = (djur,f) -> {}",
      a: "gruppera = (djur,f) -> _.groupBy djur, f",
      c: {
        "_.groupBy ['one', 'two', 'three'], 'length'": {
          3: ["one", "two"],
          5: ["three"]
        },
        "gruppera djur, (d) -> d.length": {
          "4": ["Karo"],
          "5": ["Rocky"],
          "6": ["Fluffy", "Albert", "Trixie"],
          "7": ["Herbert"]
        },
        "gruppera djur, (d) -> _.last(d)": {
          "y": ["Fluffy", "Rocky"],
          "o": ["Karo"],
          "t": ["Albert", "Herbert"],
          "e": ["Trixie"]
        }
      }
    },
    split: {
      b: "# LOC:1 split for in _.object\n\nparametrar = (url) -> {}",
      a: "parametrar = (url) -> _.object(f.split '=' for f in url.split('?')[1].split('&'))",
      c: {
        "'1,2,3'.split ','": ["1", "2", "3"],
        "_.object ['moe', 'larry', 'curly'], [30, 40, 50]": {
          moe: 30,
          larry: 40,
          curly: 50
        },
        "_.object [['moe', 30], ['larry', 40], ['curly', 50]]": {
          moe: 30,
          larry: 40,
          curly: 50
        },
        "parametrar 'dn.se?x=0&y=1'": {
          x: '0',
          y: '1'
        },
        "parametrar 'svd.se?page=7'": {
          page: '7'
        },
        "parametrar 'aftonbladet.se?article=123456&date=2016-12-01'": {
          article: '123456',
          date: '2016-12-01'
        },
        "parametrar 'expressen.se?city=Stockholm'": {
          city: 'Stockholm'
        },
        "parametrar 'http://stackoverflow.com/search?q=coffeescript'": {
          q: 'coffeescript'
        }
      }
    },
    PokerHand: {
      b: "# LOC:10 nilsson: compare bsort underscore: _.size _.groupBy _.unzip _.uniq \"\" [] {}\n# javascript: for in if then else substring length parseInt split indexOf\n\n# https://sv.wikipedia.org/wiki/Pokerhand\n\npoker = (a,b) -> -2\n",
      a: "poker = (a,b) -> compare calc(a.split(\" \")), calc(b.split(\" \"))\ncalc = (hand) ->\n	groups = _.groupBy('  23456789TJQKA'.indexOf(card[2]) for card in hand)\n	[score, ranks] = _.unzip reverse bsort ([cnt.length, parseInt(rank)] for rank, cnt of groups) \n	if score.length == 5\n		if compare(ranks, [14,5,4,3,2])==0 then ranks = [5,4,3,2,1]\n		straight = if ranks[0] - ranks[4] == 4 then 1 else 0\n		flush = if _.size(_.uniq(suit.substring(0,2) for suit in hand)) == 1 then 1 else 0 \n		score = [[[1], [3,1,1,1]], [[3,1,1,2], [5]]][flush][straight]\n	[score, ranks] ",
      c: {
        '[1,2,3] == [1,2,3]': false,
        '2 < 11': true,
        '"2" < "11"': false,
        '[2] < [11]': false,
        '["2"] < ["11"]': false,
        'compare [2], [11]': 1,
        'compare [1,2,3], [1,2,3]': 0,
        'compare [11], [2]': -1,
        'bsort [47,12,25]': [12, 25, 47],
        'bsort [[11,13],[11,12],[2,2]]': [[2, 2], [11, 12], [11, 13]],
        'bsort [[11,13],[11,12],[2,2]], (a,b) -> compare b,a': [[11, 13], [11, 12], [2, 2]],
        'bsort ["per", "anna", "bo"]': ["anna", "bo", "per"],
        '_.groupBy ["per", "anna", "karl"], "length"': {
          "3": ["per"],
          "4": ["anna", "karl"]
        },
        '_.unzip [["moe", 30, true], ["larry", 40, false]]': [['moe', 'larry'], [30, 40], [true, false]],
        '_.uniq [5,4,1,2,1,9]': [5, 4, 1, 2, 9],
        "poker 'kl8 ruA ru8 klA kl9', 'ru7 sp2 ru5 sp3 klA'": -1,
        "poker 'kl8 spT klK hj9 sp4', 'ru7 sp2 ru5 sp3 klA'": 1,
        "poker 'kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA klT'": 1,
        "poker 'kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA kl7'": -1,
        "poker 'kl8 ruA ru8 klA kl9', 'klT ruA ruT klA kl9'": 1,
        "poker 'spA sp2 sp3 sp4 sp5', 'ruA ru2 ru3 ru4 ru5'": 0,
        "poker 'spA hjA ruA klA sp5', 'ruA ru2 ru3 ru4 ru5'": 1,
        "poker 'ru7 sp7 hj7 kl7 spJ', 'ru6 sp5 hj6 kl6 spQ'": -1,
        "poker 'ru8 sp8 hj8 kl9 sp9', 'ru6 sp6 hj6 ru9 hj9'": -1,
        "poker 'ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'": 0,
        "poker 'ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'": 0,
        "poker 'ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'": 0,
        "poker 'ru7 hj8 ru9 hj5 ru6', 'hj7 ru8 kl9 hjT sp6'": 1,
        "poker 'ru7 hj8 ru8 kl8 ruJ', 'kl7 hj9 ru9 kl9 ruQ'": 1,
        "poker 'ru7 hj7 ru8 kl8 ruJ', 'sp7 kl7 sp8 hj8 ruT'": -1,
        "poker 'hj7 kl3 sp3 kl4 hjA', 'sp7 hj3 ru3 klK spA'": 1,
        "poker 'sp7 hj3 ru2 kl4 spA', 'hj7 ru3 ru5 sp4 hjA'": 1
      }
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxJQUFBOztBQUFBLElBQUEsR0FFQztFQUFBLFNBQUEsRUFDQztJQUFBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRSx3TEFBRjtNQVNBLENBQUEsRUFBRSxFQVRGO0tBREQ7R0FERDtFQWFBLG1CQUFBLEVBQ0M7SUFBQSxJQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsazhCQUFIO01Ba0JBLENBQUEsRUFBRyxpQkFsQkg7TUFtQkEsQ0FBQSxFQUNDO1FBQUEsUUFBQSxFQUFXLENBQVg7UUFDQSxRQUFBLEVBQVcsQ0FEWDtRQUVBLFFBQUEsRUFBVyxDQUZYO09BcEJEO0tBREQ7SUF5QkEsS0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLGtQQUFIO01BUUEsQ0FBQSxFQUFHLG9CQVJIO01BU0EsQ0FBQSxFQUNDO1FBQUEsT0FBQSxFQUFVLENBQVY7UUFDQSxTQUFBLEVBQVksQ0FEWjtRQUVBLFNBQUEsRUFBWSxDQUZaO09BVkQ7S0ExQkQ7SUF3Q0EsSUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLG1FQUFIO01BS0EsQ0FBQSxFQUFHLG1CQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsT0FBQSxFQUFVLENBQVY7UUFDQSxPQUFBLEVBQVUsQ0FEVjtRQUVBLE9BQUEsRUFBVSxDQUZWO1FBR0EsT0FBQSxFQUFVLENBSFY7UUFJQSxPQUFBLEVBQVUsQ0FKVjtRQUtBLE9BQUEsRUFBVSxDQUxWO1FBTUEsUUFBQSxFQUFXLEVBTlg7UUFPQSxRQUFBLEVBQVcsRUFQWDtPQVBEO0tBekNEO0lBeURBLEtBQUEsRUFDQztNQUFBLENBQUEsRUFBRyx5Q0FBSDtNQUtBLENBQUEsRUFBRyxvQkFMSDtNQU1BLENBQUEsRUFDQztRQUFBLE9BQUEsRUFBVSxDQUFWO1FBQ0EsT0FBQSxFQUFVLENBRFY7UUFFQSxPQUFBLEVBQVUsQ0FGVjtRQUdBLE9BQUEsRUFB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UUFtQkEsb0RBQUEsRUFBc0QsQ0FuQnREO1FBb0JBLG9EQUFBLEVBQXNELENBcEJ0RDtRQXFCQSxvREFBQSxFQUFzRCxDQXJCdEQ7UUFzQkEsb0RBQUEsRUFBc0QsQ0FBQyxDQXRCdkQ7UUF1QkEsb0RBQUEsRUFBc0QsQ0FBQyxDQXZCdkQ7UUF3QkEsb0RBQUEsRUFBc0QsQ0F4QnREO1FBeUJBLG9EQUFBLEVBQXNELENBekJ0RDtRQTBCQSxvREFBQSxFQUFzRCxDQTFCdEQ7UUEyQkEsb0RBQUEsRUFBc0QsQ0EzQnREO1FBNEJBLG9EQUFBLEVBQXNELENBNUJ0RDtRQTZCQSxvREFBQSxFQUFzRCxDQUFDLENBN0J2RDtRQThCQSxvREFBQSxFQUFzRCxDQTlCdEQ7UUErQkEsb0RBQUEsRUFBc0QsQ0EvQnREO09BdEJEO0tBbE5EO0dBbHBDRCIsInNvdXJjZXNDb250ZW50IjpbIiMgYSA6IGZhY2l0LCBtaWdodCBiZSBhbnkgbGFuZ3VhZ2UuIE5vdCB1c2VkIGJ5IHA1RG9qby5cclxuIyBiIDogY29tbWVudCBsaW5lLiBMT0MgYW5kIGtleXdvcmQgY2x1ZXNcclxuIyBjIDogY2FsbCBpbiBDb2ZmZWVzY3JpcHQgc3ludGF4XHJcblxyXG5kYXRhID0gXHJcblxyXG5cdFwiTnloZXRlclwiIDpcclxuXHRcdFwiTnloZXRlclwiIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBOWUhFVEVSIDIwMTctMDMtMDFcclxuIyAgIEEzOiBMaXN0b3IsIFbDpHhlbGN5a2VsLCBLYWxreWxhdG9yXHJcbiMgICBBNTogUGFsaW5kcm9tLCBSw7Z2YXJzcHLDpWtcclxuIyAgIEE3OiBCaWdudW0sIFNpbXBsZXgsIENvbXBsZXhcclxuIyAgIEE4OiBMaXN0IHJlY3Vyc2lvbiwgUG9rZXJoYW5kXHJcblxyXG4jIEtsaWNrYSBudSBww6UgQTAhXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcclxuXHRcclxuXHRcIkEwOiBPbmUgUGFyYW1ldGVyXCIgOiBcclxuXHRcdFR1cmUgOiAgXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIE1hc2tpbmVuIFR1cmUgw6RyIHRyYXNpZyEgVHVyZSDDpHIgbGVkc2VuLiBEdSBtw6VzdGUgbGFnYSBUdXJlIVxyXG4jIEp1c3QgbnUgc2tpY2thciBUdXJlIGFsbHRpZCB1dCBub2xsb3IuIEjDpHIgw6RyIGZlbGV0IVxyXG4jIFNraWNrYXIgbWFuIGluIGVuIHR2w6VhIHRpbGwgVHVyZSBza2EgZW4gdHbDpWEga29tbWEgdXQuXHJcbiMgTmFtbmV0IHDDpSBkZXQgbWFuIHNraWNrYXIgaW4gdGlsbCBUdXJlIHN0w6VyIG1lbGxhbiBwYXJlbnRlc2VybmEuIE5hbW5ldCDDpHIgeC4gIFxyXG4jIHgga2FuIHZhcmEgb2xpa2Egc2FrZXIuIFRpbGwgZXhlbXBlbCBlbiB0dsOlYSBlbGxlciBlbiB0cmVhLlxyXG4jIEVmdGVyIHBpbGVuIHRhbGFyIG1hbiBvbSB2YWQgc29tIHNrYSBrb21tYSB1dCBmcsOlbiBUdXJlLiBcclxuIyAgIERlbiBndWxhIGtvbHVtbmVuIGlubmVow6VsbGVyIGRldCBzb20gc2tpY2thcyBpbiB0aWxsIFR1cmUuXHJcbiMgICBEZW4gZ3LDtm5hIGtvbHVtbmVuIGlubmVow6VsbGVyIGRldCBzb20gc2thIGtvbW1hIHV0IHVyIFR1cmUuXHJcbiMgICBEZW4gcsO2ZGEga29sdW1uZW4gaW5uZWjDpWxsZXIgZGV0IHNvbSBrb21tZXIgdXQgdXIgVHVyZS4gXHJcbiMgU2UgdGlsbCBhdHQgZ8O2cmEgZGUgUsOWREEgY2VsbGVybmEgR1LDlk5BIVxyXG4jIFRyeWNrIG51IHDDpSBQZ0RuIG9jaCBnw7ZyIFR1cmUgZ2xhZCBpZ2VuIVxyXG4jICAgw4RuZHJhIG5vbGxhbiB0aWxsIGVuIHR2w6VhLiBOdSBza2lja2FzIGJhcmEgdHbDpW9yIHV0LlxyXG4jICAgw4RuZHJhIHR2w6VhbiB0aWxsIGVuIHRyZWEuICBOdSBza2lja2FzIGJhcmEgdHJlb3IgdXQuXHJcbiMgICDDhG5kcmEgdHJlYW4gdGlsbCBldHQgeC4gICAgTnUgYmxpciBhbGxhIGRlIFLDlkRBIGNlbGxlcm5hIEdSw5ZOQSBvY2ggVHVyZSDDpHIgZ2xhZCBpZ2VuIVxyXG4jIEfDpSB0aWxsIG7DpHN0YSB1cHBnaWZ0IGdlbm9tIGF0dCBrbGlja2EgcMOlIFdpbG1hIGkgbGlzdGFuIHRpbGwgdsOkbnN0ZXIuXHJcblR1cmUgPSAoeCkgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJUdXJlID0gKHgpIC0+IHhcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcIlR1cmUgMFwiIDogMFxyXG5cdFx0XHRcdFwiVHVyZSAyXCIgOiAyXHJcblx0XHRcdFx0XCJUdXJlIDNcIiA6IDMgXHJcblxyXG5cdFx0V2lsbWE6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBPbSBtYW4gc2tpY2thciBlbiBzanVhIHRpbGwgV2lsbWEgc2thIGRldCBrb21tYSB0aWxsYmFrcyBlbiDDpXR0YS5cclxuXHRcdFx0IyBPbSBtYW4gc2tpY2thciBlbiDDpXR0YSB0aWxsIFdpbG1hIHNrYSBkZXQga29tbWEgdGlsbGJha3MgZW4gbmlhLlxyXG5cdFx0XHQjIFZhZCBza2EgV2lsbWEgc2tpY2thIHRpbGxiYWtzIG9tIGRldCBrb21tZXIgaW4gZXR0IHggP1xyXG5cdFx0XHQjIFByb3ZhIGF0dCBhbnbDpG5kYSBwbHVzLlxyXG5cdFx0XHRcclxuXHRcdFx0V2lsbWEgPSAoeCkgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJXaWxtYSA9ICh4KSAtPiB4KzFcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcIjMgKyAxXCIgOiA0XHJcblx0XHRcdFx0XCJXaWxtYSA3XCIgOiA4XHJcblx0XHRcdFx0XCJXaWxtYSA4XCIgOiA5IFxyXG5cclxuXHRcdE5vZWw6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBOw6Vnb24gYXYgZGVzc2EgbMO2c2VyIHByb2JsZW1ldDogKyAtICogLyAlXHJcblxyXG5cdFx0XHROb2VsID0gKHgpIC0+IG51bGxcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiTm9lbCA9ICh4KSAtPiAyKnhcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcIjMgKyAyXCIgOiA1XHJcblx0XHRcdFx0XCIzIC0gMlwiIDogMVxyXG5cdFx0XHRcdFwiMyAqIDJcIiA6IDZcclxuXHRcdFx0XHRcIjYgLyAyXCIgOiAzXHJcblx0XHRcdFx0XCI1ICUgMlwiIDogMVxyXG5cdFx0XHRcdFwiNiAlIDJcIiA6IDBcclxuXHRcdFx0XHRcIk5vZWwgNVwiIDogMTBcclxuXHRcdFx0XHRcIk5vZWwgNlwiIDogMTIgXHJcblxyXG5cdFx0R3JldGE6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICVcclxuXHJcblx0XHRcdEdyZXRhID0gKHgpIC0+IHVuZGVmaW5lZFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJHcmV0YSA9ICh4KSAtPiB4KnhcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcIjMgKyAyXCIgOiA1XHJcblx0XHRcdFx0XCIzIC0gMlwiIDogMVxyXG5cdFx0XHRcdFwiMyAqIDJcIiA6IDZcclxuXHRcdFx0XHRcIjYgLyAyXCIgOiAzXHJcblx0XHRcdFx0XCI1ICUgMlwiIDogMVxyXG5cdFx0XHRcdFwiNiAlIDJcIiA6IDBcclxuXHRcdFx0XHRcIkdyZXRhIDFcIiA6IDFcclxuXHRcdFx0XHRcIkdyZXRhIDJcIiA6IDRcclxuXHRcdFx0XHRcIkdyZXRhIDNcIiA6IDlcclxuXHRcdFx0XHRcIkdyZXRhIDRcIiA6IDE2XHJcblx0XHRcdFx0XCJHcmV0YSA1XCIgOiAyNVxyXG5cclxuXHRcdFZpa3RvcjogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0VmlrdG9yID0gKHgpIC0+IFwiTE9MIVwiXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIlZpa3RvciA9ICh4KSAtPiAteFwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdFwiMyArIDJcIiA6IDVcclxuXHRcdFx0XHRcIjMgLSAyXCIgOiAxXHJcblx0XHRcdFx0XCIzICogMlwiIDogNlxyXG5cdFx0XHRcdFwiNiAvIDJcIiA6IDNcclxuXHRcdFx0XHRcIjUgJSAyXCIgOiAxXHJcblx0XHRcdFx0XCI2ICUgMlwiIDogMFxyXG5cdFx0XHRcdFwiVmlrdG9yIC00XCIgOiA0XHJcblx0XHRcdFx0XCJWaWt0b3IgM1wiIDogLTNcclxuXHJcblx0XHRTYWJyaW5hOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRTYWJyaW5hID0gKHgpIC0+IFwiWnp6ei4uLi5cIlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJTYWJyaW5hID0gKHgpIC0+IHgtMlwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdFwiMyArIDJcIiA6IDVcclxuXHRcdFx0XHRcIjMgLSAyXCIgOiAxXHJcblx0XHRcdFx0XCIzICogMlwiIDogNlxyXG5cdFx0XHRcdFwiNiAvIDJcIiA6IDNcclxuXHRcdFx0XHRcIjUgJSAyXCIgOiAxXHJcblx0XHRcdFx0XCI2ICUgMlwiIDogMFxyXG5cdFx0XHRcdFwiU2FicmluYSA3XCIgOiA1XHJcblx0XHRcdFx0XCJTYWJyaW5hIDE3XCIgOiAxNVxyXG5cclxuXHRcdERhdmlkOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHREYXZpZCA9ICh4KSAtPiBcIlRpbGxmw6RsbGlndCBhdmJyb3R0XCJcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiRGF2aWQgPSAoeCkgLT4geC8yXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCIzICsgMlwiIDogNVxyXG5cdFx0XHRcdFwiMyAtIDJcIiA6IDFcclxuXHRcdFx0XHRcIjMgKiAyXCIgOiA2XHJcblx0XHRcdFx0XCI2IC8gMlwiIDogM1xyXG5cdFx0XHRcdFwiNSAlIDJcIiA6IDFcclxuXHRcdFx0XHRcIjYgJSAyXCIgOiAwXHJcblx0XHRcdFx0XCJEYXZpZCA4XCIgOiA0XHJcblx0XHRcdFx0XCJEYXZpZCA2XCIgOiAzXHJcblxyXG5cdFx0R2FicmllbGxhOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRHYWJyaWVsbGEgPSAoeCkgLT4gXCJObyBjb25uZWN0aW9uLlwiXHRcdFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJHYWJyaWVsbGEgPSAoeCkgLT4geCAlIDJcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcIjMgKyAyXCIgOiA1XHJcblx0XHRcdFx0XCIzIC0gMlwiIDogMVxyXG5cdFx0XHRcdFwiMyAqIDJcIiA6IDZcclxuXHRcdFx0XHRcIjYgLyAyXCIgOiAzXHJcblx0XHRcdFx0XCI1ICUgMlwiIDogMVxyXG5cdFx0XHRcdFwiNiAlIDJcIiA6IDBcclxuXHRcdFx0XHRcIkdhYnJpZWxsYSA3XCIgOiAxXHJcblx0XHRcdFx0XCJHYWJyaWVsbGEgOFwiIDogMFxyXG5cdFx0XHRcdFwiR2FicmllbGxhIDEwXCIgOiAwXHJcblx0XHRcdFx0XCJHYWJyaWVsbGEgMTFcIiA6IDFcclxuXHJcblx0XHRCZXBwZTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjID09IDwgPiAhPVxyXG5cclxuXHRcdFx0QmVwcGUgPSAoeCkgLT4gXCJGw7Zyc8O2ayBpZ2VuIHNlbmFyZS5cIlx0XHRcdFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJCZXBwZSA9ICh4KSAtPiB4ID09IDJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiMSA9PSAxXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxID09IDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxICE9IDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxICE9IDJcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPCAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMSA8IDJcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPiAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMSA+IDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxIDw9IDFcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPD0gMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA+PSAxXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxID49IDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJCZXBwZSAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiQmVwcGUgMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiQmVwcGUgM1wiIDogZmFsc2VcclxuXHRcdFx0XHRcIkJlcHBlIDRcIiA6IGZhbHNlXHJcblxyXG5cdFx0S2Fyb2xpbmE6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyA9PSA8ID4gIT1cclxuXHJcblx0XHRcdEthcm9saW5hID0gKHgpIC0+IFwiS29tbWVyIG9tIGVuIG1pbnV0XCJcdFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJLYXJvbGluYSA9ICh4KSAtPiB4ID4gMlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCIxID09IDFcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPT0gMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgIT0gMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgIT0gMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA8IDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxIDwgMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA+IDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxID4gMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgPD0gMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA8PSAyXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxID49IDFcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPj0gMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcIkthcm9saW5hIDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJLYXJvbGluYSAyXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiS2Fyb2xpbmEgM1wiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiS2Fyb2xpbmEgNFwiIDogdHJ1ZVxyXG5cclxuXHRcdEthc3BlcjogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjID09IDwgPiAhPVxyXG5cclxuXHRcdFx0S2FzcGVyID0gKHgpIC0+IFwiR29uZSBmaXNoaW5nXCJcdFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJLYXNwZXIgPSAoeCkgLT4geCA+IDJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiMSA9PSAxXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxID09IDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxICE9IDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxICE9IDJcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPCAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMSA8IDJcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPiAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMSA+IDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxIDw9IDFcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPD0gMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA+PSAxXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxID49IDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJLYXNwZXIgMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIkthc3BlciAyXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiS2FzcGVyIDNcIiA6IHRydWVcclxuXHRcdFx0XHRcIkthc3BlciA0XCIgOiB0cnVlXHJcblxyXG5cdFx0TWlyYW5kYTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjID09IDwgPiAhPVxyXG5cclxuXHRcdFx0TWlyYW5kYSA9ICh4KSAtPiBcIlRyYWxhbGEuLi5cIlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJNaXJhbmRhID0gKHgpIC0+IHggIT0gMlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCIxID09IDFcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPT0gMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgIT0gMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgIT0gMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA8IDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxIDwgMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA+IDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxID4gMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgPD0gMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA8PSAyXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxID49IDFcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPj0gMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcIk1pcmFuZGEgMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiTWlyYW5kYSAyXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiTWlyYW5kYSAzXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJNaXJhbmRhIDRcIiA6IHRydWVcclxuXHJcblx0XCJBMTogVHdvIFBhcmFtZXRlcnNcIiA6IFxyXG5cdFxyXG5cdFx0T3BlcmF0b3IxOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSpiXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJnIDMsNFwiIDogMTJcclxuXHRcdFx0XHRcImcgNCw2XCIgOiAyNFxyXG5cclxuXHRcdE9wZXJhdG9yMjogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0ZyA9IChhLGIpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZyA9IChhLGIpIC0+IGErYlwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdFwiZyAzLDRcIiA6IDdcclxuXHRcdFx0XHRcImcgNCw2XCIgOiAxMFxyXG5cclxuXHRcdE9wZXJhdG9yMzogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0ZyA9IChhLGIpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZyA9IChhLGIpIC0+IGItYVwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdFwiZyAzLDRcIiA6IDFcclxuXHRcdFx0XHRcImcgNCw2XCIgOiAyXHJcblxyXG5cdFx0T3BlcmF0b3I0OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYS9iXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJnIDgsNFwiIDogMlxyXG5cdFx0XHRcdFwiZyAxMiwzXCIgOiA0XHJcblxyXG5cdFx0T3BlcmF0b3I1OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSViXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgOCw0XCIgOiAwXHJcblx0XHRcdFx0XCJnIDksNFwiIDogMVxyXG5cdFx0XHRcdFwiZyAxMCw0XCIgOiAyXHJcblx0XHRcdFx0XCJnIDExLDRcIiA6IDNcclxuXHRcclxuXHRcdE9wZXJhdG9yNjogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJSA9PVxyXG5cclxuXHRcdFx0ZyA9IChhLGIpIC0+IG51bGxcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZyA9IChhLGIpIC0+IGEgPT0gYlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJnIDAsMFwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyAxLDFcIiA6IHRydWVcclxuXHRcdFx0XHRcImcgNyw0XCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiZyA2LDRcIiA6IGZhbHNlXHJcblxyXG5cdFx0T3BlcmF0b3I3OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlID09XHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gbnVsbFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSAtIGIgPT0gMVwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJnIDcsNlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyA1LDRcIiA6IHRydWVcclxuXHRcdFx0XHRcImcgNyw0XCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiZyA2LDRcIiA6IGZhbHNlXHJcblxyXG5cdFx0T3BlcmF0b3I4OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlID09XHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gbnVsbFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSArIGIgPT0gN1wiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJnIDcsMFwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyA1LDJcIiA6IHRydWVcclxuXHRcdFx0XHRcImcgNyw0XCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiZyA2LDRcIiA6IGZhbHNlXHJcblxyXG5cdCdBMjogcmFuZ2UgbGVycCBmb3InIDpcclxuXHJcblx0XHRyYW5nZTpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MyByYW5nZSBbXVxyXG5cclxuZiA9IChuKSAtPiBbXVxyXG5nID0gKGEsYikgLT4gW11cclxuaCA9IChhLGIsbikgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmYgPSAobikgLT4gcmFuZ2UgblxyXG5nID0gKGEsYikgLT4gcmFuZ2UgYSxiXHJcbmcgPSAoYSxiLG4pIC0+IHJhbmdlIGEsYixuXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwicmFuZ2UgM1wiIDogWzAsMSwyXVxyXG5cdFx0XHRcdFwicmFuZ2UgMSw0XCIgOiBbMSwyLDNdXHJcblx0XHRcdFx0XCJyYW5nZSAxLDksMlwiIDogWzEsMyw1LDddXHJcblx0XHRcdFx0XCJmIDVcIiA6IFswLDEsMiwzLDRdXHJcblx0XHRcdFx0XCJmIDZcIiA6IFswLDEsMiwzLDQsNV1cclxuXHRcdFx0XHRcImcgMSw1XCIgOiBbMSwyLDMsNF1cclxuXHRcdFx0XHRcImcgMiw0XCIgOiBbMiwzXVxyXG5cdFx0XHRcdFwiZyAtMiwwXCIgOiBbLTIsLTFdXHJcblx0XHRcdFx0XCJoIDAsMTAsMVwiIDogWzAsMSwyLDMsNCw1LDYsNyw4LDldXHJcblx0XHRcdFx0XCJoIDAsMTAsMlwiIDogWzAsMiw0LDYsOF1cclxuXHRcdFx0XHRcImggMCwtMTAsLTFcIiA6IFswLC0xLC0yLC0zLC00LC01LC02LC03LC04LC05XVxyXG5cclxuXHRcdFwibGVycFwiOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxIGxlcnAgKyAtICogL1xyXG4jIEbDtnJzw7ZrIGzDtnNhIHVwcGdpZnRlbiBiw6VkZSBtZWQgb2NoIHV0YW4gbGVycFxyXG5cclxuZiA9IChhLGIsaSkgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZiA9IChhLGIsaSkgLT4gbGVycCBhLGIsaVxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwwXCIgOiA4XHJcblx0XHRcdFx0XCJsZXJwIDgsMTIsMVwiIDogMTJcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwwLjVcIiA6IDEwXHJcblx0XHRcdFx0XCJsZXJwIDgsMTIsLTFcIiA6IDRcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwyXCIgOiAxNlxyXG5cdFx0XHRcdFwiZiAxMCwyMCwwXCIgOiAxMFxyXG5cdFx0XHRcdFwiZiAxMCwyMCwxXCIgOiAyMFxyXG5cdFx0XHRcdFwiZiAxMCwyMCwyXCIgOiAzMFxyXG5cdFx0XHRcdFwiZiAxMCwyMCwwLjVcIiA6IDE1XHJcblx0XHRcdFx0XCJmIDEwLDIwLC0xXCIgOiAwXHJcblxyXG5cdFx0XCJmb3JcIjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MSBmb3IgaW4gcmFuZ2UgbGVycCBbXVxyXG4jIEbDtnJzw7ZrIGzDtnNhIHVwcGdpZnRlbiBiw6VkZSBtZWQgb2NoIHV0YW4gbGVycFxyXG5cclxuZiA9IChhLGIsbikgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmYgPSAoYSxiLG4pIC0+IGxlcnAgYSxiLGkgZm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIihpKmkgZm9yIGkgaW4gcmFuZ2UgNSlcIiA6IFswLDEsNCw5LDE2XVx0XHRcdFx0XHJcblx0XHRcdFx0XCJmIDAsMCw1XCIgOiBbMCwwLDAsMCwwXVxyXG5cdFx0XHRcdFwiZiAxLDIsNVwiIDogWzEsMiwzLDQsNV1cclxuXHRcdFx0XHRcImYgNSw0LDVcIiA6IFs1LDQsMywyLDFdXHJcblx0XHRcdFx0XCJmIC0xLC0yLDVcIiA6IFstMSwtMiwtMywtNCwtNV1cclxuXHRcdFx0XHRcImYgNSwyNSwxMFwiIDogWzUsMjUsNDUsNjUsODUsMTA1LDEyNSwxNDUsMTY1LDE4NV1cclxuXHRcdFx0XHRcImYgLTAuMSwwLjAsM1wiIDogWy0wLjEsMC4wLDAuMV1cclxuXHJcblx0XCJBMzogWyBdXCIgOlxyXG5cclxuXHRcdEludHJvZHVrdGlvbjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTYgaWYgPCB0aGVuIGVsc2UgW11cclxuIyBTb3J0ZXJhIFVUQU4gYXR0IGFudsOkbmRhIGxvb3BhclxyXG4jIFNvcnRlcmEgVVRBTiBhdHQgYW52w6RuZGEgbsOlZ29uIGbDpHJkaWcgc29ydGVyaW5nc3J1dGluXHJcblxyXG5zb3J0MiA9IChhLGIpIC0+IFthLGJdXHJcbnNvcnQzID0gKGEsYixjKSAtPiBbYSxiLGNdXHJcbnNvcnQ0ID0gKGEsYixjLGQpIC0+IFthLGIsYyxkXVxyXG5zb3J0NSA9IChhLGIsYyxkLGUpIC0+IFthLGIsYyxkLGVdXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuc29ydDIgPSAoYSxiKSAtPiBpZiBhPmIgdGhlbiBbYixhXSBlbHNlIFthLGJdXHJcblxyXG5zb3J0MyA9IChhLGIsYykgLT5cclxuXHRbYSxiXSA9IHNvcnQyIGEsYlxyXG5cdFtiLGNdID0gc29ydDIgYixjXHJcblx0W2EsYl0gPSBzb3J0MiBhLGJcclxuXHRbYSxiLGNdXHJcblxyXG5zb3J0NCA9IChhLGIsYyxkKSAtPlxyXG5cdFthLGIsY10gPSBzb3J0MyBhLGIsY1xyXG5cdFtiLGMsZF0gPSBzb3J0MyBiLGMsZFxyXG5cdFthLGJdID0gc29ydDIgYSxiXHJcblx0W2EsYixjLGRdXHJcblxyXG5zb3J0NSA9IChhLGIsYyxkLGUpIC0+XHJcblx0W2EsYixjLGRdID0gc29ydDQgYSxiLGMsZFxyXG5cdFtiLGMsZCxlXSA9IHNvcnQ0IGIsYyxkLGVcclxuXHRbYSxiXSA9IHNvcnQyIGEsYlxyXG5cdFthLGIsYyxkLGVdXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiaWYgMTEgPCAyIHRoZW4gWzExLDJdIGVsc2UgWzIsMTFdXCIgOiBbMiwxMV1cclxuXHRcdFx0XHRcInNvcnQyIDExLDJcIiA6IFsyLDExXVxyXG5cdFx0XHRcdFwic29ydDIgMiwxMVwiIDogWzIsMTFdXHJcblxyXG5cdFx0XHRcdFwic29ydDMgMTEsNCw1XCIgOiBbNCw1LDExXVxyXG5cdFx0XHRcdFwic29ydDMgMTEsNSw0XCIgOiBbNCw1LDExXVxyXG5cdFx0XHRcdFwic29ydDMgNCwxMSw1XCIgOiBbNCw1LDExXVxyXG5cdFx0XHRcdFwic29ydDMgNCw1LDExXCIgOiBbNCw1LDExXVxyXG5cdFx0XHRcdFwic29ydDMgNSwxMSw0XCIgOiBbNCw1LDExXVxyXG5cdFx0XHRcdFwic29ydDMgNSw0LDExXCIgOiBbNCw1LDExXVxyXG5cclxuXHRcdFx0XHRcInNvcnQ0IDExLDQsNSw2XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCAxMSw0LDYsNVwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgMTEsNSw0LDZcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDExLDUsNiw0XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCAxMSw2LDQsNVwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgMTEsNiw1LDRcIiA6IFs0LDUsNiwxMV1cclxuXHJcblx0XHRcdFx0XCJzb3J0NCA0LDExLDUsNlwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNCwxMSw2LDVcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDQsNSwxMSw2XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA0LDUsNiwxMVwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNCw2LDExLDVcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDQsNiw1LDExXCIgOiBbNCw1LDYsMTFdXHJcblxyXG5cdFx0XHRcdFwic29ydDQgNSwxMSw0LDZcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDUsMTEsNiw0XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA1LDQsMTEsNlwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNSw0LDYsMTFcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDUsNiwxMSw0XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA1LDYsNCwxMVwiIDogWzQsNSw2LDExXVxyXG5cclxuXHRcdFx0XHRcInNvcnQ0IDYsMTEsNCw1XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA2LDExLDUsNFwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNiw0LDExLDVcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDYsNCw1LDExXCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA2LDUsMTEsNFwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNiw1LDQsMTFcIiA6IFs0LDUsNiwxMV1cclxuXHJcblx0XHRcdFx0XCJzb3J0NSA1LDQsMTEsMiwxXCIgOiBbMSwyLDQsNSwxMV1cclxuXHRcdFx0XHRcInNvcnQ1IDExLDUsMiw0LDFcIiA6IFsxLDIsNCw1LDExXVxyXG5cdFx0XHRcdFwic29ydDUgNSwyLDExLDQsMVwiIDogWzEsMiw0LDUsMTFdXHJcblxyXG5cdFx0TGlzdG9yIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTEgbGVuZ3RoIHB1c2ggY29uY2F0IHBvcCBzb3J0IC4uIFtdXHJcblxyXG5hbnRhbCA9IChhKSAtPiAwXHJcbmZldGNoID0gKGEsaSkgLT4gMCBcclxua29ua2F0ZW5lcmEgPSAoYSxiKSAtPiBbXSBcclxuc29ydGVyYSA9IChhKSAtPiBbXVxyXG5mw7Zyc3RhID0gKGEsbikgLT4gW11cclxubWl0dGkgPSAoYSxpLGopIC0+IFtdXHJcbnNpc3RhID0gKGEsbikgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmFudGFsID0gKGEpIC0+IGEubGVuZ3RoXHJcbmZldGNoID0gKGEsaSkgLT4gYVtpXVxyXG5rb25rYXRlbmVyYSA9IChhLGIpIC0+IGEuY29uY2F0IGJcclxuc29ydGVyYSA9IChhKSAtPiBhLnNvcnQoKVxyXG5mw7Zyc3RhID0gKGEsbikgLT4gYVsuLm4tMV1cclxubWl0dGkgPSAoYSxpLGopIC0+IGFbaS4ual1cclxuc2lzdGEgPSAoYSxuKSAtPiBhWy1uLi5dXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiWzEsMl0uY29uY2F0IFszLDRdXCIgOiBbMSwyLDMsNF1cclxuXHRcdFx0XHRcIlsyLDMsNCw1XS5sZW5ndGhcIiA6IDRcclxuXHRcdFx0XHRcIlsxMSwyMiwzMyw0NF1bMl1cIiA6IDMzXHJcblx0XHRcdFx0XCJbMTEsMjIsMzMsNDRdWy4uMl1cIiA6IFsxMSwyMiwzM11cclxuXHRcdFx0XHRcIlsxMSwyMiwzMyw0NF1bMS4uXVwiIDogWzIyLDMzLDQ0XVxyXG5cdFx0XHRcdFwiWzExLDIyLDMzLDQ0XVsxLi4yXVwiIDogWzIyLDMzXVxyXG5cdFx0XHRcdFwiWzQsMiwzLDFdLnNvcnQoKVwiIDogWzEsMiwzLDRdXHJcblx0XHRcdFx0XCJbNCwyLDMsMV0uc29ydCgpLnJldmVyc2UoKVwiIDogWzQsMywyLDFdXHJcblx0XHRcdFx0XCJhbnRhbCBbMSwyLDNdXCIgOiAzXHJcblx0XHRcdFx0XCJhbnRhbCBbNSw0LDEsMiw5LDMsN11cIiA6IDdcclxuXHRcdFx0XHRcImZldGNoIFs0LDUsNl0sMFwiIDogNFxyXG5cdFx0XHRcdFwiZmV0Y2ggWzQsNSw2XSwyXCIgOiA2XHJcblx0XHRcdFx0XCJrb25rYXRlbmVyYSBbMSwyLDNdLFs0LDUsNl1cIiA6IFsxLDIsMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnRlcmEgWzUsNCwxLDIsOSwzLDddXCIgOiBbMSwyLDMsNCw1LDcsOV1cclxuXHRcdFx0XHRcImbDtnJzdGEgWzExLDEyLDEzLDE0LDE1XSwzXCIgOiBbMTEsMTIsMTNdXHJcblx0XHRcdFx0XCJtaXR0aSBbMTEsMTIsMTMsMTQsMTVdLDEsMlwiIDogWzEyLDEzXVxyXG5cdFx0XHRcdFwic2lzdGEgWzExLDEyLDEzLDE0LDE1XSw0XCIgOiBbMTIsMTMsMTQsMTVdXHJcblxyXG5cdFx0VsOkeGVsY3lrZWwgOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6NCBbXSBmb3IgaW4gcHVzaCBzb3J0IC0gL1xyXG4jIERpbiB2w6R4ZWxjeWtlbCBoYXIgc3RvcmEgb2NoIHNtw6Uga3VnZ2hqdWwuIEkgdmlsa2VuIGkgb3JkbmluZyBsaWdnZXIgdsOkeGxhcm5hPyBcclxuXHJcbmdlYXIgPSAoYmlnLCBzbWFsbCkgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5nZWFyID0gKGJpZywgc21hbGwpIC0+XHJcblx0cmVzID0gW11cclxuXHRyZXMucHVzaCBbTWF0aC5yb3VuZChiL3MgKiAxMDApLzEwMCxiLHNdIGZvciBzIGluIHNtYWxsIGZvciBiIGluIGJpZ1xyXG5cdHJlcy5zb3J0KCkgXHJcblwiXCJcIlx0XHJcblx0XHRcdGM6XHRcclxuXHRcdFx0XHRcIk1hdGgucm91bmQgMy4xNDE1XCIgOiAzXHJcblx0XHRcdFx0XCJNYXRoLnJvdW5kKDMuMTQxNSAqIDEwKS8xMFwiIDogMy4xXHJcblx0XHRcdFx0XCJnZWFyIFs0Myw1M10sIFsxMywyMV1cIiA6IFtbMi4wNSw0MywyMV0sWzIuNTIsNTMsMjFdLFszLjMxLDQzLDEzXSxbNC4wOCw1MywxM11dXHJcblx0XHRcdFx0XCJnZWFyIFs0Myw1M10sIFsxMywxNSwxNywxOSwyMV1cIiA6IFtbMi4wNSw0MywyMV0sWzIuMjYsNDMsMTldLFsyLjUyLDUzLDIxXSxbMi41Myw0MywxN10sWzIuNzksNTMsMTldLFsyLjg3LDQzLDE1XSxbMy4xMiw1MywxN10sWzMuMzEsNDMsMTNdLFszLjUzLDUzLDE1XSxbNC4wOCw1MywxM11dXHJcblxyXG5cdFx0S2Fsa3lsYXRvciA6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzo3IFtdIGZvciBpbiBzcGxpdCA9PSBwdXNoIHBvcCBpZiBlbHNlIHBhcnNlSW50XHJcblxyXG5jYWxjID0gKGNvbW1hbmQpIC0+IDBcclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jYWxjID0gKGNvbW1hbmQpIC0+XHJcblx0c3RhY2sgPSBbXVxyXG5cdGZvciBjbWQgaW4gY29tbWFuZC5zcGxpdCAnICdcclxuXHRcdGlmIGNtZCA9PSAnKycgdGhlbiBzdGFjay5wdXNoIHN0YWNrLnBvcCgpICsgc3RhY2sucG9wKClcclxuXHRcdGVsc2UgaWYgY21kID09ICcqJyB0aGVuIHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKiBzdGFjay5wb3AoKVxyXG5cdFx0ZWxzZSBzdGFjay5wdXNoIHBhcnNlSW50IGNtZFxyXG5cdHN0YWNrLnBvcCgpXHRcdFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIidhIGIgYycuc3BsaXQgJyAnXCIgOiBbJ2EnLCdiJywnYyddXHJcblx0XHRcdFx0JzEgKyAyJyA6IDNcclxuXHRcdFx0XHRcIicxJyArICcyJ1wiIDogJzEyJ1xyXG5cdFx0XHRcdFwiMSArICcyJ1wiIDogJzEyJ1xyXG5cdFx0XHRcdFwiJzEnICsgMlwiIDogJzEyJ1xyXG5cdFx0XHRcdFwicGFyc2VJbnQgJzMnXCIgOiAzXHJcblx0XHRcdFx0XCJwYXJzZUZsb2F0ICczLjE0J1wiIDogMy4xNFxyXG5cdFx0XHRcdFwiY2FsYyAnMidcIiA6IDJcclxuXHRcdFx0XHRcImNhbGMgJzIgMydcIiA6IDNcclxuXHRcdFx0XHRcImNhbGMgJzIgMyArJ1wiIDogNVxyXG5cdFx0XHRcdFwiY2FsYyAnMiAzIConXCIgOiA2XHJcblx0XHRcdFx0XCJjYWxjICcyIDMgNCAqICsnXCIgOiAxNFxyXG5cclxuXHRcIkE0OiB7IH1cIiA6XHJcblx0XHRcIkJveXMgYW5kIEdpcmxzXCIgOlxyXG5cdFx0XHRiIDogXCJcIlwiXHJcbiMgTE9DOjcge30gW10gZm9yIGluIGxlbmd0aCArIC9cclxuXHJcbmdpcmxzID0gW3tuYW1lOiAnU2FicmluYScsIGFnZTogMTJ9LCB7bmFtZTogJ0hlbGVuZScsIGFnZTogMTB9LCB7bmFtZTogJ0FubmEnLCBhZ2U6IDExfV1cclxuYm95cyA9IFt7bmFtZTogJ0RhdmlkJywgYWdlOiAxMH0sIHtuYW1lOiAnSGVucnknLCBhZ2U6IDExfSwge25hbWU6ICdOb2VsJywgYWdlOiAxNH0sIHtuYW1lOiAnTnVtYScsIGFnZTogM31dXHJcblxyXG5uYW1lcyA9IChraWRzKSAtPiBraWQubmFtZSBmb3Iga2lkIGluIGtpZHNcclxuYWdlcyA9IChraWRzKSAtPiBbXVxyXG5zdW0gPSAobnVtYmVycykgLT4gMFxyXG5hbnRhbCA9IChudW1iZXJzKSAtPiAwXHJcbmF2ZyA9IChudW1iZXJzKSAtPiAwXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5naXJscyA9IFt7bmFtZTogJ1NhYnJpbmEnLCBhZ2U6IDEyfSwge25hbWU6ICdIZWxlbmUnLCBhZ2U6IDEwfSwge25hbWU6ICdBbm5hJywgYWdlOiAxMX1dXHJcbmJveXMgPSBbe25hbWU6ICdEYXZpZCcsIGFnZTogMTB9LCB7bmFtZTogJ0hlbnJ5JywgYWdlOiAxMX0sIHtuYW1lOiAnTm9lbCcsIGFnZTogMTR9LCB7bmFtZTogJ051bWEnLCBhZ2U6IDN9XVxyXG5cclxubmFtZXMgPSAoa2lkcykgLT4ga2lkLm5hbWUgZm9yIGtpZCBpbiBraWRzXHJcblxyXG5hZ2VzID0gKGtpZHMpIC0+IGtpZC5hZ2UgZm9yIGtpZCBpbiBraWRzXHJcblxyXG5zdW0gPSAobnVtYmVycykgLT5cclxuXHRyZXMgPSAwXHJcblx0cmVzICs9IG4gZm9yIG4gaW4gbnVtYmVyc1xyXG5cdHJlc1xyXG5cclxuYW50YWwgPSAobnVtYmVycykgLT4gbnVtYmVycy5sZW5ndGggXHJcblx0XHJcbmF2ZyA9IChudW1iZXJzKSAtPiBzdW0obnVtYmVycykgLyBhbnRhbChudW1iZXJzKVxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIm5hbWVzIGdpcmxzXCIgOiBbJ1NhYnJpbmEnLCAnSGVsZW5lJywgJ0FubmEnXVxyXG5cdFx0XHRcdFwibmFtZXMgYm95c1wiIDogWydEYXZpZCcsICdIZW5yeScsICdOb2VsJywnTnVtYSddIFxyXG5cdFx0XHRcdFwiYWdlcyBnaXJsc1wiIDogWzEyLDEwLDExXVxyXG5cdFx0XHRcdFwiYWdlcyBib3lzXCIgOiBbMTAsMTEsMTQsM11cclxuXHRcdFx0XHRcInN1bSBhZ2VzIGdpcmxzXCIgOiAzM1xyXG5cdFx0XHRcdFwic3VtIGFnZXMgYm95c1wiIDogMzhcclxuXHRcdFx0XHRcImFudGFsIGdpcmxzXCIgOiAzXHJcblx0XHRcdFx0XCJhbnRhbCBib3lzXCIgOiA0XHJcblx0XHRcdFx0XCJhdmcgYWdlcyBnaXJsc1wiIDogMTFcclxuXHRcdFx0XHRcImF2ZyBhZ2VzIGJveXNcIiA6IDkuNVxyXG5cclxuXHQnQTU6IFwiIFwiJyA6XHJcblxyXG5cdFx0SW50cm9kdWt0aW9uOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzo4IGxlbmd0aCBbXSAuLiArIFwiXCIgaW5kZXhPZiBzcGxpdCBqb2luIGZvciBpblxyXG4jIExPQyBiZXR5ZGVyIExpbmVzIE9mIENvZGUsIGR2cyBhbnRhbCBrb2RyYWRlci5cclxuIyDDhXR0YSBrb2RyYWRlciDDpHIgbGFnb20gZsO2ciBkZXR0YSBwcm9ibGVtLlxyXG4jIEbDpHJyZSBpbm5lYsOkciBzw6RtcmUgbMOkc2JhcmhldC5cclxuIyBIYXIgZHUgZmxlciBiw7ZyIGR1IGZ1bmRlcmEgcMOlIGVuIGtvcnRhcmUgbMO2c25pbmcuXHJcblxyXG5hbnRhbCA9IChzKSAtPiAwXHJcbnRlY2tlbiA9IChzLGkpIC0+IFwiXCJcclxubWl0dGkgPSAocyxpLGopIC0+IFwiXCJcclxua29ua2F0ZW5lcmEgPSAocyx0KSAtPiBcIlwiXHJcbmxldGEgPSAocyx0KSAtPiAwXHJcbnNwbGl0dHJhID0gKHMsYXZncikgLT4gW10gXHJcbmhvcHNsYWduaW5nID0gKGEsYXZncj0nJykgLT4gXCJcIiBcclxuZHViYmxhID0gKHMpIC0+IFwiXCJcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmFudGFsID0gKHMpIC0+IHMubGVuZ3RoXHJcbnRlY2tlbiA9IChzLGkpIC0+IHNbaV1cclxubWl0dGkgPSAocyxpLGopIC0+IHNbaS4ual1cclxua29ua2F0ZW5lcmEgPSAocyx0KSAtPiBzICsgdFxyXG5sZXRhID0gKHMsdCkgLT4gcy5pbmRleE9mIHRcclxuc3BsaXR0cmEgPSAocyxhdmdyKSAtPiBzLnNwbGl0IGF2Z3JcclxuaG9wc2xhZ25pbmcgPSAoYSxhdmdyPScnKSAtPiBhLmpvaW4oYXZncilcclxuZHViYmxhID0gKHMpIC0+IGhvcHNsYWduaW5nICh0ZWNrZW4gKyB0ZWNrZW4gZm9yIHRlY2tlbiBpbiBzKVxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHQnXCJKYXZhc2NyaXB0XCIubGVuZ3RoJyA6IDEwXHJcblx0XHRcdFx0J1wiSmF2YXNjcmlwdFwiLmluZGV4T2YgXCJhXCInIDogMVxyXG5cdFx0XHRcdCdcIjEsMiwzXCIuc3BsaXQgXCIsXCInIDogW1wiMVwiLFwiMlwiLFwiM1wiXVxyXG5cdFx0XHRcdCdbXCIxXCIsXCIyXCIsXCIzXCJdLmpvaW4gXCIgXCInIDogXCIxIDIgM1wiXHJcblx0XHRcdFx0J2FudGFsIFwiQ29mZmVlXCInIDogNlxyXG5cdFx0XHRcdCd0ZWNrZW4gXCJDb2ZmZWVcIiwxJyA6ICdvJ1xyXG5cdFx0XHRcdCdtaXR0aSBcIkNvZmZlZVwiLDEsMycgOiAnb2ZmJ1xyXG5cdFx0XHRcdCdtaXR0aSBcIkNvZmZlZVwiLDMsNScgOiAnZmVlJ1xyXG5cdFx0XHRcdCdrb25rYXRlbmVyYSBcIkNvZmZlZVwiLFwic2NyaXB0XCInIDogJ0NvZmZlZXNjcmlwdCcgXHJcblx0XHRcdFx0J2xldGEgXCJDb2ZmZWVcIixcImVcIicgOiA0XHJcblx0XHRcdFx0J2xldGEgXCJDb2ZmZWVcIixcInhcIicgOiAtMVxyXG5cdFx0XHRcdFwic3BsaXR0cmEgJzIgMyArJywnICdcIiA6IFsnMicsICczJywgJysnXSBcclxuXHRcdFx0XHRcImhvcHNsYWduaW5nIFsnMicsICczJywgJysnXSwgJ3wnXCIgOiBcIjJ8M3wrXCJcclxuXHRcdFx0XHQnZHViYmxhIFwic2NyaXB0XCInIDogJ3NzY2NycmlpcHB0dCdcclxuXHJcblx0XHRQYWxpbmRyb20gOlxyXG5cdFx0XHRiIDogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgam9pbiByZXZlcnNlIHNwbGl0IFwiXCJcclxuXHRcdFx0IyBFdHQgcGFsaW5kcm9tIGJsaXIgc2FtbWEgb3JkIG9tIG1hbiB2w6RuZGVyIHDDpSBkZXQuXHJcblx0XHRcdCMgT3JkZXQgcGFsaW5kcm9tIMOkciBpbnRlIGV0dCBwYWxpbmRyb20uXHJcblxyXG5cdFx0XHRwYWxpbmRyb20gPSAod29yZCkgLT4gbnVsbFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnBhbGluZHJvbSA9ICh3b3JkKSAtPiB3b3JkLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpID09IHdvcmRcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJwYWxpbmRyb20gJ2JhZHJ1bSdcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJwYWxpbmRyb20gJ2vDtmsnXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJwYWxpbmRyb20gJ2thamFrJ1wiIDogdHJ1ZVxyXG5cdFx0XHRcdFwicGFsaW5kcm9tICdrYW5vdCdcIiA6IGZhbHNlXHJcblxyXG5cdFx0UsO2dmFyc3Byw6VrIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgZm9yIGluIGlmIHRoZW4gZWxzZSArIGpvaW4gJycgKClcclxuXHJcblx0XHRcdHJzID0gKHdvcmQsZXh0cmE9J28nKSAtPiBcIlwiXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxucnMgPSAod29yZCxleHRyYT0nbycpIC0+ICgoaWYgbGV0dGVyIGluICdhZWlvdXkgw6XDpMO2JyB0aGVuIGxldHRlciBlbHNlIGxldHRlciArIGV4dHJhICsgbGV0dGVyKSBmb3IgbGV0dGVyIGluIHdvcmQpLmpvaW4oXCJcIilcclxuXCJcIlwiXHJcblx0XHRcdGM6XHRcclxuXHRcdFx0XHRcInJzICdrYWxhcyBmaW50J1wiIDogJ2tva2Fsb2xhc29zIGZvZmlub250b3QnXHJcblx0XHRcdFx0XCJycyAnYm9rc3RhdidcIiA6ICdib2Jva29rc29zdG90YXZvdidcclxuXHRcdFx0XHRcInJzICdrYWxhcyBmaW50JywnaSdcIiA6ICdraWthbGlsYXNpcyBmaWZpbmludGl0J1xyXG5cdFx0XHRcdFwicnMgJ2Jva3N0YXYnLCdlJ1wiIDogJ2JlYm9rZWtzZXN0ZXRhdmV2J1xyXG5cdFx0XHRcdFwicnMgJ2thbGFzIGZpbnQnLCdhJ1wiIDogJ2tha2FsYWxhc2FzIGZhZmluYW50YXQnXHJcblxyXG5cclxuXHRcIkE2OiBJbnRlcnBvbGF0aW9uXCIgOiBcclxuXHJcblx0XHRsaW5lYXJlcXVhdGlvbjE6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSAqXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiAyICogeFwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcImYgMlwiIDogNFxyXG5cdFx0XHRcdFwiZiAzXCIgOiA2XHJcblxyXG5cdFx0bGluZWFyZXF1YXRpb24yOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgKiArXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiAzICsgMiAqIHhcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcImYgMlwiIDogN1xyXG5cdFx0XHRcdFwiZiAzXCIgOiA5XHJcblxyXG5cdFx0bGVycDogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxICogKyAtXHJcblxyXG5cdFx0XHRsZXJwID0gKHkxLHkyLHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwibGVycCA9ICh5MSx5Mix4KSAtPiB5MSArICh5Mi15MSkgKiB4XCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwibGVycCAxMCwxNiwtMVwiIDogNFxyXG5cdFx0XHRcdFwibGVycCAxMCwxNiwwXCIgOiAxMFxyXG5cdFx0XHRcdFwibGVycCAxMCwxNiwwLjVcIiA6IDEzXHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LDFcIiA6IDE2XHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LDJcIiA6IDIyXHJcblx0XHRcclxuXHRcdG1hcDogIFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSAqICsgLSAvXHJcblxyXG5cdFx0XHRtYXAgPSAoeCx4MSx4Mix5MSx5MikgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJtYXAgPSAoeCx4MSx4Mix5MSx5MikgLT4geTEgKyAoeTIteTEpICogKHgteDEpLyh4Mi14MSlcIlxyXG5cdFx0XHRjOiAgXHJcblx0XHRcdFx0XCJtYXAgMCwxLDMsMjAsNDBcIiA6IDEwXHJcblx0XHRcdFx0XCJtYXAgMSwxLDMsMjAsNDBcIiA6IDIwXHJcblx0XHRcdFx0XCJtYXAgMiwxLDMsMjAsNDBcIiA6IDMwXHJcblx0XHRcdFx0XCJtYXAgMywxLDMsMjAsNDBcIiA6IDQwXHJcblx0XHRcdFx0XCJtYXAgNzUsNTAsMTAwLDAsMVwiIDogMC41XHJcblx0XHRcdFx0XCJtYXAgMTYsMCw0MCwwLDIwMFwiIDogODBcclxuXHJcblx0XHRIb3VyMkRlZ3JlZTogIFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSBtYXAgKyAtICogLyAlXHJcblxyXG5cdFx0XHRoMmQgPSAoeCkgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJoMmQgPSAoeCkgLT4gbWFwKDE1LXgsMCwxMiwwLDM2MCkgJSAzNjBcIlxyXG5cdFx0XHRjOiAgXHJcblx0XHRcdFx0XCJoMmQgMFwiIDogOTBcclxuXHRcdFx0XHRcImgyZCAxXCIgOiA2MFxyXG5cdFx0XHRcdFwiaDJkIDJcIiA6IDMwXHJcblx0XHRcdFx0XCJoMmQgM1wiIDogMFxyXG5cdFx0XHRcdFwiaDJkIDRcIiA6IDMzMFxyXG5cdFx0XHRcdFwiaDJkIDVcIiA6IDMwMFxyXG5cdFx0XHRcdFwiaDJkIDZcIiA6IDI3MFxyXG5cdFx0XHRcdFwiaDJkIDdcIiA6IDI0MFxyXG5cdFx0XHRcdFwiaDJkIDhcIiA6IDIxMFxyXG5cdFx0XHRcdFwiaDJkIDlcIiA6IDE4MFxyXG5cdFx0XHRcdFwiaDJkIDEwXCIgOiAxNTBcclxuXHRcdFx0XHRcImgyZCAxMVwiIDogMTIwXHJcblx0XHRcdFx0XCJoMmQgMTJcIiA6IDkwXHJcblxyXG5cdFx0SG91cjJSYWRpYW46ICBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgbWFwICsgLSAqIC8gJSBNYXRoLlBJXHJcblxyXG5cdFx0XHRoMnIgPSAoeCkgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJoMnIgPSAoeCkgLT4gKG1hcCAxNS14LDAsMTIsMCwyKk1hdGguUEkpICUgKDIqTWF0aC5QSSlcIlxyXG5cdFx0XHRjOiAgXHJcblx0XHRcdFx0XCJoMnIgMFwiIDogMypNYXRoLlBJLzZcclxuXHRcdFx0XHQjXCJoMnIgMVwiIDogMipNYXRoLlBJLzYgIGRlY2ltYWwgcHJvYmxlbVxyXG5cdFx0XHRcdCNcImgyciAyXCIgOiAxKk1hdGguUEkvNiAgZGVjaW1hbCBwcm9ibGVtXHJcblx0XHRcdFx0XCJoMnIgM1wiIDogMCpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciA0XCIgOiAxMSpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciA1XCIgOiAxMCpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciA2XCIgOiA5Kk1hdGguUEkvNlxyXG5cdFx0XHRcdFwiaDJyIDdcIiA6IDgqTWF0aC5QSS82XHJcblx0XHRcdFx0I1wiaDJyIDhcIiA6IDcqTWF0aC5QSS82ICBkZWNpbWFsIHByb2JsZW1cclxuXHRcdFx0XHRcImgyciA5XCIgOiA2Kk1hdGguUEkvNlxyXG5cdFx0XHRcdFwiaDJyIDEwXCIgOiA1Kk1hdGguUEkvNlxyXG5cdFx0XHRcdFwiaDJyIDExXCIgOiA0Kk1hdGguUEkvNlxyXG5cdFx0XHRcdFwiaDJyIDEyXCIgOiAzKk1hdGguUEkvNlxyXG5cclxuXHRcIkE3OiBjbGFzc1wiIDpcclxuXHJcblx0XHRLaWQgOlxyXG5cdFx0XHRiIDogXCJcIlwiXHJcbiMgTE9DOjggY2xhc3MgY29uc3RydWN0b3IgbmV3IEAgW10gZm9yIGluIGxlbmd0aCArIC9cclxuIyBJbm5hbiBkdSBsw7ZzZXIgZGVubmEgdXBwZ2lmdDogQmUgYXR0IGbDpSBzZSBCb3VuY2luZyBCYWxscyFcclxuXHJcbmNsYXNzIEtpZFxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUsYWdlKSAtPlxyXG5cclxuZ2lybHMgPSBbbmV3IEtpZCgnU2FicmluYScsMTIpLCBuZXcgS2lkKCdIZWxlbmUnLDEwKSwgbmV3IEtpZCgnQW5uYScsMTEpXVxyXG5ib3lzID0gW25ldyBLaWQoJ0RhdmlkJywxMCksIG5ldyBLaWQoJ0hlbnJ5JywxMSksIG5ldyBLaWQoJ05vZWwnLDE0KSwgbmV3IEtpZCgnTnVtYScsMyldXHJcblxyXG5uYW1lcyA9IChraWRzKSAtPiBbXVxyXG5hZ2VzID0gKGtpZHMpIC0+IFtdXHJcbnN1bSA9IChudW1iZXJzKSAtPiAwXHJcbmFudGFsID0gKG51bWJlcnMpIC0+IDBcclxuYXZlcmFnZSA9IChudW1iZXJzKSAtPiAwXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcblxyXG5jbGFzcyBLaWRcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSxAYWdlKSAtPlxyXG5cdFxyXG5naXJscyA9IFtuZXcgS2lkKCdTYWJyaW5hJywxMiksIG5ldyBLaWQoJ0hlbGVuZScsMTApLCBuZXcgS2lkKCdBbm5hJywxMSldXHJcbmJveXMgPSBbbmV3IEtpZCgnRGF2aWQnLDEwKSwgbmV3IEtpZCgnSGVucnknLDExKSwgbmV3IEtpZCgnTm9lbCcsMTQpLCBuZXcgS2lkKCdOdW1hJywzKV1cclxuXHJcbm5hbWVzID0gKGtpZHMpIC0+IGtpZC5uYW1lIGZvciBraWQgaW4ga2lkc1xyXG5cdFxyXG5hZ2VzID0gKGtpZHMpIC0+IGtpZC5hZ2UgZm9yIGtpZCBpbiBraWRzXHJcblxyXG5zdW0gPSAobnVtYmVycykgLT5cclxuXHRyZXMgPSAwXHJcblx0cmVzICs9IG4gZm9yIG4gaW4gbnVtYmVyc1xyXG5cdHJlc1xyXG5cclxuYW50YWwgPSAobnVtYmVycykgLT4gbnVtYmVycy5sZW5ndGggXHJcblx0XHJcbmF2ZXJhZ2UgPSAobnVtYmVycykgLT4gc3VtKG51bWJlcnMpIC8gYW50YWwobnVtYmVycylcclxuXCJcIlwiXHJcblxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwibmFtZXMgZ2lybHNcIiA6IFsnU2FicmluYScsICdIZWxlbmUnLCAnQW5uYSddXHJcblx0XHRcdFx0XCJuYW1lcyBib3lzXCIgOiBbJ0RhdmlkJywgJ0hlbnJ5JywgJ05vZWwnLCdOdW1hJ10gXHJcblx0XHRcdFx0XCJhZ2VzIGdpcmxzXCIgOiBbMTIsMTAsMTFdXHJcblx0XHRcdFx0XCJhZ2VzIGJveXNcIiA6IFsxMCwxMSwxNCwzXVxyXG5cdFx0XHRcdFwic3VtIGFnZXMgZ2lybHNcIiA6IDMzXHJcblx0XHRcdFx0XCJzdW0gYWdlcyBib3lzXCIgOiAzOFxyXG5cdFx0XHRcdFwiYW50YWwgZ2lybHNcIiA6IDNcclxuXHRcdFx0XHRcImFudGFsIGJveXNcIiA6IDRcclxuXHRcdFx0XHRcImF2ZXJhZ2UgYWdlcyBnaXJsc1wiIDogMTFcclxuXHRcdFx0XHRcImF2ZXJhZ2UgYWdlcyBib3lzXCIgOiA5LjVcclxuXHJcblx0XHRTaW1wbGV4IDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTQgY2xhc3MgY29uc3RydWN0b3IgbmV3IFtdIEBcdCsgLSAqXHJcbiMgVGlwczogU3BlbGEgcDVDb21wbGV4IGlubmFuIGR1IHDDpWLDtnJqYXIgZGVubmEgw7Z2bmluZy5cdFxyXG5cclxuY2xhc3MgU2ltcGxleFxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSkgLT5cclxuXHR0cmFuc2xhdGUgOiAtPiBAXHJcblx0c2NhbGUgOiAtPiBAXHJcblx0cm90YXRlIDogLT4gQFxyXG5cdG1pcnJvciA6IC0+IEBcclxuXHJcbmEgPSBuZXcgU2ltcGxleCAxLDNcclxuYiA9IG5ldyBTaW1wbGV4IC0yLDRcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmNsYXNzIFNpbXBsZXhcclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSkgLT5cclxuXHR0cmFuc2xhdGUgOiAtPiBcclxuXHRcdEB4ICs9IDFcclxuXHRcdEBcclxuXHRzY2FsZSA6IC0+IFxyXG5cdFx0W0B4LEB5XSA9IFsyKkB4LDIqQHldIFxyXG5cdFx0QFxyXG5cdHJvdGF0ZSA6IC0+IFxyXG5cdFx0W0B4LEB5XSA9IFstQHksQHhdXHJcblx0XHRAXHJcblx0bWlycm9yIDogLT5cclxuXHRcdFtAeCxAeV0gPSBbQHksQHhdXHJcblx0XHRAXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwicHAgYVwiIDogXCJ7eDoxLHk6M31cIlxyXG5cdFx0XHRcdFwicHAgYS50cmFuc2xhdGUoKVwiIDogXCJ7eDoyLHk6M31cIlxyXG5cdFx0XHRcdFwicHAgYS5zY2FsZSgpXCIgOiBcInt4OjIseTo2fVwiXHJcblx0XHRcdFx0XCJwcCBhLnJvdGF0ZSgpXCIgOiBcInt4Oi0zLHk6MX1cIlxyXG5cdFx0XHRcdFwicHAgYS5taXJyb3IoKVwiIDogXCJ7eDozLHk6MX1cIlxyXG5cdFx0XHRcdFwicHAgYS50cmFuc2xhdGUoKS5zY2FsZSgpXCIgOiBcInt4OjQseTo2fVwiXHJcblx0XHRcdFx0XCJwcCBhLnNjYWxlKCkudHJhbnNsYXRlKClcIiA6IFwie3g6Myx5OjZ9XCJcclxuXHRcdFx0XHRcInBwIGJcIiA6IFwie3g6LTIseTo0fVwiXHJcblx0XHRcdFx0XCJwcCBiLnRyYW5zbGF0ZSgpXCIgOiBcInt4Oi0xLHk6NH1cIlxyXG5cdFx0XHRcdFwicHAgYi5zY2FsZSgpXCIgOiBcInt4Oi00LHk6OH1cIlxyXG5cdFx0XHRcdFwicHAgYi5yb3RhdGUoKVwiIDogXCJ7eDotNCx5Oi0yfVwiXHJcblx0XHRcdFx0XCJwcCBiLm1pcnJvcigpXCIgOiBcInt4OjQseTotMn1cIlxyXG5cdFx0XHRcdFwicHAgYi50cmFuc2xhdGUoKS5zY2FsZSgpXCIgOiBcInt4Oi0yLHk6OH1cIlxyXG5cdFx0XHRcdFwicHAgYi5zY2FsZSgpLnRyYW5zbGF0ZSgpXCIgOiBcInt4Oi0zLHk6OH1cIlxyXG5cdFx0XHRcdFwicHAgYi5taXJyb3IoKS5taXJyb3IoKVwiIDogXCJ7eDotMix5OjR9XCJcclxuXHRcdFx0XHRcInBwIGIucm90YXRlKCkucm90YXRlKCkucm90YXRlKCkucm90YXRlKClcIiA6IFwie3g6LTIseTo0fVwiXHJcblxyXG5cdFx0QmlnbnVtIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MjIgY2xhc3MgY29uc3RydWN0b3IgbmV3IEAgcGFyc2VJbnQgcmV2ZXJzZSBsZW5ndGggcHVzaCBmbG9vciBzbGljZSB1bnNoaWZ0IGpvaW4gZm9yIGlmXHJcbiMgTWVkIEJpZ251bSBrYW4gbWFuIHLDpGtuYSBleGFrdCBtZWQgdGFsIG1lZCB0dXNlbnRhbHMgc2lmZm9yLlxyXG4jIER1IHByb2dyYW1tZXJhciBww6Ugc2FtbWEgc8OkdHQgc29tIG9tIGR1IHLDpGtuYXIgbWVkIHBhcHBlciBvY2ggcGVubmEuXHJcbiMgTXVsdGlwbGlrYXRpb25lbiBhbnbDpG5kZXIgc2lnIGF2IGFkZGl0aW9uZW4gc2FtdCBpbnNraWZ0YW5kZSBhdiBub2xsIGbDtnIgdmFyamUgc2lmZnJhLlxyXG5cclxuY2xhc3MgQmlnbnVtXHJcblx0Y29uc3RydWN0b3IgOiAocykgLT4gQGxpc3Q9W11cclxuXHR0b19zIDogKCkgLT4gXCJcIlxyXG5cdGFkZCA6IChvdGhlcikgLT4gQFxyXG5cdG11bCA6IChvdGhlcikgLT4gQFxyXG5cclxuYSA9IG5ldyBCaWdudW0gXCIxMjNcIlxyXG5iID0gbmV3IEJpZ251bSBcIjhcIlxyXG5jID0gbmV3IEJpZ251bSBcIjk5OVwiXHJcbmQgPSBuZXcgQmlnbnVtIFwiNDU2XCJcclxuZSA9IG5ldyBCaWdudW0gXCIxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiXHJcbmYgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmcgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmggPSBuZXcgQmlnbnVtIFwiMlwiXHJcblxyXG5nID0gZy5hZGQgZyBmb3IgaSBpbiByYW5nZSAxMDBcclxuaCA9IGgubXVsIGggZm9yIGkgaW4gcmFuZ2UgN1xyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuXHJcbiMgb2JzZXJ2ZXJhIGF0dCByZXZlcnNlKCkgdsOkbmRlciBQw4UgcGxhdHMuXHJcbiMgY2xvbmEgZMOkcmbDtnIgbWVkIHNsaWNlKCkgaSB0IGV4IHRvX3NcclxuI3JldmVyc2VyYSA9IChhcnIpIC0+IGFyci5zbGljZSgpLnJldmVyc2UoKSBcclxuXHJcbmNsYXNzIEJpZ251bVxyXG5cdGNvbnN0cnVjdG9yIDogKHMpIC0+XHJcblx0XHRAbGlzdCA9IChwYXJzZUludChjaCkgZm9yIGNoIGluIHMpXHJcblx0XHRAbGlzdC5yZXZlcnNlKClcclxuXHJcblx0dG9fcyA6ICgpIC0+IEBsaXN0LnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIilcclxuXHJcblx0YWRkIDogKG90aGVyKSAtPlxyXG5cdFx0aWYgQGxpc3QubGVuZ3RoIDwgb3RoZXIubGlzdC5sZW5ndGggdGhlbiByZXR1cm4gb3RoZXIuYWRkIEAgXHJcblx0XHRjYXJyeSA9IDBcclxuXHRcdHJlcyA9IG5ldyBCaWdudW0gXCJcIlxyXG5cdFx0Zm9yIGQxLCBwb3MgaW4gQGxpc3RcclxuXHRcdFx0ZCA9IGQxICsgKG90aGVyLmxpc3RbcG9zXSB8fCAwKSArIGNhcnJ5XHJcblx0XHRcdHJlcy5saXN0LnB1c2ggZCAlIDEwXHJcblx0XHRcdGNhcnJ5ID0gTWF0aC5mbG9vciBkIC8gMTBcclxuXHRcdGlmIGNhcnJ5IHRoZW4gcmVzLmxpc3QucHVzaCAxXHJcblx0XHRyZXNcclxuXHJcblx0bXVsIDogKG90aGVyKSAtPlxyXG5cdFx0cmVzID0gbmV3IEJpZ251bSBcIlwiXHJcblx0XHRmb3IgZGlnaXQsZCBpbiBvdGhlci5saXN0LnNsaWNlKCkucmV2ZXJzZSgpXHJcblx0XHRcdGZvciBpIGluIHJhbmdlIGRpZ2l0XHJcblx0XHRcdFx0cmVzID0gcmVzLmFkZCBAXHJcblx0XHRcdGlmIGQgPCBvdGhlci5saXN0Lmxlbmd0aC0xIHRoZW4gcmVzLmxpc3QudW5zaGlmdCAwXHJcblx0XHRyZXNcclxuXHRcclxuYSA9IG5ldyBCaWdudW0gXCIxMjNcIlxyXG5iID0gbmV3IEJpZ251bSBcIjhcIlxyXG5jID0gbmV3IEJpZ251bSBcIjk5OVwiXHJcbmQgPSBuZXcgQmlnbnVtIFwiNDU2XCJcclxuZSA9IG5ldyBCaWdudW0gXCIxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiXHJcbmYgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmcgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmggPSBuZXcgQmlnbnVtIFwiMlwiXHJcblxyXG5nID0gZy5hZGQgZyBmb3IgaSBpbiByYW5nZSAxMDBcclxuaCA9IGgubXVsIGggZm9yIGkgaW4gcmFuZ2UgN1xyXG5cdFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcInBhcnNlSW50ICcxJ1wiIDogMVxyXG5cdFx0XHRcdFwiWzEsMiwzXS5yZXZlcnNlKClcIiA6IFszLDIsMV1cclxuXHRcdFx0XHRcIlsxLDIsM10ubGVuZ3RoXCIgOiAzXHJcblx0XHRcdFx0XCJNYXRoLmZsb29yIDMuMTRcIiA6IDNcclxuXHRcdFx0XHRcIlsxMSwyMiwzM10uc2xpY2UgMVwiIDogWzIyLDMzXVxyXG5cdFx0XHRcdFwiWzExLDIyLDMzXS5zbGljZSAxLDJcIiA6IFsyMl1cclxuXHRcdFx0XHRcIlsxMSwyMiwzM10uc2xpY2UoKVwiIDogWzExLDIyLDMzXVxyXG5cdFx0XHRcdFwiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAgKyAxXCIgOiAxMjM0NTY3ODkwMTIzNDU2NzAwMFxyXG5cdFx0XHRcdFwiYS5saXN0XCIgOiBbMywyLDFdXHJcblx0XHRcdFx0XCJhLnRvX3MoKVwiIDogXCIxMjNcIlxyXG5cdFx0XHRcdFwiYS5hZGQoYikudG9fcygpXCIgOiBcIjEzMVwiXHJcblx0XHRcdFx0XCJiLmFkZChhKS50b19zKClcIiA6IFwiMTMxXCJcclxuXHRcdFx0XHRcImEuYWRkKGMpLnRvX3MoKVwiIDogXCIxMTIyXCJcclxuXHRcdFx0XHRcImEuYWRkKGIpLmFkZChjKS50b19zKClcIiA6IFwiMTEzMFwiXHJcblx0XHRcdFx0XCJlLmFkZChmKS50b19zKClcIiA6IFwiMTIzNDU2Nzg5MDEyMzQ1Njc4OTFcIiBcclxuXHRcdFx0XHRcImcudG9fcygpXCIgOiBcIjEyNjc2NTA2MDAyMjgyMjk0MDE0OTY3MDMyMDUzNzZcIlxyXG5cdFx0XHRcdFwiYS5tdWwoYikudG9fcygpXCIgOlwiOTg0XCJcclxuXHRcdFx0XHRcImEubXVsKGMpLnRvX3MoKVwiIDogXCIxMjI4NzdcIlxyXG5cdFx0XHRcdFwiYS5tdWwoZCkudG9fcygpXCIgOiBcIjU2MDg4XCJcclxuXHRcdFx0XHRcImgudG9fcygpXCIgOlwiMzQwMjgyMzY2OTIwOTM4NDYzNDYzMzc0NjA3NDMxNzY4MjExNDU2XCJcdFx0XHRcclxuXHJcblx0XHRDb21wbGV4OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjMxIGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBAIC0+IGlmICsgKiA9PSA+IDwgXHJcbiMgQsO2cmphIG1lZCBhdHQgZsOlIGJvcnQgb27DtmRpZ2Egbm9sbG9yIG9jaCBldHRvciBpIHRvX3MhXHJcblxyXG5jbGFzcyBDb21wbGV4XHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHkpIC0+XHJcblx0dG9fcyA6IC0+IEB4ICsgXCIgXCIgKyBAeSArIFwiaVwiXHJcblx0YWRkIDogKG90aGVyKSAtPiBAXHJcblx0bXVsIDogKG90aGVyKSAtPiBAXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuY2xhc3MgQ29tcGxleFxyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5KSAtPlxyXG5cdGFkZCA6IChvdGhlcikgLT5cclxuXHRcdG5ldyBDb21wbGV4IEB4K290aGVyLngsIEB5K290aGVyLnlcclxuXHRtdWwgOiAob3RoZXIpIC0+XHJcblx0XHRhID0gQHhcclxuXHRcdGIgPSBAeVxyXG5cdFx0YyA9IG90aGVyLnhcclxuXHRcdGQgPSBvdGhlci55XHJcblx0XHRuZXcgQ29tcGxleCBhKmMtYipkLCBiKmMrYSpkXHJcblx0dG9fcyA6IC0+XHJcblx0XHRzeCA9IFwiXCIgaWYgQHggPT0gMFxyXG5cdFx0c3ggPSBcIiN7QHh9XCIgaWYgQHggPiAwXHJcblx0XHRzeCA9IFwiI3tAeH1cIiBpZiBAeCA8IDBcclxuXHJcblx0XHRzeSA9IFwiXCIgaWYgQHkgPT0gMFxyXG5cdFx0c3kgPSBcIi1pXCIgaWYgQHkgPT0gLTFcclxuXHRcdHN5ID0gXCJpXCIgaWYgQHkgPT0gMVxyXG5cdFx0c3kgPSBcIiN7QHl9aVwiIGlmIEB5ID4gMVxyXG5cdFx0c3kgPSBcIiN7QHl9aVwiIGlmIEB5IDwgLTFcclxuXHJcblx0XHRpZiBzeCE9XCJcIiBhbmQgc3khPVwiXCJcclxuXHRcdFx0aWYgQHkgPCAwXHJcblx0XHRcdFx0cyA9IHN4K3N5XHJcblx0XHRcdGVsc2UgaWYgQHk9PTBcclxuXHRcdFx0XHRzID0gc3hcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHMgPSBzeCArIFwiK1wiICsgc3lcclxuXHRcdGVsc2UgaWYgQHg9PTAgYW5kIEB5PT0wXHJcblx0XHRcdHMgPSBcIjBcIlxyXG5cdFx0ZWxzZSBcclxuXHRcdFx0cyA9IHN4ICsgc3lcclxuXHRcdHNcclxuXHRcdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KC0xLDApLnRvX3MoKVwiIDpcIi0xXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KC0xLC0xKS50b19zKClcIiA6IFwiLTEtaVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgwLC0xKS50b19zKClcIiA6IFwiLWlcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMCwwKS50b19zKClcIiA6IFwiMFwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgwLDEpLnRvX3MoKVwiIDogXCJpXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDEsLTIpLnRvX3MoKVwiIDogXCIxLTJpXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDEsLTEpLnRvX3MoKVwiIDogXCIxLWlcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMSwwKS50b19zKClcIiA6IFwiMVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDEpLnRvX3MoKVwiIDogXCIxK2lcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMSwyKS50b19zKClcIiA6IFwiMSsyaVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDIpLmFkZChuZXcgQ29tcGxleCgxLC0xKSkudG9fcygpXCIgOiBcIjIraVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDIpLm11bChuZXcgQ29tcGxleCgxLC0xKSkudG9fcygpXCIgOiBcIjMraVwiXHJcblxyXG5cdFx0UG9seW5vbSA6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzo1MiBjbGFzcyBjb25zdHJ1Y3RvciBuZXcgW10gQCBvciBmb3IgaW4gcmFuZ2UgbGVuZ3RoICoqIHB1c2ggcmV2ZXJzZSBqb2luICN7fVxyXG4jIFVwcGdpZnRlbiBpbm5laMOlbGxlciBtYXRlbWF0aWsgcMOlIGd5bW5hc2llbml2w6UuXHJcblxyXG5jbGFzcyBQb2x5bm9tXHJcblx0Y29uc3RydWN0b3IgOiAobHN0KSAtPiBAbHN0PVtdXHJcblx0dG9fcyA6IC0+IFwiXCJcclxuXHRhZGQgOiAob3RoZXIpIC0+IEBcclxuXHRtdWwgOiAob3RoZXIpIC0+IEBcclxuXHRwb3dlciA6IChuKSAtPiBAXHJcblx0dmFsdWUgOiAoeCkgLT4gMFxyXG5cdGRpZmYgOiAtPiBAXHJcblx0aW50ZWcgOiAtPiBAXHJcblx0Y29tcG9zZSA6IChvdGhlcilcdC0+IEBcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuY2xhc3MgUG9seW5vbVxyXG5cdGNvbnN0cnVjdG9yIDogKEBsc3QpIC0+XHJcblxyXG5cdGFkZCA6IChvdGhlcikgLT5cclxuXHRcdGggPSBbXVxyXG5cdFx0aFtpXSA9IChoW2ldIG9yIDApICsgdmFsdWUgZm9yIHZhbHVlLGkgaW4gQGxzdFxyXG5cdFx0aFtpXSA9IChoW2ldIG9yIDApICsgdmFsdWUgZm9yIHZhbHVlLGkgaW4gb3RoZXIubHN0XHJcblx0XHRuZXcgUG9seW5vbSBoXHJcblxyXG5cdG11bCA6IChvdGhlcikgLT5cclxuXHRcdGggPSAoMCBmb3IgaSBpbiByYW5nZSBAbHN0Lmxlbmd0aCArIG90aGVyLmxzdC5sZW5ndGggLSAxKVxyXG5cdFx0Zm9yIHZhbHVlMSxpMSBpbiBAbHN0XHJcblx0XHRcdGZvciB2YWx1ZTIsaTIgaW4gb3RoZXIubHN0XHJcblx0XHRcdFx0aSA9IGkxK2kyXHJcblx0XHRcdFx0aFtpXSA9IChoW2ldIG9yIDApICsgdmFsdWUxICogdmFsdWUyXHJcblx0XHRuZXcgUG9seW5vbSBoXHJcblxyXG5cdHBvd2VyIDogKG4pIC0+XHJcblx0XHRyZXMgPSBuZXcgUG9seW5vbSBbMV1cclxuXHRcdHJlcyA9IHJlcy5tdWwgQCBmb3IgaSBpbiByYW5nZSBuXHJcblx0XHRyZXNcclxuXHJcblx0Y29tcG9zZSA6IChvdGhlcilcdC0+XHJcblx0XHRyZXMgPSBuZXcgUG9seW5vbSBbXVxyXG5cdFx0Zm9yIHZhbHVlLGkgaW4gQGxzdFxyXG5cdFx0XHRyZXMgPSByZXMuYWRkIChuZXcgUG9seW5vbSBbdmFsdWVdKS5tdWwgb3RoZXIucG93ZXIgaVxyXG5cdFx0cmVzXHJcblxyXG5cdHZhbHVlIDogKHgpIC0+XHJcblx0XHRyZXMgPSAwXHJcblx0XHRyZXMgKz0gdmFsdWUgKiB4ICoqIGkgZm9yIHZhbHVlLGkgaW4gQGxzdFxyXG5cdFx0cmVzXHJcblxyXG5cdGRpZmYgOiAtPlxyXG5cdFx0bHN0ID0gW11cclxuXHRcdGZvciB2YWx1ZSxpIGluIEBsc3RcclxuXHRcdFx0aWYgaSAhPSAwIHRoZW4gbHN0W2ktMV0gPSBpKnZhbHVlXHJcblx0XHRuZXcgUG9seW5vbSBsc3RcclxuXHJcblx0aW50ZWcgOiAtPlxyXG5cdFx0bHN0ID0gWzBdXHJcblx0XHRmb3IgdmFsdWUsaSBpbiBAbHN0XHJcblx0XHRcdGkgKz0gMVxyXG5cdFx0XHRsc3RbaV0gPSB2YWx1ZS9pXHJcblx0XHRuZXcgUG9seW5vbSBsc3RcclxuXHJcblx0dG9fcyA6IC0+XHJcblx0XHRhcnIgPSBbXVxyXG5cdFx0Zm9yIGl0ZW0saSBpbiBAbHN0XHJcblx0XHRcdGlmIGl0ZW0gPT0gMCB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdGlmIGl0ZW0gPT0gMSBcclxuXHRcdFx0XHRpZiBpPT0wIHRoZW4gYXJyLnB1c2ggXCIxXCJcclxuXHRcdFx0XHRlbHNlIGlmIGk9PTEgdGhlbiBhcnIucHVzaCBcInhcIlxyXG5cdFx0XHRcdGVsc2UgYXJyLnB1c2ggXCJ4XlwiICsgaVxyXG5cdFx0XHRlbHNlXHRcdFx0XHRcclxuXHRcdFx0XHRpZiBpPT0wIHRoZW4gYXJyLnB1c2ggaXRlbVxyXG5cdFx0XHRcdGVsc2UgaWYgaT09MSB0aGVuIGFyci5wdXNoIGl0ZW0gKyBcIip4XCJcclxuXHRcdFx0XHRlbHNlIGFyci5wdXNoIGl0ZW0gKyBcIip4XlwiICsgaVxyXG5cdFx0YXJyLnJldmVyc2UoKVxyXG5cdFx0YXJyLmpvaW4gXCIrXCJcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzUsNCwzXSkubHN0XCIgOiBbNSw0LDNdXHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzQsM10pLmxzdFwiIDogWzQsM11cclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSw0LDNdKS50b19zKClcIiA6IFwiMyp4XjIrNCp4KzVcIlxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFswLDAsMV0pLnRvX3MoKVwiIDogXCJ4XjJcIlxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFs1LDQsM10pLmFkZChuZXcgUG9seW5vbSBbNCwzXSkudG9fcygpXCIgOiBcIjMqeF4yKzcqeCs5XCJcclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSw0LDNdKS5tdWwobmV3IFBvbHlub20gWzQsM10pLnRvX3MoKVwiIDogXCI5KnheMysyNCp4XjIrMzEqeCsyMFwiXHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzUsNCwzXSkudmFsdWUoMilcIiA6IDI1XHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzUsNCwzXSkucG93ZXIoMikubHN0XCIgOiBbMjUsNDAsNDYsMjQsOV1cclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNCwzXSkucG93ZXIoMykubHN0XCIgOiBbNjQsMTQ0LDEwOCwyN10gXHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzUsNCwzXSkuZGlmZigpLmxzdFwiIDogWzQsNl1cclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSw0LDNdKS5pbnRlZygpLmxzdFwiIDogWzAsNSwyLDFdXHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzAsMCwxXSkuaW50ZWcoKS50b19zKClcIiA6IFwiMC4zMzMzMzMzMzMzMzMzMzMzKnheM1wiXHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzAsMCwxXSkuaW50ZWcoKS52YWx1ZSgzKVwiIDogOVxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFszLDJdKS5jb21wb3NlKG5ldyBQb2x5bm9tIFszLDJdKS5sc3RcIiA6IFs5LDRdIFxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFszLDJdKS5jb21wb3NlKG5ldyBQb2x5bm9tIFs1LDAsLTFdKS5sc3RcIiA6IFsxMywwLC0yXSBcclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSwwLC0xXSkuY29tcG9zZShuZXcgUG9seW5vbSBbMywyXSkubHN0XCIgOiBbLTQsLTEyLC00XVxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFs1LDAsLTFdKS5jb21wb3NlKG5ldyBQb2x5bm9tIFs1LDAsLTFdKS5sc3RcIiA6IFstMjAsMCwxMCwwLC0xXVxyXG5cclxuXHJcblx0XCJBODogQWR2YW5jZWRcIiA6XHJcblxyXG5cdFx0cGF0aDogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIGNvbmNhdCBpZiB0aGVuIGVsc2VcclxuXHJcbnRyZWUgPSB7MzowLCA0OjgsIDU6MywgNjozLCAxMDo1LCA3OjUsIDEyOjYsIDg6NiwgMjA6MTAsIDk6NywgMjQ6MTIsIDE0OjEyfVxyXG5cclxucGF0aCA9ICh0cmVlLHgpIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxucGF0aCA9ICh0cmVlLHgpIC0+IGlmIHg9PTAgdGhlbiByZXR1cm4gW10gZWxzZSBbeF0uY29uY2F0IHBhdGggdHJlZSx0cmVlW3hdXHJcblwiXCJcIlxyXG5cdFx0XHRjOiAgXHJcblx0XHRcdFx0XCJwYXRoIHRyZWUsIDRcIiA6IFs0LDgsNiwzXVxyXG5cdFx0XHRcdFwicGF0aCB0cmVlLCAyMFwiIDogWzIwLDEwLDUsM11cclxuXHRcdFx0XHRcInBhdGggdHJlZSwgOVwiIDogWzksNyw1LDNdXHJcblxyXG5cdFx0c3VtbWE6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBfLmlzRXF1YWwgXy5pc051bWJlciBfLmhlYWQgXy50YWlsXHJcblxyXG5zdW1tYSA9ICh0cmVlKSAtPiAwXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc3VtbWEgPSAodHJlZSkgLT4gcmV0dXJuIGlmIF8uaXNFcXVhbCB0cmVlLFtdIHRoZW4gMCBlbHNlIGlmIF8uaXNOdW1iZXIgdHJlZSB0aGVuIHRyZWUgZWxzZVx0c3VtbWEoXy5oZWFkIHRyZWUpICsgc3VtbWEgXy50YWlsIHRyZWUgXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiXy5pc051bWJlciAnMTInXCIgOiBmYWxzZSBcclxuXHRcdFx0XHRcIl8uaXNOdW1iZXIgMTJcIiA6IHRydWUgXHJcblx0XHRcdFx0XCJfLmlzTnVtYmVyIFsxMl1cIiA6IGZhbHNlIFxyXG5cdFx0XHRcdFwiXy5oZWFkIFsxMSwyMiwzM11cIiA6IDExXHJcblx0XHRcdFx0XCJfLnRhaWwgWzExLDIyLDMzXVwiIDogWzIyLDMzXVxyXG5cclxuXHRcdFx0XHRcInN1bW1hIFsxLDIsMyw0XVwiIDogMTBcclxuXHRcdFx0XHRcInN1bW1hIFszLCBbNSw2XSwgWzcsOCwxMCwxMl0sIFs0LDksMTQsWzIwLDI0XV0sIFtbMTIsMTNdLDE0XV1cIiA6IDE2MVxyXG5cclxuXHRcdFwibGlzdCByZWN1cnNpb25cIiA6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjcgdHlwZW9mIGlmIHRoZW4gZWxzZSBmb3IgaW4gcmFuZ2UgbWluIGxlbmd0aFxyXG4jIEzDpGdnIG3DpHJrZSB0aWxsIGphdmFzY3JpcHRzIGZlbGFrdGlnYSBoYW50ZXJpbmcgYXYgdGFsIHZpZCBqw6RtZsO2cmVsc2UgYXYgbGlzdG9yLlxyXG5cclxuY29tcGFyZSA9IChhLGIpIC0+IC0yXHJcblxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY29tcGFyZSA9IChhLGIpIC0+XHJcblx0aWYgdHlwZW9mIGEgIT0gXCJvYmplY3RcIiBcclxuXHRcdGlmIGEgPiBiIHRoZW4gcmV0dXJuIC0xIGVsc2UgaWYgYSA8IGIgdGhlbiByZXR1cm4gMSBlbHNlIHJldHVybiAwXHJcblx0Zm9yIGkgaW4gcmFuZ2UgbWluIGEubGVuZ3RoLGIubGVuZ3RoXHJcblx0XHRjID0gY29tcGFyZSBhW2ldLGJbaV1cclxuXHRcdGlmIGMgIT0gMCB0aGVuIHJldHVybiBjXHJcblx0MFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcdFxyXG5cdFx0XHRcdFwidHlwZW9mIDFcIiA6IFwibnVtYmVyXCJcclxuXHRcdFx0XHRcInR5cGVvZiAzLjE0XCIgOiBcIm51bWJlclwiXHJcblx0XHRcdFx0J3R5cGVvZiBcIlwiJyA6IFwic3RyaW5nXCJcclxuXHRcdFx0XHRcInR5cGVvZiBbXVwiIDogXCJvYmplY3RcIlxyXG5cdFx0XHRcdFwidHlwZW9mIHt9XCIgOiBcIm9iamVjdFwiXHJcblx0XHRcdFx0XCJtaW4gMSwyXCIgOiAxXHJcblx0XHRcdFx0XCJtaW4gMiwxXCIgOiAxXHJcblx0XHRcdFx0XCIxMSA+IDJcIiA6IHRydWVcdFx0XHJcblx0XHRcdFx0XCJbMTFdID4gWzJdXCIgOiBmYWxzZSBcclxuXHRcdFx0XHRcIlsxMV0gPiBbMTBdXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxMSA9PSAxMVwiIDogdHJ1ZSBcclxuXHRcdFx0XHQnXCIxMVwiID09IFwiMTFcIicgOiB0cnVlIFxyXG5cdFx0XHRcdFwiWzExXSA9PSBbMTFdXCIgOiBmYWxzZSBcclxuXHRcdFx0XHRcImNvbXBhcmUgMTEsIDJcIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxMV0sIFsyXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzExXSwgWzEwXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzExXSwgWzExXVwiIDogMFxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMl0sIFsxMV1cIiA6IDFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzEsWzIsM11dLCBbMSxbMiwzXV1cIiA6IDBcclxuXHRcdFx0XHRcImNvbXBhcmUgWzEwLFsyLDNdXSwgWzEsWzIsM11dXCIgOiAtMVxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMSxbMjAsM11dLCBbMSxbMiwzXV1cIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxLFsyLDMwXV0sIFsxLFsyLDNdXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjRdXSwgW1sxMiwxM10sMTRdXSwgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjNdXSwgW1sxMiwxM10sMTRdXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjRdXSwgW1sxMiwxM10sMTRdXSwgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjRdXSwgW1sxMiwxM10sMTRdXVwiIDogMFxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMywgWzUsNl0sIFs3LDgsMTAsMTJdLCBbNCw5LDE0LFsyMCwyNF1dLCBbWzEyLDEzXSwxNF1dLCBbMywgWzUsNl0sIFs3LDgsMTAsMTJdLCBbNCw5LDE0LFsyMCwyNV1dLCBbWzEyLDEzXSwxNF1dXCIgOiAxXHJcblxyXG5cdFx0ZmlsdGVyOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgZmlsdGVyXHJcblxyXG5kanVyID0gW1xyXG5cdHtuYW1uOidGbHVmZnknLGFydDona2FuaW4nfVxyXG5cdHtuYW1uOidLYXJvJyxhcnQ6J2h1bmQnfVxyXG5cdHtuYW1uOidSb2NreScsYXJ0OidodW5kJ31cclxuXHR7bmFtbjonQWxiZXJ0JyxhcnQ6J2Zpc2snfVxyXG5cdHtuYW1uOidUcml4aWUnLGFydDona2F0dCd9XHJcblx0e25hbW46J0hlcmJlcnQnLGFydDonZmlzayd9XHJcbl1cclxuXHJcbmcgPSAoZGp1ciwgYXJ0KSAtPiBbXVxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5nID0gKGRqdXIsIGFydCkgLT4gZGp1ci5maWx0ZXIgKGQpIC0+IGQuYXJ0ID09IGFydFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcIlsxLCAtMiwgMCwgMywgLTRdLmZpbHRlciAoeCkgLT4geCA+IDBcIiA6IFsxLDNdXHJcblx0XHRcdFx0XCJnIGRqdXIsJ2h1bmQnXCIgOiBbe25hbW46J0thcm8nLGFydDonaHVuZCd9LHtuYW1uOidSb2NreScsYXJ0OidodW5kJ31dXHJcblx0XHRcdFx0XCJnIGRqdXIsJ2Zpc2snXCIgOiBbe25hbW46J0FsYmVydCcsYXJ0OidmaXNrJ30se25hbW46J0hlcmJlcnQnLGFydDonZmlzayd9XVxyXG5cdFx0XHRcdFwiZyBkanVyLCdrYW5pbidcIiA6IFt7bmFtbjonRmx1ZmZ5JyxhcnQ6J2thbmluJ31dXHJcblx0XHRcdFx0XCJnIGRqdXIsJ2thdHQnXCIgOiBbe25hbW46J1RyaXhpZScsYXJ0OidrYXR0J31dXHJcblx0XHRcdFx0XCJnIGRqdXIsJ3BhcGVnb2phJ1wiIDogW11cclxuXHJcblx0XHRjb21wcmVoZW5zaW9uOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgZm9yIFxyXG5cclxuZGp1ciA9IFtcclxuXHR7bmFtbjonRmx1ZmZ5JyxhcnQ6J2thbmluJ31cclxuXHR7bmFtbjonS2FybycsYXJ0OidodW5kJ31cclxuXHR7bmFtbjonUm9ja3knLGFydDonaHVuZCd9XHJcblx0e25hbW46J0FsYmVydCcsYXJ0OidmaXNrJ31cclxuXHR7bmFtbjonVHJpeGllJyxhcnQ6J2thdHQnfVxyXG5cdHtuYW1uOidIZXJiZXJ0JyxhcnQ6J2Zpc2snfVxyXG5dXHJcblxyXG5uYW1uID0gKGRqdXIpIC0+IFtdXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbm5hbW4gPSAoZGp1cikgLT4gKGQubmFtbiBmb3IgZCBpbiBkanVyKVxyXG5cIlwiXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwiKDIqKmkgZm9yIGkgaW4gcmFuZ2UgNSlcIiA6IFsxLDIsNCw4LDE2XVxyXG5cdFx0XHRcdFwibmFtbiBkanVyXCIgOiBbJ0ZsdWZmeScsJ0thcm8nLCdSb2NreScsJ0FsYmVydCcsJ1RyaXhpZScsJ0hlcmJlcnQnXVxyXG5cclxuXHRcdHJlZHVjZTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIHJlZHVjZVxyXG5cclxuaWNhID0gW1xyXG5cdHtwcmlzOiAxMjMsIGFudGFsOjF9XHJcblx0e3ByaXM6IDM0LCBhbnRhbDoyfVxyXG5cdHtwcmlzOiA3OCwgYW50YWw6NH1cclxuXHR7cHJpczogOTYsIGFudGFsOjV9XHJcbl1cclxua29uc3VtID0gW1xyXG5cdHtwcmlzOiAxMDAsIGFudGFsOjF9XHJcblx0e3ByaXM6IDMwLCBhbnRhbDoxfVxyXG5cdHtwcmlzOiA3MCwgYW50YWw6MX1cclxuXHR7cHJpczogOTAsIGFudGFsOjF9XHJcbl1cclxuXHJcbnN1bW1hID0gKHZhcm9yKSAtPiAwXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc3VtbWEgPSAodmFyb3IpIC0+IHZhcm9yLnJlZHVjZSAoKHN1bSwgdmFyYSkgLT4gc3VtICsgdmFyYS5wcmlzICogdmFyYS5hbnRhbCksIDBcclxuXCJcIlwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcImljYS5yZWR1Y2UgKChzdW0sIHZhcmEpIC0+IHN1bSArIHZhcmEuYW50YWwpLCAwXCIgOiAxMlxyXG5cdFx0XHRcdFwia29uc3VtLnJlZHVjZSAoKHN1bSwgdmFyYSkgLT4gc3VtICsgdmFyYS5wcmlzKSwgMFwiIDogMjkwXHJcblx0XHRcdFx0XCJzdW1tYSBpY2FcIiA6IDk4M1xyXG5cdFx0XHRcdFwic3VtbWEga29uc3VtXCIgOiAyOTBcclxuXHJcblx0XHRzb3J0Qnk6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBfLnNvcnRCeVxyXG5cclxuZGp1ciA9IFsnRmx1ZmZ5JywnS2FybycsJ1JvY2t5JywnQWxiZXJ0JywnVHJpeGllJywnSGVyYmVydCddXHJcblxyXG5zb3J0ZXJhID0gKGRqdXIsZikgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5zb3J0ZXJhID0gKGRqdXIsZikgLT4gXy5zb3J0QnkgZGp1ciwgZlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwiXy5zb3J0QnkgWydvbmUnLCAndHdvJywgJ3RocmVlJywgJ2ZvdXInXSwgJ2xlbmd0aCdcIiA6IFtcIm9uZVwiLCBcInR3b1wiLFwiZm91clwiLFwidGhyZWVcIl1cclxuXHRcdFx0XHRcInNvcnRlcmEgZGp1ciwgKGQpIC0+IGQubGVuZ3RoXCIgOiBbXCJLYXJvXCIsXCJSb2NreVwiLFwiRmx1ZmZ5XCIsXCJBbGJlcnRcIixcIlRyaXhpZVwiLFwiSGVyYmVydFwiXVxyXG5cdFx0XHRcdFwic29ydGVyYSBkanVyXCIgOiBbXCJBbGJlcnRcIixcIkZsdWZmeVwiLFwiSGVyYmVydFwiLFwiS2Fyb1wiLFwiUm9ja3lcIixcIlRyaXhpZVwiXVxyXG5cclxuXHRcdGdyb3VwQnk6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBfLmdyb3VwQnlcclxuXHJcbmRqdXIgPSBbJ0ZsdWZmeScsJ0thcm8nLCdSb2NreScsJ0FsYmVydCcsJ1RyaXhpZScsJ0hlcmJlcnQnXVxyXG5cclxuZ3J1cHBlcmEgPSAoZGp1cixmKSAtPiB7fVxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmdydXBwZXJhID0gKGRqdXIsZikgLT4gXy5ncm91cEJ5IGRqdXIsIGZcclxuXCJcIlwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcIl8uZ3JvdXBCeSBbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCdcIiA6IHszOiBbXCJvbmVcIiwgXCJ0d29cIl0sIDU6IFtcInRocmVlXCJdfVxyXG5cdFx0XHRcdFwiZ3J1cHBlcmEgZGp1ciwgKGQpIC0+IGQubGVuZ3RoXCIgOiB7XCI0XCI6W1wiS2Fyb1wiXSxcIjVcIjpbXCJSb2NreVwiXSxcIjZcIjpbXCJGbHVmZnlcIixcIkFsYmVydFwiLFwiVHJpeGllXCJdLFwiN1wiOltcIkhlcmJlcnRcIl19XHJcblx0XHRcdFx0XCJncnVwcGVyYSBkanVyLCAoZCkgLT4gXy5sYXN0KGQpXCIgOiB7XCJ5XCI6W1wiRmx1ZmZ5XCIsXCJSb2NreVwiXSxcIm9cIjpbXCJLYXJvXCJdLFwidFwiOltcIkFsYmVydFwiLFwiSGVyYmVydFwiXSxcImVcIjpbXCJUcml4aWVcIl19XHJcblxyXG5cdFx0c3BsaXQ6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBzcGxpdCBmb3IgaW4gXy5vYmplY3RcclxuXHJcbnBhcmFtZXRyYXIgPSAodXJsKSAtPiB7fVxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnBhcmFtZXRyYXIgPSAodXJsKSAtPiBfLm9iamVjdChmLnNwbGl0ICc9JyBmb3IgZiBpbiB1cmwuc3BsaXQoJz8nKVsxXS5zcGxpdCgnJicpKVxyXG5cIlwiXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwiJzEsMiwzJy5zcGxpdCAnLCdcIiA6IFtcIjFcIixcIjJcIixcIjNcIl1cclxuXHRcdFx0XHRcIl8ub2JqZWN0IFsnbW9lJywgJ2xhcnJ5JywgJ2N1cmx5J10sIFszMCwgNDAsIDUwXVwiIDoge21vZTogMzAsIGxhcnJ5OiA0MCwgY3VybHk6IDUwfVxyXG5cdFx0XHRcdFwiXy5vYmplY3QgW1snbW9lJywgMzBdLCBbJ2xhcnJ5JywgNDBdLCBbJ2N1cmx5JywgNTBdXVwiIDoge21vZTogMzAsIGxhcnJ5OiA0MCwgY3VybHk6IDUwfVxyXG5cdFx0XHRcdFwicGFyYW1ldHJhciAnZG4uc2U/eD0wJnk9MSdcIiA6IHt4OicwJywgeTonMSd9XHJcblx0XHRcdFx0XCJwYXJhbWV0cmFyICdzdmQuc2U/cGFnZT03J1wiIDoge3BhZ2UgOiAnNyd9XHJcblx0XHRcdFx0XCJwYXJhbWV0cmFyICdhZnRvbmJsYWRldC5zZT9hcnRpY2xlPTEyMzQ1NiZkYXRlPTIwMTYtMTItMDEnXCIgOiB7YXJ0aWNsZTonMTIzNDU2JywgZGF0ZTonMjAxNi0xMi0wMSd9XHJcblx0XHRcdFx0XCJwYXJhbWV0cmFyICdleHByZXNzZW4uc2U/Y2l0eT1TdG9ja2hvbG0nXCIgOiB7Y2l0eSA6ICdTdG9ja2hvbG0nfVxyXG5cdFx0XHRcdFwicGFyYW1ldHJhciAnaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3NlYXJjaD9xPWNvZmZlZXNjcmlwdCdcIiA6IHtxIDogJ2NvZmZlZXNjcmlwdCd9XHJcblxyXG5cdFx0UG9rZXJIYW5kIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEwIG5pbHNzb246IGNvbXBhcmUgYnNvcnQgdW5kZXJzY29yZTogXy5zaXplIF8uZ3JvdXBCeSBfLnVuemlwIF8udW5pcSBcIlwiIFtdIHt9XHJcbiMgamF2YXNjcmlwdDogZm9yIGluIGlmIHRoZW4gZWxzZSBzdWJzdHJpbmcgbGVuZ3RoIHBhcnNlSW50IHNwbGl0IGluZGV4T2ZcclxuXHJcbiMgaHR0cHM6Ly9zdi53aWtpcGVkaWEub3JnL3dpa2kvUG9rZXJoYW5kXHJcblxyXG5wb2tlciA9IChhLGIpIC0+IC0yXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnBva2VyID0gKGEsYikgLT4gY29tcGFyZSBjYWxjKGEuc3BsaXQoXCIgXCIpKSwgY2FsYyhiLnNwbGl0KFwiIFwiKSlcclxuY2FsYyA9IChoYW5kKSAtPlxyXG5cdGdyb3VwcyA9IF8uZ3JvdXBCeSgnICAyMzQ1Njc4OVRKUUtBJy5pbmRleE9mKGNhcmRbMl0pIGZvciBjYXJkIGluIGhhbmQpXHJcblx0W3Njb3JlLCByYW5rc10gPSBfLnVuemlwIHJldmVyc2UgYnNvcnQgKFtjbnQubGVuZ3RoLCBwYXJzZUludChyYW5rKV0gZm9yIHJhbmssIGNudCBvZiBncm91cHMpIFxyXG5cdGlmIHNjb3JlLmxlbmd0aCA9PSA1XHJcblx0XHRpZiBjb21wYXJlKHJhbmtzLCBbMTQsNSw0LDMsMl0pPT0wIHRoZW4gcmFua3MgPSBbNSw0LDMsMiwxXVxyXG5cdFx0c3RyYWlnaHQgPSBpZiByYW5rc1swXSAtIHJhbmtzWzRdID09IDQgdGhlbiAxIGVsc2UgMFxyXG5cdFx0Zmx1c2ggPSBpZiBfLnNpemUoXy51bmlxKHN1aXQuc3Vic3RyaW5nKDAsMikgZm9yIHN1aXQgaW4gaGFuZCkpID09IDEgdGhlbiAxIGVsc2UgMCBcclxuXHRcdHNjb3JlID0gW1tbMV0sIFszLDEsMSwxXV0sIFtbMywxLDEsMl0sIFs1XV1dW2ZsdXNoXVtzdHJhaWdodF1cclxuXHRbc2NvcmUsIHJhbmtzXSBcclxuXCJcIlwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdCdbMSwyLDNdID09IFsxLDIsM10nIDogZmFsc2VcclxuXHRcdFx0XHQnMiA8IDExJyA6IHRydWVcclxuXHRcdFx0XHQnXCIyXCIgPCBcIjExXCInIDogZmFsc2VcclxuXHRcdFx0XHQnWzJdIDwgWzExXScgOiBmYWxzZVxyXG5cdFx0XHRcdCdbXCIyXCJdIDwgW1wiMTFcIl0nIDogZmFsc2VcclxuXHRcdFx0XHQnY29tcGFyZSBbMl0sIFsxMV0nIDogMVxyXG5cdFx0XHRcdCdjb21wYXJlIFsxLDIsM10sIFsxLDIsM10nIDogMFxyXG5cdFx0XHRcdCdjb21wYXJlIFsxMV0sIFsyXScgOiAtMVxyXG5cdFx0XHRcdCdic29ydCBbNDcsMTIsMjVdJyA6IFsxMiwyNSw0N11cclxuXHRcdFx0XHQnYnNvcnQgW1sxMSwxM10sWzExLDEyXSxbMiwyXV0nIDogW1syLDJdLFsxMSwxMl0sWzExLDEzXV1cclxuXHRcdFx0XHQnYnNvcnQgW1sxMSwxM10sWzExLDEyXSxbMiwyXV0sIChhLGIpIC0+IGNvbXBhcmUgYixhJyA6IFtbMTEsMTNdLFsxMSwxMl0sWzIsMl1dXHJcblx0XHRcdFx0J2Jzb3J0IFtcInBlclwiLCBcImFubmFcIiwgXCJib1wiXScgOiBbXCJhbm5hXCIsXCJib1wiLFwicGVyXCJdXHJcblx0XHRcdFx0J18uZ3JvdXBCeSBbXCJwZXJcIiwgXCJhbm5hXCIsIFwia2FybFwiXSwgXCJsZW5ndGhcIicgOiB7XCIzXCI6W1wicGVyXCJdLFwiNFwiOltcImFubmFcIixcImthcmxcIl19XHJcblx0XHRcdFx0J18udW56aXAgW1tcIm1vZVwiLCAzMCwgdHJ1ZV0sIFtcImxhcnJ5XCIsIDQwLCBmYWxzZV1dJyA6IFtbJ21vZScsICdsYXJyeSddLCBbMzAsIDQwXSwgW3RydWUsIGZhbHNlXV1cclxuXHRcdFx0XHQnXy51bmlxIFs1LDQsMSwyLDEsOV0nIDogWzUsNCwxLDIsOV1cclxuXHRcdFx0XHRcInBva2VyICdrbDggcnVBIHJ1OCBrbEEga2w5JywgJ3J1NyBzcDIgcnU1IHNwMyBrbEEnXCI6IC0xXHJcblx0XHRcdFx0XCJwb2tlciAna2w4IHNwVCBrbEsgaGo5IHNwNCcsICdydTcgc3AyIHJ1NSBzcDMga2xBJ1wiOiAxXHJcblx0XHRcdFx0XCJwb2tlciAna2w4IHJ1QSBydTgga2xBIGtsOScsICdrbDggcnVBIHJ1OCBrbEEga2xUJ1wiOiAxXHJcblx0XHRcdFx0XCJwb2tlciAna2w4IHJ1QSBydTgga2xBIGtsOScsICdrbDggcnVBIHJ1OCBrbEEga2w3J1wiOiAtMVxyXG5cdFx0XHRcdFwicG9rZXIgJ2tsOCBydUEgcnU4IGtsQSBrbDknLCAna2xUIHJ1QSBydVQga2xBIGtsOSdcIjogMVxyXG5cdFx0XHRcdFwicG9rZXIgJ3NwQSBzcDIgc3AzIHNwNCBzcDUnLCAncnVBIHJ1MiBydTMgcnU0IHJ1NSdcIjogMFxyXG5cdFx0XHRcdFwicG9rZXIgJ3NwQSBoakEgcnVBIGtsQSBzcDUnLCAncnVBIHJ1MiBydTMgcnU0IHJ1NSdcIjogMVxyXG5cdFx0XHRcdFwicG9rZXIgJ3J1NyBzcDcgaGo3IGtsNyBzcEonLCAncnU2IHNwNSBoajYga2w2IHNwUSdcIjogLTFcclxuXHRcdFx0XHRcInBva2VyICdydTggc3A4IGhqOCBrbDkgc3A5JywgJ3J1NiBzcDYgaGo2IHJ1OSBoajknXCI6IC0xXHJcblx0XHRcdFx0XCJwb2tlciAncnU3IHJ1MyBydTUgcnU5IHJ1SycsICdoajcgaGozIGhqNSBoajkgaGpLJ1wiOiAwXHJcblx0XHRcdFx0XCJwb2tlciAncnU3IHJ1MyBydTUgcnU5IHJ1SycsICdoajcgaGozIGhqNSBoajkgaGpLJ1wiOiAwXHJcblx0XHRcdFx0XCJwb2tlciAncnU3IHJ1MyBydTUgcnU5IHJ1SycsICdoajcgaGozIGhqNSBoajkgaGpLJ1wiOiAwXHJcblx0XHRcdFx0XCJwb2tlciAncnU3IGhqOCBydTkgaGo1IHJ1NicsICdoajcgcnU4IGtsOSBoalQgc3A2J1wiOiAxXHJcblx0XHRcdFx0XCJwb2tlciAncnU3IGhqOCBydTgga2w4IHJ1SicsICdrbDcgaGo5IHJ1OSBrbDkgcnVRJ1wiOiAxXHJcblx0XHRcdFx0XCJwb2tlciAncnU3IGhqNyBydTgga2w4IHJ1SicsICdzcDcga2w3IHNwOCBoajggcnVUJ1wiOiAtMVxyXG5cdFx0XHRcdFwicG9rZXIgJ2hqNyBrbDMgc3AzIGtsNCBoakEnLCAnc3A3IGhqMyBydTMga2xLIHNwQSdcIjogMVxyXG5cdFx0XHRcdFwicG9rZXIgJ3NwNyBoajMgcnUyIGtsNCBzcEEnLCAnaGo3IHJ1MyBydTUgc3A0IGhqQSdcIjogMVxyXG4iXX0=
//# sourceURL=C:\github\p5Assert\data.coffee