// Generated by CoffeeScript 1.11.1
var data;

data = {
  "Nyheter": {
    "Nyheter": {
      b: "# NYHETER 2017 Mars\n#   A3: Introduktion, Nim, Sort, Växelcykel, Kalkylator\n#   A4: Earth, Glosor, Glosor[]\n#   A5: Palindrom, Rövarspråk, Advanced\n#   A7: Bignum, Bråktal, Simplex, Complex, Nian\n#   A8: List recursion, Pokerhand, Matematik\n\n# Klicka nu på A0!",
      a: "",
      e: {
        "Beginners Guide to Coffeescript": "http://blog.teamtreehouse.com/the-absolute-beginners-guide-to-coffeescript"
      }
    }
  },
  "A0: One Parameter": {
    Ture: {
      b: "# Maskinen Ture är trasig! Ture är ledsen. Du måste laga Ture!\n# Skickar man in en etta till Ture ska en etta komma ut.\n# Just nu skickar Ture alltid ut nollor. Ture har hakat upp sig!\n# Namnet på det man skickar in till Ture står mellan parenteserna. Namnet är x.\n# x kan vara olika saker. Ibland en nolla och ibland en etta.\n# Efter pilen talar man om vad som ska komma ut från Ture.\n#   Den gula kolumnen innehåller det som skickas in till Ture.\n#   Den gröna kolumnen innehåller det som ska komma ut ur Ture.\n#   Den röda kolumnen innehåller det som kommer ut ur Ture, just nu.\n# Se till att göra de RÖDA cellerna GRÖNA!\n# Tryck nu på PgDn och gör Ture glad igen!\n#   Ändra nollan till en etta. Nu skickas bara ettor ut och inga nollor.\n#   Ändra ettan till ett x.    Nu är allt som det ska och Ture är glad igen!\n# Gå till nästa uppgift genom att klicka på Wilma i listan till vänster.\n\nTure = (x) -> 0",
      a: "Ture = (x) -> x",
      c: {
        "Ture 0": 0,
        "Ture 1": 1
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Wilma: {
      b: "# Om man skickar en sjua till Wilma ska det komma tillbaks en åtta.\n# Om man skickar en åtta till Wilma ska det komma tillbaks en nia.\n# Vad ska Wilma skicka tillbaks om det kommer in ett x ?\n# Tabellen längst ner innehåller lite ledtrådar.\n\nWilma = (x) -> x",
      a: "Wilma = (x) -> x+1",
      c: {
        "Wilma 7": 8,
        "Wilma 8": 9
      },
      d: {
        "7 + 1": 8,
        "8 + 1": 9
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Noel: {
      b: "# Någon av dessa löser problemet: + *\n\nNoel = (x) ->",
      a: "Noel = (x) -> 2*x",
      c: {
        "Noel 5": 10,
        "Noel 6": 12
      },
      d: {
        "3 + 2": 5,
        "3 * 2": 6
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Greta: {
      b: "# *\n\nGreta = (x) ->",
      a: "Greta = (x) -> x*x",
      c: {
        "Greta 1": 1,
        "Greta 2": 4,
        "Greta 3": 9,
        "Greta 4": 16,
        "Greta 5": 25
      },
      d: {
        "3 * 2": 6
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Viktor: {
      b: "# -\n\nViktor = (x) ->",
      a: "Viktor = (x) -> -x",
      c: {
        "Viktor -4": 4,
        "Viktor 3": -3
      },
      d: {
        "3 - 2": 1
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Sabrina: {
      b: "# -\n\nSabrina = (x) ->",
      a: "Sabrina = (x) -> x-2",
      c: {
        "Sabrina 7": 5,
        "Sabrina 17": 15
      },
      d: {
        "3 - 2": 1
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    David: {
      b: "# /\n\nDavid = (x) ->",
      a: "David = (x) -> x/2",
      c: {
        "David 8": 4,
        "David 6": 3
      },
      d: {
        "6 / 3": 2
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Gabriella: {
      b: "# %\n\nGabriella = (x) ->",
      a: "Gabriella = (x) -> x % 2",
      c: {
        "Gabriella 7": 1,
        "Gabriella 8": 0,
        "Gabriella 9": 1,
        "Gabriella 10": 0
      },
      d: {
        "0 % 3": 0,
        "1 % 3": 1,
        "2 % 3": 2,
        "3 % 3": 0,
        "4 % 3": 1,
        "5 % 3": 2
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Beppe: {
      b: "# ==\n\nBeppe = (x) ->",
      a: "Beppe = (x) -> x == 2",
      c: {
        "Beppe 1": false,
        "Beppe 2": true,
        "Beppe 3": false,
        "Beppe 4": false
      },
      d: {
        "1 == 0": false,
        "1 == 1": true,
        "1 == 2": false
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Karolina: {
      b: "# >\n\nKarolina = (x) ->",
      a: "Karolina = (x) -> x > 2",
      c: {
        "Karolina 1": false,
        "Karolina 2": false,
        "Karolina 3": true,
        "Karolina 4": true
      },
      d: {
        "0 > 1": false,
        "1 > 1": false,
        "2 > 1": true
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Kasper: {
      b: "# >=\n\nKasper = (x) ->",
      a: "Kasper = (x) -> x >= 3",
      c: {
        "Kasper 1": false,
        "Kasper 2": false,
        "Kasper 3": true,
        "Kasper 4": true
      },
      d: {
        "1 >= 2": false,
        "2 >= 2": true,
        "3 >= 2": true
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Miranda: {
      b: "# !=\n\nMiranda = (x) ->",
      a: "Miranda = (x) -> x != 2",
      c: {
        "Miranda 1": true,
        "Miranda 2": false,
        "Miranda 3": true,
        "Miranda 4": true
      },
      d: {
        "1 != 0": true,
        "1 != 1": false,
        "1 != 2": true
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    }
  },
  "A1: Two Parameters": {
    Operator1: {
      b: "# + - * / % **\n\ng = (a,b) ->",
      a: "g = (a,b) -> a*b",
      c: {
        "g 3,4": 12,
        "g 4,6": 24
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2*2*2": 8,
        "3*3": 9,
        "2 ** 3": 8,
        "3 ** 2": 9
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator2: {
      b: "# + - * / %\n\ng = (a,b) ->",
      a: "g = (a,b) -> a+b",
      c: {
        "g 3,4": 7,
        "g 4,6": 10
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator3: {
      b: "# + - * / %\n\ng = (a,b) ->",
      a: "g = (a,b) -> b-a",
      c: {
        "g 3,4": 1,
        "g 4,6": 2
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator4: {
      b: "# + - * / %\n\ng = (a,b) ->",
      a: "g = (a,b) -> a/b",
      c: {
        "g 8,4": 2,
        "g 12,3": 4
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator5: {
      b: "# + - * / %\n\ng = (a,b) ->",
      a: "g = (a,b) -> a%b",
      c: {
        "g 8,4": 0,
        "g 9,4": 1,
        "g 10,4": 2,
        "g 11,4": 3
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator6: {
      b: "# + - * / % ==\n\ng = (a,b) ->",
      a: "g = (a,b) -> a == b",
      c: {
        "g 0,0": true,
        "g 1,1": true,
        "g 7,4": false,
        "g 6,4": false
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9,
        "2 == 3": false,
        "3 == 3": true
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator7: {
      b: "# + - * / % ==\n\ng = (a,b) ->",
      a: "g = (a,b) -> a - b == 1",
      c: {
        "g 7,6": true,
        "g 5,4": true,
        "g 7,4": false,
        "g 6,4": false
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9,
        "2 == 3": false,
        "3 == 3": true
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator8: {
      b: "# + - * / % ==\n\ng = (a,b) ->",
      a: "g = (a,b) -> a + b == 7",
      c: {
        "g 7,0": true,
        "g 5,2": true,
        "g 7,4": false,
        "g 6,4": false
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9,
        "2 == 3": false,
        "3 == 3": true
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator9: {
      b: "# + - * / % **\n\ng = (a,b) ->",
      a: "g = (a,b) -> a ** b",
      c: {
        "g 3,4": 81,
        "g 4,3": 64
      },
      d: {
        "3 + 2": 5,
        "3 - 2": 1,
        "3 * 2": 6,
        "6 / 2": 3,
        "5 % 2": 1,
        "6 % 2": 0,
        "2 ** 3": 8,
        "3 ** 2": 9
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator10: {
      b: "# + *\n\ng = (a,b) ->",
      a: "g = (a,b) -> a * a + b * b",
      c: {
        "g 0,1": 1,
        "g 1,2": 5,
        "g 2,3": 13,
        "g 3,4": 25,
        "g 3,5": 34
      },
      d: {
        "3 + 2": 5,
        "3 * 2": 6
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator11: {
      b: "# + *\n\ng = (x) ->",
      a: "\"\ng = (x) -> x + 1",
      c: {
        "g g 0": 2,
        "g g 10": 12,
        "g g g 0": 3,
        "g g g 10": 13
      },
      d: {
        "0 + 1 + 1": 2,
        "10 + 1 + 1": 12,
        "0 + 1 + 1 + 1": 3,
        "10 + 1 + 1 + 1": 13
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    },
    Operator12: {
      b: "# + *\n\nf = (x) ->",
      a: "\"\nf = (x) -> x * 2",
      c: {
        "f f 0": 0,
        "f f 1": 4,
        "f f f 1": 8
      },
      e: {
        operators: "https://www.w3schools.com/jsref/jsref_operators.asp"
      }
    }
  },
  'A2: range lerp for': {
    range: {
      b: "# LOC:3 range []\n\nf = (n) -> []\ng = (a,b) -> []\nh = (a,b,n) -> []",
      a: "f = (n) -> range n\ng = (a,b) -> range a,b\ng = (a,b,n) -> range a,b,n",
      c: {
        "f 5": [0, 1, 2, 3, 4],
        "f 6": [0, 1, 2, 3, 4, 5],
        "g 1,5": [1, 2, 3, 4],
        "g 2,4": [2, 3],
        "g -2,0": [-2, -1],
        "h 0,10,1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        "h 0,10,2": [0, 2, 4, 6, 8],
        "h 0,-10,-1": [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
      },
      d: {
        "range 3": [0, 1, 2],
        "range 1,4": [1, 2, 3],
        "range 1,9,2": [1, 3, 5, 7]
      },
      e: {
        range: "http://underscorejs.org/#range"
      }
    },
    "lerp": {
      b: "# LOC:1 lerp + - * /\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,i) -> 0",
      a: "f = (a,b,i) -> lerp a,b,i",
      c: {
        "f 10,20,0": 10,
        "f 10,20,1": 20,
        "f 10,20,2": 30,
        "f 10,20,0.5": 15,
        "f 10,20,-1": 0
      },
      d: {
        "lerp 8,12,0": 8,
        "lerp 8,12,1": 12,
        "lerp 8,12,0.5": 10,
        "lerp 8,12,-1": 4,
        "lerp 8,12,2": 16
      },
      e: {
        lerp: "https://p5js.org/reference/#/p5/lerp"
      }
    },
    "for": {
      b: "# LOC:1 for in range lerp []\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,n) -> []",
      a: "f = (a,b,n) -> lerp a,b,i for i in range n",
      c: {
        "f 0,0,5": [0, 0, 0, 0, 0],
        "f 1,2,5": [1, 2, 3, 4, 5],
        "f 5,4,5": [5, 4, 3, 2, 1],
        "f -1,-2,5": [-1, -2, -3, -4, -5],
        "f 5,25,10": [5, 25, 45, 65, 85, 105, 125, 145, 165, 185],
        "f -0.1,0.0,3": [-0.1, 0.0, 0.1]
      },
      d: {
        "(i*i for i in range 5)": [0, 1, 4, 9, 16]
      },
      e: {
        range: "http://underscorejs.org/#range"
      }
    }
  },
  "A3: [ ]": {
    Introduktion: {
      b: "# LOC:6 length concat .. []\n\nantal = (a) -> 0\nfetch = (a,i) -> 0 \nkonkatenera = (a,b) -> []\nförsta = (a,n) -> []\nmitti = (a,i,j) -> []\nsista = (a,n) -> []",
      a: "antal = (a) -> a.length\nfetch = (a,i) -> a[i]\nkonkatenera = (a,b) -> a.concat b\nförsta = (a,n) -> a[..n-1]\nmitti = (a,i,j) -> a[i..j]\nsista = (a,n) -> a[-n..]",
      c: {
        "antal [1,2,3]": 3,
        "antal [5,4,1,2,9,3,7]": 7,
        "fetch [4,5,6],0": 4,
        "fetch [4,5,6],2": 6,
        "konkatenera [1,2,3],[4,5,6]": [1, 2, 3, 4, 5, 6],
        "första [11,12,13,14,15],3": [11, 12, 13],
        "mitti [11,12,13,14,15],1,2": [12, 13],
        "sista [11,12,13,14,15],4": [12, 13, 14, 15]
      },
      d: {
        "[2,11,3,56,62][0]": 2,
        "_.first [2,11,3,56,62]": 2,
        "_.last [2,11,3,56,62]": 62,
        "[2,11,3,56,62][3]": 56,
        "[2,11,3,56,62].length": 5,
        "[2,11,3,56,62][2]": 3,
        "[2,11,3,56,62][..2]": [2, 11, 3],
        "[2,11,3,56,62][1..]": [11, 3, 56, 62],
        "[2,11,3,56,62][1..2]": [11, 3],
        "_.min [2,11,3,56,62]": 2,
        "_.max [2,11,3,56,62]": 62,
        "_.contains [2,11,3,56,62], 3": true,
        "[2,11,3,56,62].indexOf 62": 4,
        "[2,11,3,56,62].reverse()": [62, 56, 3, 11, 2],
        "[1,2].concat [3,4]": [1, 2, 3, 4]
      },
      e: {
        "[ ]": "https://www.w3schools.com/js/js_arrays.asp"
      }
    },
    Nim: {
      b: "# LOC:1 < ^ sort if then else [] \n\n# NIM är ett tvåmansspel\n# Tag minst en sticka ur en av tre högar\n# Sista stickan vinner\n\nnim = ([a,b,c]) -> [a,b,c]",
      a: "nim=([a,b,c])->sort if(b^c)<a then[b^c,b,c]else if(a^c)<b then[a,a^c,c]else if(a^b)<c then[a,b,a^b]else[a,b,c-1]",
      c: {
        "nim [0,0,1]": [0, 0, 0],
        "nim [0,0,2]": [0, 0, 0],
        "nim [0,3,3]": [0, 2, 3],
        "nim [1,2,3]": [1, 2, 2],
        "nim [1,2,4]": [1, 2, 3],
        "nim [1,3,4]": [1, 2, 3],
        "nim [1,3,5]": [1, 2, 3],
        "nim [2,3,5]": [1, 2, 3],
        "nim [2,4,7]": [2, 4, 6],
        "nim [2,5,6]": [2, 4, 6],
        "nim [3,4,5]": [1, 4, 5],
        "nim [3,4,6]": [2, 4, 6],
        "nim [5,6,7]": [1, 6, 7]
      },
      d: {
        "0^0": 0,
        "0^1": 1,
        "1^0": 1,
        "1^1": 0,
        "0^2": 2,
        "2^0": 2,
        "2^2": 0,
        "1^2": 3,
        "1^2^3": 0,
        "1^3^4": 6,
        "1^4^5": 0,
        "1^5^6": 2
      },
      e: {
        Nim: "https://en.wikipedia.org/wiki/Nim",
        xor: "https://en.wikipedia.org/wiki/Bitwise_operation#XOR",
        Nimrod: "https://en.wikipedia.org/wiki/Nimrod_(computing)"
      }
    },
    Sort: {
      b: "# LOC:16 if < then else []\n# Sortera UTAN att använda loopar\n# Sortera UTAN att använda någon färdig sorteringsrutin\n\nsort2 = (a,b) -> [a,b]\nsort3 = (a,b,c) -> [a,b,c]\nsort4 = (a,b,c,d) -> [a,b,c,d]\nsort5 = (a,b,c,d,e) -> [a,b,c,d,e]\n",
      a: "sort2 = (a,b) -> if a>b then [b,a] else [a,b]\n\nsort3 = (a,b,c) ->\n	[a,b] = sort2 a,b\n	[b,c] = sort2 b,c\n	[a,b] = sort2 a,b\n	[a,b,c]\n\nsort4 = (a,b,c,d) ->\n	[a,b,c] = sort3 a,b,c\n	[b,c,d] = sort3 b,c,d\n	[a,b] = sort2 a,b\n	[a,b,c,d]\n\nsort5 = (a,b,c,d,e) ->\n	[a,b,c,d] = sort4 a,b,c,d\n	[b,c,d,e] = sort4 b,c,d,e\n	[a,b] = sort2 a,b\n	[a,b,c,d,e]",
      c: {
        "sort2 11,2": [2, 11],
        "sort2 2,11": [2, 11],
        "sort3 11,4,5": [4, 5, 11],
        "sort3 11,5,4": [4, 5, 11],
        "sort3 4,11,5": [4, 5, 11],
        "sort3 4,5,11": [4, 5, 11],
        "sort3 5,11,4": [4, 5, 11],
        "sort3 5,4,11": [4, 5, 11],
        "sort4 11,4,5,6": [4, 5, 6, 11],
        "sort4 11,4,6,5": [4, 5, 6, 11],
        "sort4 11,5,4,6": [4, 5, 6, 11],
        "sort4 11,5,6,4": [4, 5, 6, 11],
        "sort4 11,6,4,5": [4, 5, 6, 11],
        "sort4 11,6,5,4": [4, 5, 6, 11],
        "sort4 4,11,5,6": [4, 5, 6, 11],
        "sort4 4,11,6,5": [4, 5, 6, 11],
        "sort4 4,5,11,6": [4, 5, 6, 11],
        "sort4 4,5,6,11": [4, 5, 6, 11],
        "sort4 4,6,11,5": [4, 5, 6, 11],
        "sort4 4,6,5,11": [4, 5, 6, 11],
        "sort4 5,11,4,6": [4, 5, 6, 11],
        "sort4 5,11,6,4": [4, 5, 6, 11],
        "sort4 5,4,11,6": [4, 5, 6, 11],
        "sort4 5,4,6,11": [4, 5, 6, 11],
        "sort4 5,6,11,4": [4, 5, 6, 11],
        "sort4 5,6,4,11": [4, 5, 6, 11],
        "sort4 6,11,4,5": [4, 5, 6, 11],
        "sort4 6,11,5,4": [4, 5, 6, 11],
        "sort4 6,4,11,5": [4, 5, 6, 11],
        "sort4 6,4,5,11": [4, 5, 6, 11],
        "sort4 6,5,11,4": [4, 5, 6, 11],
        "sort4 6,5,4,11": [4, 5, 6, 11],
        "sort5 5,4,11,2,1": [1, 2, 4, 5, 11],
        "sort5 11,5,2,4,1": [1, 2, 4, 5, 11],
        "sort5 5,2,11,4,1": [1, 2, 4, 5, 11]
      },
      d: {
        "if 11 < 2 then [11,2] else [2,11]": [2, 11]
      }
    },
    Växelcykel: {
      b: "# LOC:5 [] for in push bsort - /\n# Din växelcykel har stora och små kugghjul. I vilken ordning ligger växlarna? \n\ngear = (big, small, index) -> []",
      a: "gear = (big, small, index) ->\n	res = []\n	res.push [Math.round(b/s * 100)/100,b,s] for s in small for b in big\n	bsort res\n	res[index]\n",
      c: {
        "gear [43,53], [13,21], 0": [2.05, 43, 21],
        "gear [43,53], [13,21], 1": [2.52, 53, 21],
        "gear [43,53], [13,21], 2": [3.31, 43, 13],
        "gear [43,53], [13,21], 3": [4.08, 53, 13],
        "gear [43,53], [13,15,17,19,21], 0": [2.05, 43, 21],
        "gear [43,53], [13,15,17,19,21], 1": [2.26, 43, 19],
        "gear [43,53], [13,15,17,19,21], 2": [2.52, 53, 21],
        "gear [43,53], [13,15,17,19,21], 3": [2.53, 43, 17],
        "gear [43,53], [13,15,17,19,21], 4": [2.79, 53, 19],
        "gear [43,53], [13,15,17,19,21], 5": [2.87, 43, 15],
        "gear [43,53], [13,15,17,19,21], 6": [3.12, 53, 17],
        "gear [43,53], [13,15,17,19,21], 7": [3.31, 43, 13],
        "gear [43,53], [13,15,17,19,21], 8": [3.53, 53, 15],
        "gear [43,53], [13,15,17,19,21], 9": [4.08, 53, 13]
      },
      d: {
        "Math.round 3.1415": 3,
        "Math.round(3.1415 * 10)/10": 3.1
      },
      e: {
        "Gear ratios": "https://cyclingtips.com/2014/08/beyond-the-big-ring-understanding-gear-ratios-and-why-they-matter/"
      }
    },
    Kalkylator: {
      b: "# LOC:7 [] for in split == push pop if else parseInt\n\ncalc = (command) -> 0",
      a: "calc = (command) ->\n	stack = []\n	for cmd in command.split ' '\n		if cmd == '+' then stack.push stack.pop() + stack.pop()\n		else if cmd == '*' then stack.push stack.pop() * stack.pop()\n		else stack.push parseInt cmd\n	stack.pop()",
      c: {
        "calc '2'": 2,
        "calc '2 3'": 3,
        "calc '2 3 +'": 5,
        "calc '2 3 *'": 6,
        "calc '2 3 4 * +'": 14
      },
      d: {
        "'a b c'.split ' '": ['a', 'b', 'c'],
        '1 + 2': 3,
        "'1' + '2'": '12',
        "1 + '2'": '12',
        "'1' + 2": '12',
        "parseInt '3'": 3,
        "parseFloat '3.14'": 3.14
      },
      e: {
        parseInt: "https://www.w3schools.com/jsref/jsref_parseint.asp",
        stack: "https://sv.wikipedia.org/wiki/Stack_(datastruktur)",
        split: "https://coffeescript-cookbook.github.io/chapters/strings/splitting-a-string",
        RPN: "https://en.wikipedia.org/wiki/Reverse_Polish_notation"
      }
    }
  },
  "A4: { }": {
    "Boys and Girls": {
      b: "# LOC:7 {} [] for in length + /\n\ngirls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\ngirl = girls[0]\n\nnames = (kids) -> []\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\navg = (numbers) -> 0",
      a: "girls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\nnames = (kids) -> kid.name for kid in kids\n\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n	\navg = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "avg ages girls": 11,
        "avg ages boys": 9.5
      },
      d: {
        "girl": {
          name: 'Sabrina',
          age: 12
        },
        "girl['name']": "Sabrina",
        "girl.name": "Sabrina",
        "girl['age']": 12,
        "girl.age": 12,
        "girls.length": 3,
        "_.size girl": 2,
        "_.keys girl": ['name', 'age'],
        "_.values girl": ['Sabrina', 12],
        "_.pairs girl": [['name', 'Sabrina'], ['age', 12]]
      },
      e: {
        "{ }": "https://www.w3schools.com/js/js_objects.asp"
      }
    },
    Earth: {
      b: "earth =\n	europe :\n		sweden : 10\n		denmark : 5\n	asia :\n		china : 1300\n		india : 1500\n		japan : 120\n\nf = ->\ng = ->\nh = -> earth.europe.sweden\nk = ->\nl = ->\nm = ->\nn = ->\n",
      a: "earth =\n	europe :\n		sweden : 10\n		denmark : 5\n	asia :\n		china : 1300\n		india : 1500\n		japan : 120\n",
      c: {
        "f()": {
          "europe": {
            "sweden": 10,
            "denmark": 5
          },
          "asia": {
            "china": 1300,
            "india": 1500,
            "japan": 120
          }
        },
        "g()": {
          "sweden": 10,
          "denmark": 5
        },
        "h()": 10,
        "k()": {
          "china": 1300,
          "india": 1500,
          "japan": 120
        },
        "l()": 1300,
        "m()": 1500,
        "n()": 120
      }
    },
    Glosor: {
      b: "SWE_ENG = {	bord:'table',	stol:'chair',	hund:'dog',	 katt:'cat',   selfie:'selfie', programmering:'programming' }\nSWE_GER = {	bord:'Tisch',	stol:'Stuhl',	hund:'Hund', katt:'Katze', selfie:'Selfie', programmering:'Programmierung' }\n\nswe2eng = (ord) ->\neng2swe = (ord) ->\n\nswe2ger = (ord) ->\nger2swe = (ord) ->\n\neng2ger = (ord) ->\nger2eng = (ord) ->",
      a: "swe2eng = (ord) -> SWE_ENG[ord]\neng2swe = (ord) -> _.invert(SWE_ENG)[ord]\n\nswe2ger = (ord) -> SWE_GER[ord]\nger2swe = (ord) -> _.invert(SWE_GER)[ord]\n\neng2ger = (ord) -> swe2ger eng2swe ord\nger2eng = (ord) -> swe2eng ger2swe ord\n",
      c: {
        "swe2eng 'bord'": 'table',
        "eng2swe 'dog'": 'hund',
        "swe2ger 'programmering'": 'Programmierung',
        "ger2swe 'Selfie'": 'selfie',
        "eng2ger 'cat'": 'Katze',
        "ger2eng 'Stuhl'": 'chair'
      },
      d: {
        "SWE_ENG['bord']": "table",
        "_.invert {a:1, b:2}": {
          "1": "a",
          "2": "b"
        }
      },
      e: {
        "_.invert": "http://underscorejs.org/#invert"
      }
    },
    "Glosor[]": {
      b: "SWE = [	'bord',	 'stol',  'hund', 'katt',  'selfie', 'programmering'  ]\nENG = [	'table', 'chair', 'dog',	'cat',   'selfie', 'programming'    ]\nGER = [	'Tisch', 'Stuhl', 'Hund', 'Katze', 'Selfie', 'Programmierung' ]\n\nswe2eng = (ord) ->\neng2swe = (ord) ->\n\nswe2ger = (ord) ->\nger2swe = (ord) ->\n\neng2ger = (ord) ->\nger2eng = (ord) ->",
      a: "swe2eng = (ord) -> ENG[SWE.indexOf(ord)]\neng2swe = (ord) -> SWE[ENG.indexOf(ord)]\n\nswe2ger = (ord) -> GER[SWE.indexOf(ord)]\nger2swe = (ord) -> SWE[GER.indexOf(ord)]\n\neng2ger = (ord) -> GER[ENG.indexOf(ord)]\nger2eng = (ord) -> ENG[GER.indexOf(ord)]\n",
      c: {
        "swe2eng 'bord'": 'table',
        "eng2swe 'dog'": 'hund',
        "swe2ger 'programmering'": 'Programmierung',
        "ger2swe 'Selfie'": 'selfie',
        "eng2ger 'cat'": 'Katze',
        "ger2eng 'Stuhl'": 'chair'
      },
      d: {
        "SWE.indexOf 'katt'": 3,
        "ENG[3]": "cat",
        "GER[3]": "Katze"
      }
    }
  },
  'A5: " "': {
    Introduktion: {
      b: "# LOC:8 length [] .. + \"\" indexOf split join for in\n\nantal = (s) -> 0\ntecken = (s,i) -> \"\"\nmitti = (s,i,j) -> \"\"\nkonkatenera = (s,t) -> \"\"\nleta = (s,t) -> 0\nsplittra = (s,avgr) -> []\nhopslagning = (a,avgr='') -> \"\"\ndubbla = (s) -> \"\"",
      a: "antal = (s) -> s.length\ntecken = (s,i) -> s[i]\nmitti = (s,i,j) -> s[i..j]\nkonkatenera = (s,t) -> s + t\nleta = (s,t) -> s.indexOf t\nsplittra = (s,avgr) -> s.split avgr\nhopslagning = (a,avgr='') -> a.join(avgr)\ndubbla = (s) -> hopslagning (tecken + tecken for tecken in s)",
      c: {
        'antal "Coffee"': 6,
        'tecken "Coffee",1': 'o',
        'mitti "Coffee",1,3': 'off',
        'mitti "Coffee",3,5': 'fee',
        'konkatenera "Coffee","script"': 'Coffeescript',
        'leta "Coffee","e"': 4,
        'leta "Coffee","x"': -1,
        "splittra '2 3 +',' '": ['2', '3', '+'],
        "hopslagning ['2', '3', '+'], '|'": "2|3|+",
        'dubbla "script"': 'ssccrriipptt'
      },
      d: {
        '"Javascript".length': 10,
        '"Javascript".indexOf "a"': 1,
        '"1,2,3".split ","': ["1", "2", "3"],
        '["1","2","3"].join " "': "1 2 3"
      },
      e: {
        '" "': "https://www.w3schools.com/jsref/jsref_obj_string.asp",
        split: "http://coffeescript-cookbook.github.io/chapters/strings/splitting-a-string",
        join: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",
        indexOf: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"
      }
    },
    Palindrom: {
      b: "# LOC:1 join reverse split \"\"\n# Ett palindrom blir samma ord om man vänder på det.\n# Ordet palindrom är inte ett palindrom.\n\npalindrom = (word) -> null",
      a: "palindrom = (word) -> word.split(\"\").reverse().join(\"\") == word",
      c: {
        "palindrom 'badrum'": false,
        "palindrom 'kök'": true,
        "palindrom 'kajak'": true,
        "palindrom 'kanot'": false
      },
      e: {
        reverse: "http://coffeescript-cookbook.github.io/chapters/arrays/reversing-arrays"
      }
    },
    Rövarspråk: {
      b: "# LOC:1 for in if then else + join '' ()\n\nrs = (word,extra='o') -> \"\"",
      a: "rs = (word,extra='o') -> ((if letter in 'aeiouy åäö' then letter else letter + extra + letter) for letter in word).join(\"\")",
      c: {
        "rs 'kalas fint'": 'kokalolasos fofinontot',
        "rs 'bokstav'": 'bobokoksostotavov',
        "rs 'kalas fint','i'": 'kikalilasis fifinintit',
        "rs 'bokstav','e'": 'bebokeksestetavev',
        "rs 'kalas fint','a'": 'kakalalasas fafinantat'
      }
    },
    Advanced: {
      b: "# LOC:8 _.some _.filter _.countBy length split reverse join == and for in continue\n\nexisterar = (word) ->\npalindromer = (n) -> []\nfrekvens = () ->  {}\nkorsord = (pattern) -> []\n\nwords = ordlista.split \" \"",
      a: "existerar = (word) -> _.some words, (w) -> w==word\npalindromer = (n) -> _.filter words, (w) -> w.length == n and w == w.split('').reverse().join('')\nfrekvens = () ->  _.countBy words, \"length\"\nmatch = (word,pattern) ->\n	for letter,i in pattern\n		if letter != '.' and letter != word[i] then	return false\n	true\nkorsord = (pattern) -> _.filter words, (w) -> w.length == pattern.length and match w,pattern\n\nwords = ordlista.split \" \"",
      c: {
        "existerar 'ajabaja'": true,
        "existerar 'selfie'": false,
        "palindromer 4": ["alla", "amma", "arra", "esse"],
        "palindromer 6": ["tillit"],
        "palindromer 7": ["ajabaja", "tätatät"],
        "frekvens()": {
          "4": 2573,
          "5": 4568,
          "6": 6769,
          "7": 10181,
          "8": 13578,
          "9": 14600
        },
        "korsord 'b..l'": ["ball", "bill", "boll", "bröl"]
      },
      d: {
        "words.length": 52269,
        "_.first words": "abakus",
        "_.last words": "övärld"
      },
      e: {
        '_.some': "http://underscorejs.org/#some",
        '_.filter': "http://underscorejs.org/#filter",
        '_.countBy': "http://underscorejs.org/#countBy"
      }
    }
  },
  "A6: Interpolation": {
    linearequation1: {
      b: "# LOC:1 *\n\nf = (x) -> 0",
      a: "f = (x) -> 2 * x",
      c: {
        "f 2": 4,
        "f 3": 6
      },
      e: {
        "Linjär interpolation": "https://en.wikipedia.org/wiki/Linear_interpolation"
      }
    },
    linearequation2: {
      b: "# LOC:1 * +\n\nf = (x) -> 0",
      a: "f = (x) -> 3 + 2 * x",
      c: {
        "f 2": 7,
        "f 3": 9
      },
      e: {
        "Linjär interpolation": "https://en.wikipedia.org/wiki/Linear_interpolation"
      }
    },
    lerp: {
      b: "# LOC:1 * + -\n\nlerp = (y1,y2,x) -> 0",
      a: "lerp = (y1,y2,x) -> y1 + (y2-y1) * x",
      c: {
        "lerp 10,16,-1": 4,
        "lerp 10,16,0": 10,
        "lerp 10,16,0.5": 13,
        "lerp 10,16,1": 16,
        "lerp 10,16,2": 22
      },
      e: {
        "Linjär interpolation": "https://en.wikipedia.org/wiki/Linear_interpolation",
        lerp: "https://p5js.org/reference/#/p5/lerp"
      }
    },
    map: {
      b: "# LOC:1 * + - /\n\nmap = (x,x1,x2,y1,y2) -> 0",
      a: "map = (x,x1,x2,y1,y2) -> y1 + (y2-y1) * (x-x1)/(x2-x1)",
      c: {
        "map 0,1,3,20,40": 10,
        "map 1,1,3,20,40": 20,
        "map 2,1,3,20,40": 30,
        "map 3,1,3,20,40": 40,
        "map 75,50,100,0,1": 0.5,
        "map 16,0,40,0,200": 80
      },
      e: {
        map: "https://p5js.org/reference/#/p5/map"
      }
    },
    Hour2Degree: {
      b: "# LOC:1 map + - * / %\n\nh2d = (x) -> 0",
      a: "h2d = (x) -> map(15-x,0,12,0,360) % 360",
      c: {
        "h2d 0": 90,
        "h2d 1": 60,
        "h2d 2": 30,
        "h2d 3": 0,
        "h2d 4": 330,
        "h2d 5": 300,
        "h2d 6": 270,
        "h2d 7": 240,
        "h2d 8": 210,
        "h2d 9": 180,
        "h2d 10": 150,
        "h2d 11": 120,
        "h2d 12": 90
      }
    },
    Hour2Radian: {
      b: "# LOC:1 map + - * / % Math.PI\n\nh2r = (x) -> 0",
      a: "h2r = (x) -> (map 15-x,0,12,0,2*Math.PI) % (2*Math.PI)",
      c: {
        "h2r 0": 3 * Math.PI / 6,
        "h2r 3": 0 * Math.PI / 6,
        "h2r 4": 11 * Math.PI / 6,
        "h2r 5": 10 * Math.PI / 6,
        "h2r 6": 9 * Math.PI / 6,
        "h2r 7": 8 * Math.PI / 6,
        "h2r 9": 6 * Math.PI / 6,
        "h2r 10": 5 * Math.PI / 6,
        "h2r 11": 4 * Math.PI / 6,
        "h2r 12": 3 * Math.PI / 6
      }
    }
  },
  "A7: class": {
    Kid: {
      b: "# LOC:8 class constructor new @ [] for in length + /\n# Innan du löser denna uppgift: Be att få se Bouncing Balls!\n# LOC betyder Lines Of Code, dvs antal kodrader.\n# Åtta kodrader är lagom för detta problem.\n# Färre innebär sämre läsbarhet.\n# Har du fler bör du fundera på en kortare lösning.\n\nclass Kid\n	constructor : (name,age) ->\n\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\n\nnames = (kids) -> []\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\naverage = (numbers) -> 0\n",
      a: "\nclass Kid\n	constructor : (@name,@age) ->\n	\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\n\nnames = (kids) -> kid.name for kid in kids\n	\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n\naverage = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "average ages girls": 11,
        "average ages boys": 9.5
      },
      e: {
        "class": "http://blog.teamtreehouse.com/the-absolute-beginners-guide-to-coffeescript"
      }
    },
    Bråktal: {
      b: "# LOC:8 class constructor new @ if then else * + - / % ==\n\ngcd = (a,b) -> 1\n\nclass Fraction\n	constructor : (a,b) ->\n	to_s : -> \"1/1\"\n	add : (o) -> new Fraction 1,1\n	sub : (o) -> new Fraction 1,1\n	mul : (o) -> new Fraction 1,1\n	div : (o) -> new Fraction 1,1",
      a: "gcd = (a,b) -> if b == 0 then a else gcd b, a % b\n\nclass Fraction\n	constructor : (@a,@b) -> [@a,@b] = [@a/gcd(@a,@b), @b/gcd(@a,@b)]\n	to_s : -> @a + \"/\" + @b\n	add : (o) -> new Fraction @a*o.b+@b*o.a, @b*o.b\n	sub : (o) -> new Fraction @a*o.b-@b*o.a, @b*o.b\n	mul : (o) -> new Fraction @a*o.a, @b*o.b\n	div : (o) -> new Fraction @a*o.b, @b*o.a",
      c: {
        "gcd 2,4": 2,
        "gcd 15,25": 5,
        "(new Fraction 2,4).to_s()": "1/2",
        "(new Fraction 3,8).to_s()": "3/8",
        "(new Fraction 1,2).add(new Fraction 1,3).to_s()": "5/6",
        "(new Fraction 1,2).sub(new Fraction 1,3).to_s()": "1/6",
        "(new Fraction 4,6).mul(new Fraction 1,3).to_s()": "2/9",
        "(new Fraction 4,6).div(new Fraction 2,1).to_s()": "1/3"
      },
      e: {
        Bråktal: "http://www.matteboken.se/lektioner/skolar-7/brak-och-procent/braktal"
      }
    },
    Simplex: {
      b: "# LOC:14 class constructor new [] @	+ - *\n# Tips: Spela p5Complex innan du påbörjar denna övning.\n\nclass Simplex\n	constructor : (x,y) ->\n	translate : -> @\n	scale : -> @\n	rotate : -> @\n	mirror : -> @\n\na = new Simplex 1,3\nb = new Simplex -2,4",
      a: "class Simplex\n	constructor : (@x,@y) ->\n	translate : ->\n		@x += 1\n		@\n	scale : ->\n		[@x,@y] = [2*@x,2*@y]\n		@\n	rotate : ->\n		[@x,@y] = [-@y,@x]\n		@\n	mirror : ->\n		[@x,@y] = [@y,@x]\n		@",
      c: {
        "pp a": "{x:1,y:3}",
        "pp a.translate()": "{x:2,y:3}",
        "pp a.scale()": "{x:2,y:6}",
        "pp a.rotate()": "{x:-3,y:1}",
        "pp a.mirror()": "{x:3,y:1}",
        "pp a.translate().scale()": "{x:4,y:6}",
        "pp a.scale().translate()": "{x:3,y:6}",
        "pp b": "{x:-2,y:4}",
        "pp b.translate()": "{x:-1,y:4}",
        "pp b.scale()": "{x:-4,y:8}",
        "pp b.rotate()": "{x:-4,y:-2}",
        "pp b.mirror()": "{x:4,y:-2}",
        "pp b.translate().scale()": "{x:-2,y:8}",
        "pp b.scale().translate()": "{x:-3,y:8}",
        "pp b.mirror().mirror()": "{x:-2,y:4}",
        "pp b.rotate().rotate().rotate().rotate()": "{x:-2,y:4}"
      },
      e: {
        p5Complex: "https://christernilsson.github.io/p5Complex/www"
      }
    },
    Bignum: {
      b: "# LOC:22 class constructor new @ parseInt reverse length push floor slice unshift join for if\n# Med Bignum kan man räkna exakt med tal med tusentals siffor.\n# Du programmerar på samma sätt som om du räknar med papper och penna.\n# Multiplikationen använder sig av additionen samt inskiftande av noll för varje siffra.\n\nclass Bignum\n	constructor : (s) -> @list=[]\n	to_s : () -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7",
      a: "\n# observera att reverse() vänder PÅ plats.\n# clona därför med slice() i t ex to_s\n#reversera = (arr) -> arr.slice().reverse()\n\nclass Bignum\n	constructor : (s) ->\n		@list = (parseInt(ch) for ch in s)\n		@list.reverse()\n\n	to_s : () -> @list.slice().reverse().join(\"\")\n\n	add : (other) ->\n		if @list.length < other.list.length then return other.add @\n		carry = 0\n		res = new Bignum \"\"\n		for d1, pos in @list\n			d = d1 + (other.list[pos] || 0) + carry\n			res.list.push d % 10\n			carry = Math.floor d / 10\n		if carry then res.list.push 1\n		res\n\n	mul : (other) ->\n		res = new Bignum \"\"\n		for digit,d in other.list.slice().reverse()\n			for i in range digit\n				res = res.add @\n			if d < other.list.length-1 then res.list.unshift 0\n		res\n\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7\n",
      c: {
        "a.list": [3, 2, 1],
        "a.to_s()": "123",
        "a.add(b).to_s()": "131",
        "b.add(a).to_s()": "131",
        "a.add(c).to_s()": "1122",
        "a.add(b).add(c).to_s()": "1130",
        "e.add(f).to_s()": "12345678901234567891",
        "g.to_s()": "1267650600228229401496703205376",
        "a.mul(b).to_s()": "984",
        "a.mul(c).to_s()": "122877",
        "a.mul(d).to_s()": "56088",
        "h.to_s()": "340282366920938463463374607431768211456"
      },
      d: {
        "parseInt '1'": 1,
        "[1,2,3].reverse()": [3, 2, 1],
        "[1,2,3].length": 3,
        "Math.floor 3.14": 3,
        "[11,22,33].slice 1": [22, 33],
        "[11,22,33].slice 1,2": [22],
        "[11,22,33].slice()": [11, 22, 33],
        "12345678901234567890 + 1": 12345678901234567000
      },
      e: {
        Bignum: "https://sv.wikipedia.org/wiki/Bignum-aritmetik"
      }
    },
    Complex: {
      b: "# LOC:31 class constructor new @ -> if + * == > <\n# Börja med att få bort onödiga nollor och ettor i to_s!\n\nclass Complex\n	constructor : (@x,@y) ->\n	to_s : -> @x + \" \" + @y + \"i\"\n	add : (other) -> @\n	mul : (other) -> @",
      a: "class Complex\n	constructor : (@x,@y) ->\n	add : (other) ->\n		new Complex @x+other.x, @y+other.y\n	mul : (other) ->\n		a = @x\n		b = @y\n		c = other.x\n		d = other.y\n		new Complex a*c-b*d, b*c+a*d\n	to_s : ->\n		sx = \"\" if @x == 0\n		sx = \"" + this.x + "\" if @x > 0\n		sx = \"" + this.x + "\" if @x < 0\n\n		sy = \"\" if @y == 0\n		sy = \"-i\" if @y == -1\n		sy = \"i\" if @y == 1\n		sy = \"" + this.y + "i\" if @y > 1\n		sy = \"" + this.y + "i\" if @y < -1\n\n		if sx!=\"\" and sy!=\"\"\n			if @y < 0\n				s = sx+sy\n			else if @y==0\n				s = sx\n			else\n				s = sx + \"+\" + sy\n		else if @x==0 and @y==0\n			s = \"0\"\n		else\n			s = sx + sy\n		s",
      c: {
        "new Complex(-1,0).to_s()": "-1",
        "new Complex(-1,-1).to_s()": "-1-i",
        "new Complex(0,-1).to_s()": "-i",
        "new Complex(0,0).to_s()": "0",
        "new Complex(0,1).to_s()": "i",
        "new Complex(1,-2).to_s()": "1-2i",
        "new Complex(1,-1).to_s()": "1-i",
        "new Complex(1,0).to_s()": "1",
        "new Complex(1,1).to_s()": "1+i",
        "new Complex(1,2).to_s()": "1+2i",
        "new Complex(1,2).add(new Complex(1,-1)).to_s()": "2+i",
        "new Complex(1,2).mul(new Complex(1,-1)).to_s()": "3+i"
      },
      e: {
        "Komplexa tal": "https://sv.wikipedia.org/wiki/Komplexa_tal"
      }
    },
    Polynom: {
      b: "# LOC:52 class constructor new [] @ or for in range length ** push reverse join " + "\n# Uppgiften innehåller matematik på gymnasienivå.\n\nclass Polynom\n	constructor : (lst) -> @lst=[]\n	to_s : -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n	power : (n) -> @\n	value : (x) -> 0\n	diff : -> @\n	integ : -> @\n	compose : (other)	-> @\n",
      a: "class Polynom\n	constructor : (@lst) ->\n\n	add : (other) ->\n		h = []\n		h[i] = (h[i] or 0) + value for value,i in @lst\n		h[i] = (h[i] or 0) + value for value,i in other.lst\n		new Polynom h\n\n	mul : (other) ->\n		h = (0 for i in range @lst.length + other.lst.length - 1)\n		for value1,i1 in @lst\n			for value2,i2 in other.lst\n				i = i1+i2\n				h[i] = (h[i] or 0) + value1 * value2\n		new Polynom h\n\n	power : (n) ->\n		res = new Polynom [1]\n		res = res.mul @ for i in range n\n		res\n\n	compose : (other)	->\n		res = new Polynom []\n		for value,i in @lst\n			res = res.add (new Polynom [value]).mul other.power i\n		res\n\n	value : (x) ->\n		res = 0\n		res += value * x ** i for value,i in @lst\n		res\n\n	diff : ->\n		lst = []\n		for value,i in @lst\n			if i != 0 then lst[i-1] = i*value\n		new Polynom lst\n\n	integ : ->\n		lst = [0]\n		for value,i in @lst\n			i += 1\n			lst[i] = value/i\n		new Polynom lst\n\n	to_s : ->\n		arr = []\n		for item,i in @lst\n			if item == 0 then continue\n			if item == 1\n				if i==0 then arr.push \"1\"\n				else if i==1 then arr.push \"x\"\n				else arr.push \"x^\" + i\n			else\n				if i==0 then arr.push item\n				else if i==1 then arr.push item + \"*x\"\n				else arr.push item + \"*x^\" + i\n		arr.reverse()\n		arr.join \"+\"",
      c: {
        "(new Polynom [5,4,3]).lst": [5, 4, 3],
        "(new Polynom [4,3]).lst": [4, 3],
        "(new Polynom [5,4,3]).to_s()": "3*x^2+4*x+5",
        "(new Polynom [0,0,1]).to_s()": "x^2",
        "(new Polynom [5,4,3]).add(new Polynom [4,3]).to_s()": "3*x^2+7*x+9",
        "(new Polynom [5,4,3]).mul(new Polynom [4,3]).to_s()": "9*x^3+24*x^2+31*x+20",
        "(new Polynom [5,4,3]).value(2)": 25,
        "(new Polynom [5,4,3]).power(2).lst": [25, 40, 46, 24, 9],
        "(new Polynom [4,3]).power(3).lst": [64, 144, 108, 27],
        "(new Polynom [5,4,3]).diff().lst": [4, 6],
        "(new Polynom [5,4,3]).integ().lst": [0, 5, 2, 1],
        "(new Polynom [0,0,1]).integ().to_s()": "0.3333333333333333*x^3",
        "(new Polynom [0,0,1]).integ().value(3)": 9,
        "(new Polynom [3,2]).compose(new Polynom [3,2]).lst": [9, 4],
        "(new Polynom [3,2]).compose(new Polynom [5,0,-1]).lst": [13, 0, -2],
        "(new Polynom [5,0,-1]).compose(new Polynom [3,2]).lst": [-4, -12, -4],
        "(new Polynom [5,0,-1]).compose(new Polynom [5,0,-1]).lst": [-20, 0, 10, 0, -1]
      },
      e: {
        Polynom: "http://www.matteboken.se/lektioner/matte-2/algebra/polynom",
        Polynomfunktioner: "http://www.matteboken.se/lektioner/matte-3/polynom-och-ekvationer/polynomfunktioner",
        "Multiplikation": "http://www.matteboken.se/lektioner/matte-3/polynom-och-ekvationer/multiplikation-av-polynom",
        "Polynom, wikipedia": "https://sv.wikipedia.org/wiki/Polynom"
      }
    },
    Nian: {
      b: "# LOC:20 class constructor new @ split for in of reduce ** & and push \"\" indexOf > if then _.countBy\n# Bilda ord med fyra till nio bokstäver. Den mittersta bokstaven måste ingå.\n\nclass Nian\n	constructor : (lista=words) ->\n	bits : (word) -> 0\n	solve : (letters) -> []\n\nwords = ordlista.split \" \"\nnian = new Nian()",
      a: "\nclass Nian\n	constructor : (@words=words) ->\n		@patterns = (@bits word for word in @words)\n\n	bits : (word) -> word.split(\"\").reduce ((acc,ch) -> acc|(2 ** \"abcdefghijklmnopqrstuvwxyzåäö\".indexOf ch)), 0\n	ok : (f1,f2) ->\n		for ch, f of f2\n			if f > f1[ch] then return false\n		true\n\n	solve : (letters) ->\n		mandatory = letters[4]\n		res = []\n		p = @bits letters\n		letters1 = letters.split \"\"\n		freq1 = _.countBy letters1\n		for pattern,i in @patterns\n			if (p & pattern) == pattern\n				letters2 = @words[i].split \"\"\n				freq2 = _.countBy letters2\n				if @ok(freq1,freq2) and mandatory in letters2 then res.push @words[i]\n		res\nwords = ordlista.split \" \"\nnian = new Nian()",
      c: {
        "nian.bits 'a'": 1,
        "nian.bits 'b'": 2,
        "nian.bits 'c'": 4,
        "nian.bits 'abba'": 3,
        "nian.bits 'aaaacklmn'": 15365,
        "nian.bits 'mack'": 5125,
        "nian.solve 'aaaacklmn'": ["almanacka", "anacka", "lack", "lacka", "mack", "macka", "mackla", "nacka"],
        "nian.solve 'eemncrrtö'": ["cement", "cementrör", "cent", "center", "cert", "crème", "recent"],
        "nian.solve('rakeutraf').length": 34
      },
      d: {
        "words.length": 52269,
        "_.first words": "abakus",
        "_.last words": "övärld"
      },
      e: {
        Nian: "http://svenska-apps.se/iphone-ipad/underhallning/svd-nian-babqpg.html"
      }
    }
  },
  "A8: Advanced": {
    path: {
      b: "# LOC:1 concat if then else\n\ntree = {3:0, 4:8, 5:3, 6:3, 10:5, 7:5, 12:6, 8:6, 20:10, 9:7, 24:12, 14:12}\n\npath = (tree,x) -> []",
      a: "path = (tree,x) -> if x==0 then return [] else [x].concat path tree,tree[x]",
      c: {
        "path tree, 4": [4, 8, 6, 3],
        "path tree, 20": [20, 10, 5, 3],
        "path tree, 9": [9, 7, 5, 3]
      }
    },
    summa: {
      b: "# LOC:1 _.isEqual _.isNumber _.head _.tail\n\nsumma = (tree) -> 0",
      a: "summa = (tree) -> return if _.isEqual tree,[] then 0 else if _.isNumber tree then tree else	summa(_.head tree) + summa _.tail tree",
      c: {
        "summa [1,2,3,4]": 10,
        "summa [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 161
      },
      d: {
        "_.isNumber '12'": false,
        "_.isNumber 12": true,
        "_.isNumber [12]": false,
        "_.head [11,22,33]": 11,
        "_.tail [11,22,33]": [22, 33]
      },
      e: {
        "_.isEqual": "http://underscorejs.org/#isEqual",
        "_.isNumber": "http://underscorejs.org/#isNumber",
        "_.head": "http://underscorejs.org/#head",
        "_.tail": "http://underscorejs.org/#tail"
      }
    },
    "list recursion": {
      b: "# LOC:7 typeof if then else for in range min length\n# Lägg märke till javascripts felaktiga hantering av tal vid jämförelse av listor.\n\ncompare = (a,b) -> -2\n",
      a: "compare = (a,b) ->\n	if typeof a != \"object\"\n		if a > b then return -1 else if a < b then return 1 else return 0\n	for i in range min a.length,b.length\n		c = compare a[i],b[i]\n		if c != 0 then return c\n	0",
      c: {
        "compare 11, 2": -1,
        "compare [11], [2]": -1,
        "compare [11], [10]": -1,
        "compare [11], [11]": 0,
        "compare [2], [11]": 1,
        "compare [1,[2,3]], [1,[2,3]]": 0,
        "compare [10,[2,3]], [1,[2,3]]": -1,
        "compare [1,[20,3]], [1,[2,3]]": -1,
        "compare [1,[2,30]], [1,[2,3]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,23]], [[12,13],14]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 0,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,25]], [[12,13],14]]": 1
      },
      d: {
        "typeof 1": "number",
        "typeof 3.14": "number",
        'typeof ""': "string",
        "typeof []": "object",
        "typeof {}": "object",
        "min 1,2": 1,
        "min 2,1": 1,
        "11 > 2": true,
        "[11] > [2]": false,
        "[11] > [10]": true,
        "11 == 11": true,
        '"11" == "11"': true,
        "[11] == [11]": false
      }
    },
    filter: {
      b: "# LOC:1 filter\n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\ng = (djur, art) -> []\n",
      a: "g = (djur, art) -> djur.filter (d) -> d.art == art\n",
      c: {
        "g djur,'hund'": [
          {
            namn: 'Karo',
            art: 'hund'
          }, {
            namn: 'Rocky',
            art: 'hund'
          }
        ],
        "g djur,'fisk'": [
          {
            namn: 'Albert',
            art: 'fisk'
          }, {
            namn: 'Herbert',
            art: 'fisk'
          }
        ],
        "g djur,'kanin'": [
          {
            namn: 'Fluffy',
            art: 'kanin'
          }
        ],
        "g djur,'katt'": [
          {
            namn: 'Trixie',
            art: 'katt'
          }
        ],
        "g djur,'papegoja'": []
      },
      d: {
        "[1, -2, 0, 3, -4].filter (x) -> x > 0": [1, 3]
      },
      e: {
        filter: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
      }
    },
    comprehension: {
      b: "# LOC:1 for\n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\nnamn = (djur) -> []\n",
      a: "namn = (djur) -> (d.namn for d in djur)",
      c: {
        "namn djur": ['Fluffy', 'Karo', 'Rocky', 'Albert', 'Trixie', 'Herbert']
      },
      d: {
        "(2**i for i in range 5)": [1, 2, 4, 8, 16]
      },
      e: {
        comprehension: "https://coffeescript-cookbook.github.io/chapters/arrays/list-comprehensions"
      }
    },
    reduce: {
      b: "# LOC:1 reduce\n\nica = [\n	{pris: 123, antal:1}\n	{pris: 34, antal:2}\n	{pris: 78, antal:4}\n	{pris: 96, antal:5}\n]\nkonsum = [\n	{pris: 100, antal:1}\n	{pris: 30, antal:1}\n	{pris: 70, antal:1}\n	{pris: 90, antal:1}\n]\n\nsumma = (varor) -> 0",
      a: "summa = (varor) -> varor.reduce ((sum, vara) -> sum + vara.pris * vara.antal), 0",
      c: {
        "summa ica": 983,
        "summa konsum": 290
      },
      d: {
        "ica.reduce ((sum, vara) -> sum + vara.antal), 0": 12,
        "konsum.reduce ((sum, vara) -> sum + vara.pris), 0": 290
      },
      e: {
        reduce: "https://coffeescript-cookbook.github.io/chapters/arrays/reducing-arrays"
      }
    },
    sortBy: {
      b: "# LOC:1 _.sortBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\nsortera = (djur,f) -> []",
      a: "sortera = (djur,f) -> _.sortBy djur, f",
      c: {
        "sortera djur, (d) -> d.length": ["Karo", "Rocky", "Fluffy", "Albert", "Trixie", "Herbert"],
        "sortera djur": ["Albert", "Fluffy", "Herbert", "Karo", "Rocky", "Trixie"]
      },
      d: {
        "_.sortBy ['one', 'two', 'three', 'four'], 'length'": ["one", "two", "four", "three"]
      },
      e: {
        "_.sortBy": "http://underscorejs.org/#sortBy"
      }
    },
    groupBy: {
      b: "# LOC:1 _.groupBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\ngruppera = (djur,f) -> {}",
      a: "gruppera = (djur,f) -> _.groupBy djur, f",
      c: {
        "gruppera djur, (d) -> d.length": {
          "4": ["Karo"],
          "5": ["Rocky"],
          "6": ["Fluffy", "Albert", "Trixie"],
          "7": ["Herbert"]
        },
        "gruppera djur, (d) -> _.last(d)": {
          "y": ["Fluffy", "Rocky"],
          "o": ["Karo"],
          "t": ["Albert", "Herbert"],
          "e": ["Trixie"]
        }
      },
      d: {
        "_.groupBy ['one', 'two', 'three'], 'length'": {
          3: ["one", "two"],
          5: ["three"]
        }
      },
      e: {
        "_.groupBy": "http://underscorejs.org/#groupBy"
      }
    },
    split: {
      b: "# LOC:1 split for in _.object\n\nparametrar = (url) -> {}",
      a: "parametrar = (url) -> _.object(f.split '=' for f in url.split('?')[1].split('&'))",
      c: {
        "parametrar 'dn.se?x=0&y=1'": {
          x: '0',
          y: '1'
        },
        "parametrar 'svd.se?page=7'": {
          page: '7'
        },
        "parametrar 'aftonbladet.se?article=123456&date=2016-12-01'": {
          article: '123456',
          date: '2016-12-01'
        },
        "parametrar 'expressen.se?city=Stockholm'": {
          city: 'Stockholm'
        },
        "parametrar 'http://stackoverflow.com/search?q=coffeescript'": {
          q: 'coffeescript'
        }
      },
      d: {
        "'1,2,3'.split ','": ["1", "2", "3"],
        "_.object ['moe', 'larry', 'curly'], [30, 40, 50]": {
          moe: 30,
          larry: 40,
          curly: 50
        },
        "_.object [['moe', 30], ['larry', 40], ['curly', 50]]": {
          moe: 30,
          larry: 40,
          curly: 50
        }
      },
      e: {
        "_.object": "http://underscorejs.org/#object",
        split: "https://coffeescript-cookbook.github.io/chapters/strings/splitting-a-string"
      }
    },
    PokerHand: {
      b: "# LOC:10 nilsson: compare bsort underscore: _.size _.groupBy _.unzip _.uniq \"\" [] {}\n# javascript: for in if then else substring length parseInt split indexOf\n\npoker = (a,b) -> -2",
      a: "poker = (a,b) -> compare calc(a.split(\" \")), calc(b.split(\" \"))\ncalc = (hand) ->\n	groups = _.groupBy('  23456789TJQKA'.indexOf(card[2]) for card in hand)\n	[score, ranks] = _.unzip reverse bsort ([cnt.length, parseInt(rank)] for rank, cnt of groups)\n	if score.length == 5\n		if compare(ranks, [14,5,4,3,2])==0 then ranks = [5,4,3,2,1]\n		straight = if ranks[0] - ranks[4] == 4 then 1 else 0\n		flush = if _.size(_.uniq(suit.substring(0,2) for suit in hand)) == 1 then 1 else 0\n		score = [[[1], [3,1,1,1]], [[3,1,1,2], [5]]][flush][straight]\n	[score, ranks]",
      c: {
        "poker 'kl8 ruA ru8 klA kl9', 'ru7 sp2 ru5 sp3 klA'": -1,
        "poker 'kl8 spT klK hj9 sp4', 'ru7 sp2 ru5 sp3 klA'": 1,
        "poker 'kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA klT'": 1,
        "poker 'kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA kl7'": -1,
        "poker 'kl8 ruA ru8 klA kl9', 'klT ruA ruT klA kl9'": 1,
        "poker 'spA sp2 sp3 sp4 sp5', 'ruA ru2 ru3 ru4 ru5'": 0,
        "poker 'spA hjA ruA klA sp5', 'ruA ru2 ru3 ru4 ru5'": 1,
        "poker 'ru7 sp7 hj7 kl7 spJ', 'ru6 sp5 hj6 kl6 spQ'": -1,
        "poker 'ru8 sp8 hj8 kl9 sp9', 'ru6 sp6 hj6 ru9 hj9'": -1,
        "poker 'ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'": 0,
        "poker 'ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'": 0,
        "poker 'ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'": 0,
        "poker 'ru7 hj8 ru9 hj5 ru6', 'hj7 ru8 kl9 hjT sp6'": 1,
        "poker 'ru7 hj8 ru8 kl8 ruJ', 'kl7 hj9 ru9 kl9 ruQ'": 1,
        "poker 'ru7 hj7 ru8 kl8 ruJ', 'sp7 kl7 sp8 hj8 ruT'": -1,
        "poker 'hj7 kl3 sp3 kl4 hjA', 'sp7 hj3 ru3 klK spA'": 1,
        "poker 'sp7 hj3 ru2 kl4 spA', 'hj7 ru3 ru5 sp4 hjA'": 1
      },
      d: {
        '[1,2,3] == [1,2,3]': false,
        '2 < 11': true,
        '"2" < "11"': false,
        '[2] < [11]': false,
        '["2"] < ["11"]': false,
        'compare [2], [11]': 1,
        'compare [1,2,3], [1,2,3]': 0,
        'compare [11], [2]': -1,
        'bsort [47,12,25]': [12, 25, 47],
        'bsort [[11,13],[11,12],[2,2]]': [[2, 2], [11, 12], [11, 13]],
        'bsort [[11,13],[11,12],[2,2]], (a,b) -> compare b,a': [[11, 13], [11, 12], [2, 2]],
        'bsort ["per", "anna", "bo"]': ["anna", "bo", "per"],
        '_.groupBy ["per", "anna", "karl"], "length"': {
          "3": ["per"],
          "4": ["anna", "karl"]
        },
        '_.unzip [["moe", 30, true], ["larry", 40, false]]': [['moe', 'larry'], [30, 40], [true, false]],
        '_.uniq [5,4,1,2,1,9]': [5, 4, 1, 2, 9]
      },
      e: {
        Pokerhand: "https://sv.wikipedia.org/wiki/Pokerhand",
        "_.size": "http://underscorejs.org/#size",
        "_.unzip": "http://underscorejs.org/#unzip",
        "_.uniq": "http://underscorejs.org/#uniq"
      }
    },
    Matematik: {
      b: "# LOC:17 if then else * / + - % ** Math.sqrt == <= for in range [] concat\n\na = (x) -> 0 \nb = (x) -> 0 \nc = (x) -> 0 \nd = (x) -> 0 \ne = (x) -> 0 \nh = (n) -> 0\nf = (x) -> 0 \ng = (n) -> 0\nk = (x,y) -> 0\nl = (a,b) -> [0,0]\np = (a,b) -> 0\nn = (y) -> false\nm = (n) -> []\nq = (n) -> []",
      a: "a = (n) -> 2*n+1\nb = (n) -> 2*n+2\nc = (n) -> (-1)**n * n\nd = (n) -> 10**n\ne = (n) -> 2**n\nh = (n) -> if n==0 then 0 else n+h(n-1)\nf = (n) -> if n==0 then 1 else n*f(n-1)\ng = (n) -> if n<=1 then 1 else g(n-1) + g(n-2)\nk = (x,y) -> if y == 0 then x else k y, x % y\nl = (a,b) -> [a/k(a,b),b/k(a,b)]\np = (a,b) -> Math.sqrt(a*a+b*b)\nn = (y) -> if y%100==0 then y%400==0 else y%4==0\nm = (n) -> i for i in [2...n] when n % i == 0\nq = (n) ->\n	for i in range n-1,1,-1\n		v = i if n%i==0\n	if v then [v].concat q(n/v) else [n]",
      c: {
        "a(i) for i in range 12": [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23],
        "b(i) for i in range 12": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24],
        "c(i) for i in range 12": [0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11],
        "d(i) for i in range 6": [1, 10, 100, 1000, 10000, 100000],
        "e(i) for i in range 10": [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],
        "h(i) for i in range 12": [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66],
        "f(i) for i in range 9": [1, 1, 2, 6, 24, 120, 720, 5040, 40320],
        "g(i) for i in range 12": [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144],
        "[k(7,11),k(18,42),k(100,30),k(99,105)]": [1, 6, 10, 3],
        "[l(1,4),l(2,4),l(12,18),l(90,100)]": [[1, 4], [1, 2], [2, 3], [9, 10]],
        "[p(3,4),p(5,12),p(7,24),p(9,40),p(11,60)]": [5, 13, 25, 41, 61],
        "[n(2000),n(2016),n(2017),n(2020),n(2100)]": [true, true, false, true, false],
        "[m(17),m(60)]": [[], [2, 3, 4, 5, 6, 10, 12, 15, 20, 30]],
        "[q(17),q(60)]": [[17], [2, 2, 3, 5]]
      },
      e: {
        rekursion: "http://www.matteboken.se/lektioner/matte-5/talfoljder-och-induktionsbevis/rekursion",
        talserier: "http://www.matteboken.se/lektioner/matte-3/ovningsexempel/talserier",
        pythagoras: "http://www.matteboken.se/lektioner/skolar-9/geometri/pythagoras-sats",
        delbarhet: "http://www.matteboken.se/lektioner/matte-1/tal/delbarhet"
      }
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFNQSxJQUFBOztBQUFBLElBQUEsR0FFQztFQUFBLFNBQUEsRUFDQztJQUFBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRSw2UUFBRjtNQVVBLENBQUEsRUFBRSxFQVZGO01BV0EsQ0FBQSxFQUNDO1FBQUEsaUNBQUEsRUFBb0MsNEVBQXBDO09BWkQ7S0FERDtHQUREO0VBZ0JBLG1CQUFBLEVBQ0M7SUFBQSxJQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsNDVCQUFIO01Ba0JBLENBQUEsRUFBRyxpQkFsQkg7TUFtQkEsQ0FBQSxFQUNDO1FBQUEsUUFBQSxFQUFXLENBQVg7UUFDQSxRQUFBLEVBQVcsQ0FEWDtPQXBCRDtNQXNCQSxDQUFBLEVBQ0M7UUFBQSxTQUFBLEVBQVkscURBQVo7T0F2QkQ7S0FERDtJQTBCQSxLQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcseVFBQUg7TUFRQSxDQUFBLEVBQUcsb0JBUkg7TUFTQSxDQUFBLEVBQ0M7UUFBQSxTQUFBLEVBQVksQ0FBWjtRQUNBLFNBQUEsRUFBWSxDQURaO09BVkQ7TUFZQSxDQUFBLEVBQ0M7UUFBQSxPQUFBLEVBQVUsQ0FBVjtRQUNBLE9BQUEsRUFBVSxDQURWO09BYkQ7TUFlQSxDQUFBLEVBQ0M7UUFBQSxTQUFBLEVBQVkscURBQVo7T0FoQkQ7S0EzQkQ7SUE2Q0EsSUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLHdEQUFIO01BS0EsQ0FBQSxFQUFHLG1CQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsUUFBQSxFQUFXLEVBQVg7UUFDQSxRQUFBLEVBQVcsRUFEWDtPQVBEO01BU0EsQ0FBQSxFQUNDO1FBQUEsT0FBQSxFQUFVLENBQVY7UUFDQSxPQUFBLEVBQVUsQ0FEVjtPQVZEO01BWUEsQ0FBQSxFQUNDO1FBQUEsU0FBQSxFQUFZLHFEQUFaO09BYkQ7S0E5Q0Q7SUE2REEsS0FBQSxFQUND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QUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxFQUFYLEVBQWMsRUFBZCxFQUFpQixFQUFqQixFQUFvQixFQUFwQixFQUF1QixFQUF2QixDQUFKLENBWmxCO1FBYUEsZUFBQSxFQUFrQixDQUFDLENBQUMsRUFBRCxDQUFELEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBQU4sQ0FibEI7T0F0Q0Q7TUFvREEsQ0FBQSxFQUNDO1FBQUEsU0FBQSxFQUFZLHFGQUFaO1FBQ0EsU0FBQSxFQUFZLHFFQURaO1FBRUEsVUFBQSxFQUFhLHNFQUZiO1FBR0EsU0FBQSxFQUFZLDBEQUhaO09BckREO0tBMVNEO0dBN3FERCIsInNvdXJjZXNDb250ZW50IjpbIiMgYiA6IGNvbW1lbnQgbGluZS4gTE9DIGFuZCBrZXl3b3JkIGNsdWVzXHJcbiMgYSA6IFNvbHV0aW9uIGluIENvZmZlZXNjcmlwdC4gXHJcbiMgYyA6IGNhbGwgaW4gQ29mZmVlc2NyaXB0IHN5bnRheCwgdGhyZWUgY29sdW1uc1xyXG4jIGQgOiBheGlvbXMsIHR3byBjb2x1bW5zXHJcbiMgZSA6IGxpbmtzXHJcblxyXG5kYXRhID1cclxuXHJcblx0XCJOeWhldGVyXCIgOlxyXG5cdFx0XCJOeWhldGVyXCIgOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIE5ZSEVURVIgMjAxNyBNYXJzXHJcbiMgICBBMzogSW50cm9kdWt0aW9uLCBOaW0sIFNvcnQsIFbDpHhlbGN5a2VsLCBLYWxreWxhdG9yXHJcbiMgICBBNDogRWFydGgsIEdsb3NvciwgR2xvc29yW11cclxuIyAgIEE1OiBQYWxpbmRyb20sIFLDtnZhcnNwcsOlaywgQWR2YW5jZWRcclxuIyAgIEE3OiBCaWdudW0sIEJyw6VrdGFsLCBTaW1wbGV4LCBDb21wbGV4LCBOaWFuXHJcbiMgICBBODogTGlzdCByZWN1cnNpb24sIFBva2VyaGFuZCwgTWF0ZW1hdGlrXHJcblxyXG4jIEtsaWNrYSBudSBww6UgQTAhXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRcIkJlZ2lubmVycyBHdWlkZSB0byBDb2ZmZWVzY3JpcHRcIiA6IFwiaHR0cDovL2Jsb2cudGVhbXRyZWVob3VzZS5jb20vdGhlLWFic29sdXRlLWJlZ2lubmVycy1ndWlkZS10by1jb2ZmZWVzY3JpcHRcIlxyXG5cclxuXHRcIkEwOiBPbmUgUGFyYW1ldGVyXCIgOlxyXG5cdFx0VHVyZSA6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIE1hc2tpbmVuIFR1cmUgw6RyIHRyYXNpZyEgVHVyZSDDpHIgbGVkc2VuLiBEdSBtw6VzdGUgbGFnYSBUdXJlIVxyXG4jIFNraWNrYXIgbWFuIGluIGVuIGV0dGEgdGlsbCBUdXJlIHNrYSBlbiBldHRhIGtvbW1hIHV0LlxyXG4jIEp1c3QgbnUgc2tpY2thciBUdXJlIGFsbHRpZCB1dCBub2xsb3IuIFR1cmUgaGFyIGhha2F0IHVwcCBzaWchXHJcbiMgTmFtbmV0IHDDpSBkZXQgbWFuIHNraWNrYXIgaW4gdGlsbCBUdXJlIHN0w6VyIG1lbGxhbiBwYXJlbnRlc2VybmEuIE5hbW5ldCDDpHIgeC5cclxuIyB4IGthbiB2YXJhIG9saWthIHNha2VyLiBJYmxhbmQgZW4gbm9sbGEgb2NoIGlibGFuZCBlbiBldHRhLlxyXG4jIEVmdGVyIHBpbGVuIHRhbGFyIG1hbiBvbSB2YWQgc29tIHNrYSBrb21tYSB1dCBmcsOlbiBUdXJlLlxyXG4jICAgRGVuIGd1bGEga29sdW1uZW4gaW5uZWjDpWxsZXIgZGV0IHNvbSBza2lja2FzIGluIHRpbGwgVHVyZS5cclxuIyAgIERlbiBncsO2bmEga29sdW1uZW4gaW5uZWjDpWxsZXIgZGV0IHNvbSBza2Ega29tbWEgdXQgdXIgVHVyZS5cclxuIyAgIERlbiByw7ZkYSBrb2x1bW5lbiBpbm5laMOlbGxlciBkZXQgc29tIGtvbW1lciB1dCB1ciBUdXJlLCBqdXN0IG51LlxyXG4jIFNlIHRpbGwgYXR0IGfDtnJhIGRlIFLDlkRBIGNlbGxlcm5hIEdSw5ZOQSFcclxuIyBUcnljayBudSBww6UgUGdEbiBvY2ggZ8O2ciBUdXJlIGdsYWQgaWdlbiFcclxuIyAgIMOEbmRyYSBub2xsYW4gdGlsbCBlbiBldHRhLiBOdSBza2lja2FzIGJhcmEgZXR0b3IgdXQgb2NoIGluZ2Egbm9sbG9yLlxyXG4jICAgw4RuZHJhIGV0dGFuIHRpbGwgZXR0IHguICAgIE51IMOkciBhbGx0IHNvbSBkZXQgc2thIG9jaCBUdXJlIMOkciBnbGFkIGlnZW4hXHJcbiMgR8OlIHRpbGwgbsOkc3RhIHVwcGdpZnQgZ2Vub20gYXR0IGtsaWNrYSBww6UgV2lsbWEgaSBsaXN0YW4gdGlsbCB2w6Ruc3Rlci5cclxuXHJcblR1cmUgPSAoeCkgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJUdXJlID0gKHgpIC0+IHhcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiVHVyZSAwXCIgOiAwXHJcblx0XHRcdFx0XCJUdXJlIDFcIiA6IDFcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0V2lsbWE6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIE9tIG1hbiBza2lja2FyIGVuIHNqdWEgdGlsbCBXaWxtYSBza2EgZGV0IGtvbW1hIHRpbGxiYWtzIGVuIMOldHRhLlxyXG5cdFx0XHQjIE9tIG1hbiBza2lja2FyIGVuIMOldHRhIHRpbGwgV2lsbWEgc2thIGRldCBrb21tYSB0aWxsYmFrcyBlbiBuaWEuXHJcblx0XHRcdCMgVmFkIHNrYSBXaWxtYSBza2lja2EgdGlsbGJha3Mgb20gZGV0IGtvbW1lciBpbiBldHQgeCA/XHJcblx0XHRcdCMgVGFiZWxsZW4gbMOkbmdzdCBuZXIgaW5uZWjDpWxsZXIgbGl0ZSBsZWR0csOlZGFyLlxyXG5cclxuXHRcdFx0V2lsbWEgPSAoeCkgLT4geFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJXaWxtYSA9ICh4KSAtPiB4KzFcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiV2lsbWEgN1wiIDogOFxyXG5cdFx0XHRcdFwiV2lsbWEgOFwiIDogOVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiNyArIDFcIiA6IDhcclxuXHRcdFx0XHRcIjggKyAxXCIgOiA5XHJcblx0XHRcdGU6XHJcblx0XHRcdFx0b3BlcmF0b3JzIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29wZXJhdG9ycy5hc3BcIlxyXG5cclxuXHRcdE5vZWw6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIE7DpWdvbiBhdiBkZXNzYSBsw7ZzZXIgcHJvYmxlbWV0OiArICpcclxuXHJcblx0XHRcdE5vZWwgPSAoeCkgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiTm9lbCA9ICh4KSAtPiAyKnhcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiTm9lbCA1XCIgOiAxMFxyXG5cdFx0XHRcdFwiTm9lbCA2XCIgOiAxMlxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiMyArIDJcIiA6IDVcclxuXHRcdFx0XHRcIjMgKiAyXCIgOiA2XHJcblx0XHRcdGU6XHJcblx0XHRcdFx0b3BlcmF0b3JzIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29wZXJhdG9ycy5hc3BcIlxyXG5cclxuXHRcdEdyZXRhOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyAqXHJcblxyXG5cdFx0XHRHcmV0YSA9ICh4KSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJHcmV0YSA9ICh4KSAtPiB4KnhcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiR3JldGEgMVwiIDogMVxyXG5cdFx0XHRcdFwiR3JldGEgMlwiIDogNFxyXG5cdFx0XHRcdFwiR3JldGEgM1wiIDogOVxyXG5cdFx0XHRcdFwiR3JldGEgNFwiIDogMTZcclxuXHRcdFx0XHRcIkdyZXRhIDVcIiA6IDI1XHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIzICogMlwiIDogNlxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHJcblx0XHRWaWt0b3I6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIC1cclxuXHJcblx0XHRcdFZpa3RvciA9ICh4KSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJWaWt0b3IgPSAoeCkgLT4gLXhcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiVmlrdG9yIC00XCIgOiA0XHJcblx0XHRcdFx0XCJWaWt0b3IgM1wiIDogLTNcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIjMgLSAyXCIgOiAxXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0b3BlcmF0b3JzIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29wZXJhdG9ycy5hc3BcIlxyXG5cclxuXHRcdFNhYnJpbmE6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIC1cclxuXHJcblx0XHRcdFNhYnJpbmEgPSAoeCkgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiU2FicmluYSA9ICh4KSAtPiB4LTJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiU2FicmluYSA3XCIgOiA1XHJcblx0XHRcdFx0XCJTYWJyaW5hIDE3XCIgOiAxNVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiMyAtIDJcIiA6IDFcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0RGF2aWQ6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIC9cclxuXHJcblx0XHRcdERhdmlkID0gKHgpIC0+XHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIkRhdmlkID0gKHgpIC0+IHgvMlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJEYXZpZCA4XCIgOiA0XHJcblx0XHRcdFx0XCJEYXZpZCA2XCIgOiAzXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCI2IC8gM1wiIDogMlxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHJcblx0XHRHYWJyaWVsbGE6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICVcclxuXHJcblx0XHRcdEdhYnJpZWxsYSA9ICh4KSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJHYWJyaWVsbGEgPSAoeCkgLT4geCAlIDJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiR2FicmllbGxhIDdcIiA6IDFcclxuXHRcdFx0XHRcIkdhYnJpZWxsYSA4XCIgOiAwXHJcblx0XHRcdFx0XCJHYWJyaWVsbGEgOVwiIDogMVxyXG5cdFx0XHRcdFwiR2FicmllbGxhIDEwXCIgOiAwXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIwICUgM1wiIDogMFxyXG5cdFx0XHRcdFwiMSAlIDNcIiA6IDFcclxuXHRcdFx0XHRcIjIgJSAzXCIgOiAyXHJcblx0XHRcdFx0XCIzICUgM1wiIDogMFxyXG5cdFx0XHRcdFwiNCAlIDNcIiA6IDFcclxuXHRcdFx0XHRcIjUgJSAzXCIgOiAyXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0b3BlcmF0b3JzIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29wZXJhdG9ycy5hc3BcIlxyXG5cclxuXHRcdEJlcHBlOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyA9PVxyXG5cclxuXHRcdFx0QmVwcGUgPSAoeCkgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiQmVwcGUgPSAoeCkgLT4geCA9PSAyXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIkJlcHBlIDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJCZXBwZSAyXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJCZXBwZSAzXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiQmVwcGUgNFwiIDogZmFsc2VcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIjEgPT0gMFwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgPT0gMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA9PSAyXCIgOiBmYWxzZVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHJcblx0XHRLYXJvbGluYTpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgPlxyXG5cclxuXHRcdFx0S2Fyb2xpbmEgPSAoeCkgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiS2Fyb2xpbmEgPSAoeCkgLT4geCA+IDJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiS2Fyb2xpbmEgMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIkthcm9saW5hIDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJLYXJvbGluYSAzXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJLYXJvbGluYSA0XCIgOiB0cnVlXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIwID4gMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgPiAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMiA+IDFcIiA6IHRydWVcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0S2FzcGVyOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyA+PVxyXG5cclxuXHRcdFx0S2FzcGVyID0gKHgpIC0+XHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIkthc3BlciA9ICh4KSAtPiB4ID49IDNcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiS2FzcGVyIDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJLYXNwZXIgMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcIkthc3BlciAzXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJLYXNwZXIgNFwiIDogdHJ1ZVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiMSA+PSAyXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMiA+PSAyXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIzID49IDJcIiA6IHRydWVcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0TWlyYW5kYTpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgIT1cclxuXHJcblx0XHRcdE1pcmFuZGEgPSAoeCkgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiTWlyYW5kYSA9ICh4KSAtPiB4ICE9IDJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiTWlyYW5kYSAxXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJNaXJhbmRhIDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJNaXJhbmRhIDNcIiA6IHRydWVcclxuXHRcdFx0XHRcIk1pcmFuZGEgNFwiIDogdHJ1ZVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiMSAhPSAwXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxICE9IDFcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIxICE9IDJcIiA6IHRydWVcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFwiQTE6IFR3byBQYXJhbWV0ZXJzXCIgOlxyXG5cdFxyXG5cdFx0T3BlcmF0b3IxOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICUgKipcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSpiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgMyw0XCIgOiAxMlxyXG5cdFx0XHRcdFwiZyA0LDZcIiA6IDI0XHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIzICsgMlwiIDogNVxyXG5cdFx0XHRcdFwiMyAtIDJcIiA6IDFcclxuXHRcdFx0XHRcIjMgKiAyXCIgOiA2XHJcblx0XHRcdFx0XCI2IC8gMlwiIDogM1xyXG5cdFx0XHRcdFwiNSAlIDJcIiA6IDFcclxuXHRcdFx0XHRcIjYgJSAyXCIgOiAwXHJcblx0XHRcdFx0XCIyKjIqMlwiIDogOFxyXG5cdFx0XHRcdFwiMyozXCIgOiA5XHJcblx0XHRcdFx0XCIyICoqIDNcIiA6IDhcclxuXHRcdFx0XHRcIjMgKiogMlwiIDogOVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHJcblx0XHRPcGVyYXRvcjI6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0ZyA9IChhLGIpIC0+XHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImcgPSAoYSxiKSAtPiBhK2JcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiZyAzLDRcIiA6IDdcclxuXHRcdFx0XHRcImcgNCw2XCIgOiAxMFxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiMyArIDJcIiA6IDVcclxuXHRcdFx0XHRcIjMgLSAyXCIgOiAxXHJcblx0XHRcdFx0XCIzICogMlwiIDogNlxyXG5cdFx0XHRcdFwiNiAvIDJcIiA6IDNcclxuXHRcdFx0XHRcIjUgJSAyXCIgOiAxXHJcblx0XHRcdFx0XCI2ICUgMlwiIDogMFxyXG5cdFx0XHRcdFwiMiAqKiAzXCIgOiA4XHJcblx0XHRcdFx0XCIzICoqIDJcIiA6IDlcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0T3BlcmF0b3IzOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICVcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYi1hXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgMyw0XCIgOiAxXHJcblx0XHRcdFx0XCJnIDQsNlwiIDogMlxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiMyArIDJcIiA6IDVcclxuXHRcdFx0XHRcIjMgLSAyXCIgOiAxXHJcblx0XHRcdFx0XCIzICogMlwiIDogNlxyXG5cdFx0XHRcdFwiNiAvIDJcIiA6IDNcclxuXHRcdFx0XHRcIjUgJSAyXCIgOiAxXHJcblx0XHRcdFx0XCI2ICUgMlwiIDogMFxyXG5cdFx0XHRcdFwiMiAqKiAzXCIgOiA4XHJcblx0XHRcdFx0XCIzICoqIDJcIiA6IDlcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0T3BlcmF0b3I0OlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICVcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYS9iXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgOCw0XCIgOiAyXHJcblx0XHRcdFx0XCJnIDEyLDNcIiA6IDRcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIjMgKyAyXCIgOiA1XHJcblx0XHRcdFx0XCIzIC0gMlwiIDogMVxyXG5cdFx0XHRcdFwiMyAqIDJcIiA6IDZcclxuXHRcdFx0XHRcIjYgLyAyXCIgOiAzXHJcblx0XHRcdFx0XCI1ICUgMlwiIDogMVxyXG5cdFx0XHRcdFwiNiAlIDJcIiA6IDBcclxuXHRcdFx0XHRcIjIgKiogM1wiIDogOFxyXG5cdFx0XHRcdFwiMyAqKiAyXCIgOiA5XHJcblx0XHRcdGU6XHJcblx0XHRcdFx0b3BlcmF0b3JzIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29wZXJhdG9ycy5hc3BcIlxyXG5cclxuXHRcdE9wZXJhdG9yNTpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZyA9IChhLGIpIC0+IGElYlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJnIDgsNFwiIDogMFxyXG5cdFx0XHRcdFwiZyA5LDRcIiA6IDFcclxuXHRcdFx0XHRcImcgMTAsNFwiIDogMlxyXG5cdFx0XHRcdFwiZyAxMSw0XCIgOiAzXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIzICsgMlwiIDogNVxyXG5cdFx0XHRcdFwiMyAtIDJcIiA6IDFcclxuXHRcdFx0XHRcIjMgKiAyXCIgOiA2XHJcblx0XHRcdFx0XCI2IC8gMlwiIDogM1xyXG5cdFx0XHRcdFwiNSAlIDJcIiA6IDFcclxuXHRcdFx0XHRcIjYgJSAyXCIgOiAwXHJcblx0XHRcdFx0XCIyICoqIDNcIiA6IDhcclxuXHRcdFx0XHRcIjMgKiogMlwiIDogOVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHRcclxuXHRcdE9wZXJhdG9yNjpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlID09XHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZyA9IChhLGIpIC0+IGEgPT0gYlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJnIDAsMFwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyAxLDFcIiA6IHRydWVcclxuXHRcdFx0XHRcImcgNyw0XCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiZyA2LDRcIiA6IGZhbHNlXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIzICsgMlwiIDogNVxyXG5cdFx0XHRcdFwiMyAtIDJcIiA6IDFcclxuXHRcdFx0XHRcIjMgKiAyXCIgOiA2XHJcblx0XHRcdFx0XCI2IC8gMlwiIDogM1xyXG5cdFx0XHRcdFwiNSAlIDJcIiA6IDFcclxuXHRcdFx0XHRcIjYgJSAyXCIgOiAwXHJcblx0XHRcdFx0XCIyICoqIDNcIiA6IDhcclxuXHRcdFx0XHRcIjMgKiogMlwiIDogOVxyXG5cdFx0XHRcdFwiMiA9PSAzXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMyA9PSAzXCIgOiB0cnVlXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0b3BlcmF0b3JzIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29wZXJhdG9ycy5hc3BcIlxyXG5cclxuXHRcdE9wZXJhdG9yNzpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlID09XHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZyA9IChhLGIpIC0+IGEgLSBiID09IDFcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiZyA3LDZcIiA6IHRydWVcclxuXHRcdFx0XHRcImcgNSw0XCIgOiB0cnVlXHJcblx0XHRcdFx0XCJnIDcsNFwiIDogZmFsc2VcclxuXHRcdFx0XHRcImcgNiw0XCIgOiBmYWxzZVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiMyArIDJcIiA6IDVcclxuXHRcdFx0XHRcIjMgLSAyXCIgOiAxXHJcblx0XHRcdFx0XCIzICogMlwiIDogNlxyXG5cdFx0XHRcdFwiNiAvIDJcIiA6IDNcclxuXHRcdFx0XHRcIjUgJSAyXCIgOiAxXHJcblx0XHRcdFx0XCI2ICUgMlwiIDogMFxyXG5cdFx0XHRcdFwiMiAqKiAzXCIgOiA4XHJcblx0XHRcdFx0XCIzICoqIDJcIiA6IDlcclxuXHRcdFx0XHRcIjIgPT0gM1wiIDogZmFsc2VcclxuXHRcdFx0XHRcIjMgPT0gM1wiIDogdHJ1ZVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHJcblx0XHRPcGVyYXRvcjg6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJSA9PVxyXG5cclxuXHRcdFx0ZyA9IChhLGIpIC0+XHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImcgPSAoYSxiKSAtPiBhICsgYiA9PSA3XCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgNywwXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJnIDUsMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyA3LDRcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJnIDYsNFwiIDogZmFsc2VcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIjMgKyAyXCIgOiA1XHJcblx0XHRcdFx0XCIzIC0gMlwiIDogMVxyXG5cdFx0XHRcdFwiMyAqIDJcIiA6IDZcclxuXHRcdFx0XHRcIjYgLyAyXCIgOiAzXHJcblx0XHRcdFx0XCI1ICUgMlwiIDogMVxyXG5cdFx0XHRcdFwiNiAlIDJcIiA6IDBcclxuXHRcdFx0XHRcIjIgKiogM1wiIDogOFxyXG5cdFx0XHRcdFwiMyAqKiAyXCIgOiA5XHJcblx0XHRcdFx0XCIyID09IDNcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCIzID09IDNcIiA6IHRydWVcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0T3BlcmF0b3I5OlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICUgKipcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSAqKiBiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgMyw0XCIgOiA4MVxyXG5cdFx0XHRcdFwiZyA0LDNcIiA6IDY0XHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIzICsgMlwiIDogNVxyXG5cdFx0XHRcdFwiMyAtIDJcIiA6IDFcclxuXHRcdFx0XHRcIjMgKiAyXCIgOiA2XHJcblx0XHRcdFx0XCI2IC8gMlwiIDogM1xyXG5cdFx0XHRcdFwiNSAlIDJcIiA6IDFcclxuXHRcdFx0XHRcIjYgJSAyXCIgOiAwXHJcblx0XHRcdFx0XCIyICoqIDNcIiA6IDhcclxuXHRcdFx0XHRcIjMgKiogMlwiIDogOVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHJcblx0XHRPcGVyYXRvcjEwOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArICpcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSAqIGEgKyBiICogYlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJnIDAsMVwiIDogMVxyXG5cdFx0XHRcdFwiZyAxLDJcIiA6IDVcclxuXHRcdFx0XHRcImcgMiwzXCIgOiAxM1xyXG5cdFx0XHRcdFwiZyAzLDRcIiA6IDI1XHJcblx0XHRcdFx0XCJnIDMsNVwiIDogMzRcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIjMgKyAyXCIgOiA1XHJcblx0XHRcdFx0XCIzICogMlwiIDogNlxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdG9wZXJhdG9ycyA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9vcGVyYXRvcnMuYXNwXCJcclxuXHJcblx0XHRPcGVyYXRvcjExOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArICpcclxuXHJcblx0XHRcdGcgPSAoeCkgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlwiXHJcbmcgPSAoeCkgLT4geCArIDFcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJnIGcgMFwiIDogMlxyXG5cdFx0XHRcdFwiZyBnIDEwXCIgOiAxMlxyXG5cdFx0XHRcdFwiZyBnIGcgMFwiIDogM1xyXG5cdFx0XHRcdFwiZyBnIGcgMTBcIiA6IDEzXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCIwICsgMSArIDFcIiA6IDJcclxuXHRcdFx0XHRcIjEwICsgMSArIDFcIiA6IDEyXHJcblx0XHRcdFx0XCIwICsgMSArIDEgKyAxXCIgOiAzXHJcblx0XHRcdFx0XCIxMCArIDEgKyAxICsgMVwiIDogMTNcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRvcGVyYXRvcnMgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfb3BlcmF0b3JzLmFzcFwiXHJcblxyXG5cdFx0T3BlcmF0b3IxMjpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAqXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+XHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcIlxyXG5mID0gKHgpIC0+IHggKiAyXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiZiBmIDBcIiA6IDBcclxuXHRcdFx0XHRcImYgZiAxXCIgOiA0XHJcblx0XHRcdFx0XCJmIGYgZiAxXCIgOiA4XHJcblx0XHRcdGU6XHJcblx0XHRcdFx0b3BlcmF0b3JzIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29wZXJhdG9ycy5hc3BcIlxyXG5cclxuXHQnQTI6IHJhbmdlIGxlcnAgZm9yJyA6XHJcblxyXG5cdFx0cmFuZ2U6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjMgcmFuZ2UgW11cclxuXHJcbmYgPSAobikgLT4gW11cclxuZyA9IChhLGIpIC0+IFtdXHJcbmggPSAoYSxiLG4pIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mID0gKG4pIC0+IHJhbmdlIG5cclxuZyA9IChhLGIpIC0+IHJhbmdlIGEsYlxyXG5nID0gKGEsYixuKSAtPiByYW5nZSBhLGIsblxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImYgNVwiIDogWzAsMSwyLDMsNF1cclxuXHRcdFx0XHRcImYgNlwiIDogWzAsMSwyLDMsNCw1XVxyXG5cdFx0XHRcdFwiZyAxLDVcIiA6IFsxLDIsMyw0XVxyXG5cdFx0XHRcdFwiZyAyLDRcIiA6IFsyLDNdXHJcblx0XHRcdFx0XCJnIC0yLDBcIiA6IFstMiwtMV1cclxuXHRcdFx0XHRcImggMCwxMCwxXCIgOiBbMCwxLDIsMyw0LDUsNiw3LDgsOV1cclxuXHRcdFx0XHRcImggMCwxMCwyXCIgOiBbMCwyLDQsNiw4XVxyXG5cdFx0XHRcdFwiaCAwLC0xMCwtMVwiIDogWzAsLTEsLTIsLTMsLTQsLTUsLTYsLTcsLTgsLTldXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCJyYW5nZSAzXCIgOiBbMCwxLDJdXHJcblx0XHRcdFx0XCJyYW5nZSAxLDRcIiA6IFsxLDIsM11cclxuXHRcdFx0XHRcInJhbmdlIDEsOSwyXCIgOiBbMSwzLDUsN11cclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRyYW5nZSA6IFwiaHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI3JhbmdlXCJcclxuXHJcblx0XHRcImxlcnBcIjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MSBsZXJwICsgLSAqIC9cclxuIyBGw7Zyc8O2ayBsw7ZzYSB1cHBnaWZ0ZW4gYsOlZGUgbWVkIG9jaCB1dGFuIGxlcnBcclxuXHJcbmYgPSAoYSxiLGkpIC0+IDBcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmYgPSAoYSxiLGkpIC0+IGxlcnAgYSxiLGlcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJmIDEwLDIwLDBcIiA6IDEwXHJcblx0XHRcdFx0XCJmIDEwLDIwLDFcIiA6IDIwXHJcblx0XHRcdFx0XCJmIDEwLDIwLDJcIiA6IDMwXHJcblx0XHRcdFx0XCJmIDEwLDIwLDAuNVwiIDogMTVcclxuXHRcdFx0XHRcImYgMTAsMjAsLTFcIiA6IDBcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwwXCIgOiA4XHJcblx0XHRcdFx0XCJsZXJwIDgsMTIsMVwiIDogMTJcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwwLjVcIiA6IDEwXHJcblx0XHRcdFx0XCJsZXJwIDgsMTIsLTFcIiA6IDRcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwyXCIgOiAxNlxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdGxlcnAgOiBcImh0dHBzOi8vcDVqcy5vcmcvcmVmZXJlbmNlLyMvcDUvbGVycFwiXHJcblxyXG5cdFx0XCJmb3JcIjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MSBmb3IgaW4gcmFuZ2UgbGVycCBbXVxyXG4jIEbDtnJzw7ZrIGzDtnNhIHVwcGdpZnRlbiBiw6VkZSBtZWQgb2NoIHV0YW4gbGVycFxyXG5cclxuZiA9IChhLGIsbikgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmYgPSAoYSxiLG4pIC0+IGxlcnAgYSxiLGkgZm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImYgMCwwLDVcIiA6IFswLDAsMCwwLDBdXHJcblx0XHRcdFx0XCJmIDEsMiw1XCIgOiBbMSwyLDMsNCw1XVxyXG5cdFx0XHRcdFwiZiA1LDQsNVwiIDogWzUsNCwzLDIsMV1cclxuXHRcdFx0XHRcImYgLTEsLTIsNVwiIDogWy0xLC0yLC0zLC00LC01XVxyXG5cdFx0XHRcdFwiZiA1LDI1LDEwXCIgOiBbNSwyNSw0NSw2NSw4NSwxMDUsMTI1LDE0NSwxNjUsMTg1XVxyXG5cdFx0XHRcdFwiZiAtMC4xLDAuMCwzXCIgOiBbLTAuMSwwLjAsMC4xXVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiKGkqaSBmb3IgaSBpbiByYW5nZSA1KVwiIDogWzAsMSw0LDksMTZdXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0cmFuZ2UgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyNyYW5nZVwiXHJcblxyXG5cdFwiQTM6IFsgXVwiIDpcclxuXHJcblx0XHRJbnRyb2R1a3Rpb246XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjYgbGVuZ3RoIGNvbmNhdCAuLiBbXVxyXG5cclxuYW50YWwgPSAoYSkgLT4gMFxyXG5mZXRjaCA9IChhLGkpIC0+IDAgXHJcbmtvbmthdGVuZXJhID0gKGEsYikgLT4gW11cclxuZsO2cnN0YSA9IChhLG4pIC0+IFtdXHJcbm1pdHRpID0gKGEsaSxqKSAtPiBbXVxyXG5zaXN0YSA9IChhLG4pIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5hbnRhbCA9IChhKSAtPiBhLmxlbmd0aFxyXG5mZXRjaCA9IChhLGkpIC0+IGFbaV1cclxua29ua2F0ZW5lcmEgPSAoYSxiKSAtPiBhLmNvbmNhdCBiXHJcbmbDtnJzdGEgPSAoYSxuKSAtPiBhWy4ubi0xXVxyXG5taXR0aSA9IChhLGksaikgLT4gYVtpLi5qXVxyXG5zaXN0YSA9IChhLG4pIC0+IGFbLW4uLl1cclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJhbnRhbCBbMSwyLDNdXCIgOiAzXHJcblx0XHRcdFx0XCJhbnRhbCBbNSw0LDEsMiw5LDMsN11cIiA6IDdcclxuXHRcdFx0XHRcImZldGNoIFs0LDUsNl0sMFwiIDogNFxyXG5cdFx0XHRcdFwiZmV0Y2ggWzQsNSw2XSwyXCIgOiA2XHJcblx0XHRcdFx0XCJrb25rYXRlbmVyYSBbMSwyLDNdLFs0LDUsNl1cIiA6IFsxLDIsMyw0LDUsNl1cclxuXHRcdFx0XHRcImbDtnJzdGEgWzExLDEyLDEzLDE0LDE1XSwzXCIgOiBbMTEsMTIsMTNdXHJcblx0XHRcdFx0XCJtaXR0aSBbMTEsMTIsMTMsMTQsMTVdLDEsMlwiIDogWzEyLDEzXVxyXG5cdFx0XHRcdFwic2lzdGEgWzExLDEyLDEzLDE0LDE1XSw0XCIgOiBbMTIsMTMsMTQsMTVdXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCJbMiwxMSwzLDU2LDYyXVswXVwiIDogMlxyXG5cdFx0XHRcdFwiXy5maXJzdCBbMiwxMSwzLDU2LDYyXVwiIDogMlxyXG5cdFx0XHRcdFwiXy5sYXN0IFsyLDExLDMsNTYsNjJdXCIgOiA2MlxyXG5cdFx0XHRcdFwiWzIsMTEsMyw1Niw2Ml1bM11cIiA6IDU2XHJcblx0XHRcdFx0XCJbMiwxMSwzLDU2LDYyXS5sZW5ndGhcIiA6IDVcclxuXHRcdFx0XHRcIlsyLDExLDMsNTYsNjJdWzJdXCIgOiAzXHJcblx0XHRcdFx0XCJbMiwxMSwzLDU2LDYyXVsuLjJdXCIgOiBbMiwxMSwzXVxyXG5cdFx0XHRcdFwiWzIsMTEsMyw1Niw2Ml1bMS4uXVwiIDogWzExLDMsNTYsNjJdXHJcblx0XHRcdFx0XCJbMiwxMSwzLDU2LDYyXVsxLi4yXVwiIDogWzExLDNdXHJcblx0XHRcdFx0XCJfLm1pbiBbMiwxMSwzLDU2LDYyXVwiIDogMlxyXG5cdFx0XHRcdFwiXy5tYXggWzIsMTEsMyw1Niw2Ml1cIiA6IDYyXHJcblx0XHRcdFx0XCJfLmNvbnRhaW5zIFsyLDExLDMsNTYsNjJdLCAzXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJbMiwxMSwzLDU2LDYyXS5pbmRleE9mIDYyXCIgOiA0XHJcblx0XHRcdFx0XCJbMiwxMSwzLDU2LDYyXS5yZXZlcnNlKClcIiA6IFs2Miw1NiwzLDExLDJdXHJcblx0XHRcdFx0XCJbMSwyXS5jb25jYXQgWzMsNF1cIiA6IFsxLDIsMyw0XVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdFwiWyBdXCIgOiBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanMvanNfYXJyYXlzLmFzcFwiXHJcblxyXG5cdFx0TmltOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxIDwgXiBzb3J0IGlmIHRoZW4gZWxzZSBbXSBcclxuXHJcbiMgTklNIMOkciBldHQgdHbDpW1hbnNzcGVsXHJcbiMgVGFnIG1pbnN0IGVuIHN0aWNrYSB1ciBlbiBhdiB0cmUgaMO2Z2FyXHJcbiMgU2lzdGEgc3RpY2thbiB2aW5uZXJcclxuXHJcbm5pbSA9IChbYSxiLGNdKSAtPiBbYSxiLGNdXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5uaW09KFthLGIsY10pLT5zb3J0IGlmKGJeYyk8YSB0aGVuW2JeYyxiLGNdZWxzZSBpZihhXmMpPGIgdGhlblthLGFeYyxjXWVsc2UgaWYoYV5iKTxjIHRoZW5bYSxiLGFeYl1lbHNlW2EsYixjLTFdXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwibmltIFswLDAsMV1cIiA6IFswLDAsMF1cclxuXHRcdFx0XHRcIm5pbSBbMCwwLDJdXCIgOiBbMCwwLDBdXHJcblx0XHRcdFx0XCJuaW0gWzAsMywzXVwiIDogWzAsMiwzXVxyXG5cdFx0XHRcdFwibmltIFsxLDIsM11cIiA6IFsxLDIsMl1cclxuXHRcdFx0XHRcIm5pbSBbMSwyLDRdXCIgOiBbMSwyLDNdXHJcblx0XHRcdFx0XCJuaW0gWzEsMyw0XVwiIDogWzEsMiwzXVxyXG5cdFx0XHRcdFwibmltIFsxLDMsNV1cIiA6IFsxLDIsM11cclxuXHRcdFx0XHRcIm5pbSBbMiwzLDVdXCIgOiBbMSwyLDNdXHJcblx0XHRcdFx0XCJuaW0gWzIsNCw3XVwiIDogWzIsNCw2XVxyXG5cdFx0XHRcdFwibmltIFsyLDUsNl1cIiA6IFsyLDQsNl1cclxuXHRcdFx0XHRcIm5pbSBbMyw0LDVdXCIgOiBbMSw0LDVdXHJcblx0XHRcdFx0XCJuaW0gWzMsNCw2XVwiIDogWzIsNCw2XVxyXG5cdFx0XHRcdFwibmltIFs1LDYsN11cIiA6IFsxLDYsN11cclxuXHRcdFx0ZDogXHJcblx0XHRcdFx0XCIwXjBcIiA6IDAgXHJcblx0XHRcdFx0XCIwXjFcIiA6IDEgXHJcblx0XHRcdFx0XCIxXjBcIiA6IDEgXHJcblx0XHRcdFx0XCIxXjFcIiA6IDAgXHJcblx0XHRcdFx0XCIwXjJcIiA6IDIgXHJcblx0XHRcdFx0XCIyXjBcIiA6IDIgXHJcblx0XHRcdFx0XCIyXjJcIiA6IDAgXHJcblx0XHRcdFx0XCIxXjJcIiA6IDMgXHJcblx0XHRcdFx0XCIxXjJeM1wiIDogMCBcclxuXHRcdFx0XHRcIjFeM140XCIgOiA2IFxyXG5cdFx0XHRcdFwiMV40XjVcIiA6IDAgXHJcblx0XHRcdFx0XCIxXjVeNlwiIDogMiBcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHROaW0gOiBcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05pbVwiXHJcblx0XHRcdFx0eG9yIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CaXR3aXNlX29wZXJhdGlvbiNYT1JcIlxyXG5cdFx0XHRcdE5pbXJvZCA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmltcm9kXyhjb21wdXRpbmcpXCJcclxuXHJcblx0XHRTb3J0OlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxNiBpZiA8IHRoZW4gZWxzZSBbXVxyXG4jIFNvcnRlcmEgVVRBTiBhdHQgYW52w6RuZGEgbG9vcGFyXHJcbiMgU29ydGVyYSBVVEFOIGF0dCBhbnbDpG5kYSBuw6Vnb24gZsOkcmRpZyBzb3J0ZXJpbmdzcnV0aW5cclxuXHJcbnNvcnQyID0gKGEsYikgLT4gW2EsYl1cclxuc29ydDMgPSAoYSxiLGMpIC0+IFthLGIsY11cclxuc29ydDQgPSAoYSxiLGMsZCkgLT4gW2EsYixjLGRdXHJcbnNvcnQ1ID0gKGEsYixjLGQsZSkgLT4gW2EsYixjLGQsZV1cclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5zb3J0MiA9IChhLGIpIC0+IGlmIGE+YiB0aGVuIFtiLGFdIGVsc2UgW2EsYl1cclxuXHJcbnNvcnQzID0gKGEsYixjKSAtPlxyXG5cdFthLGJdID0gc29ydDIgYSxiXHJcblx0W2IsY10gPSBzb3J0MiBiLGNcclxuXHRbYSxiXSA9IHNvcnQyIGEsYlxyXG5cdFthLGIsY11cclxuXHJcbnNvcnQ0ID0gKGEsYixjLGQpIC0+XHJcblx0W2EsYixjXSA9IHNvcnQzIGEsYixjXHJcblx0W2IsYyxkXSA9IHNvcnQzIGIsYyxkXHJcblx0W2EsYl0gPSBzb3J0MiBhLGJcclxuXHRbYSxiLGMsZF1cclxuXHJcbnNvcnQ1ID0gKGEsYixjLGQsZSkgLT5cclxuXHRbYSxiLGMsZF0gPSBzb3J0NCBhLGIsYyxkXHJcblx0W2IsYyxkLGVdID0gc29ydDQgYixjLGQsZVxyXG5cdFthLGJdID0gc29ydDIgYSxiXHJcblx0W2EsYixjLGQsZV1cclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJzb3J0MiAxMSwyXCIgOiBbMiwxMV1cclxuXHRcdFx0XHRcInNvcnQyIDIsMTFcIiA6IFsyLDExXVxyXG5cclxuXHRcdFx0XHRcInNvcnQzIDExLDQsNVwiIDogWzQsNSwxMV1cclxuXHRcdFx0XHRcInNvcnQzIDExLDUsNFwiIDogWzQsNSwxMV1cclxuXHRcdFx0XHRcInNvcnQzIDQsMTEsNVwiIDogWzQsNSwxMV1cclxuXHRcdFx0XHRcInNvcnQzIDQsNSwxMVwiIDogWzQsNSwxMV1cclxuXHRcdFx0XHRcInNvcnQzIDUsMTEsNFwiIDogWzQsNSwxMV1cclxuXHRcdFx0XHRcInNvcnQzIDUsNCwxMVwiIDogWzQsNSwxMV1cclxuXHJcblx0XHRcdFx0XCJzb3J0NCAxMSw0LDUsNlwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgMTEsNCw2LDVcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDExLDUsNCw2XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCAxMSw1LDYsNFwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgMTEsNiw0LDVcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDExLDYsNSw0XCIgOiBbNCw1LDYsMTFdXHJcblxyXG5cdFx0XHRcdFwic29ydDQgNCwxMSw1LDZcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDQsMTEsNiw1XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA0LDUsMTEsNlwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNCw1LDYsMTFcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDQsNiwxMSw1XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA0LDYsNSwxMVwiIDogWzQsNSw2LDExXVxyXG5cclxuXHRcdFx0XHRcInNvcnQ0IDUsMTEsNCw2XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA1LDExLDYsNFwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNSw0LDExLDZcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDUsNCw2LDExXCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA1LDYsMTEsNFwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNSw2LDQsMTFcIiA6IFs0LDUsNiwxMV1cclxuXHJcblx0XHRcdFx0XCJzb3J0NCA2LDExLDQsNVwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNiwxMSw1LDRcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDYsNCwxMSw1XCIgOiBbNCw1LDYsMTFdXHJcblx0XHRcdFx0XCJzb3J0NCA2LDQsNSwxMVwiIDogWzQsNSw2LDExXVxyXG5cdFx0XHRcdFwic29ydDQgNiw1LDExLDRcIiA6IFs0LDUsNiwxMV1cclxuXHRcdFx0XHRcInNvcnQ0IDYsNSw0LDExXCIgOiBbNCw1LDYsMTFdXHJcblxyXG5cdFx0XHRcdFwic29ydDUgNSw0LDExLDIsMVwiIDogWzEsMiw0LDUsMTFdXHJcblx0XHRcdFx0XCJzb3J0NSAxMSw1LDIsNCwxXCIgOiBbMSwyLDQsNSwxMV1cclxuXHRcdFx0XHRcInNvcnQ1IDUsMiwxMSw0LDFcIiA6IFsxLDIsNCw1LDExXVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiaWYgMTEgPCAyIHRoZW4gWzExLDJdIGVsc2UgWzIsMTFdXCIgOiBbMiwxMV1cclxuXHJcblxyXG5cdFx0VsOkeGVsY3lrZWwgOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6NSBbXSBmb3IgaW4gcHVzaCBic29ydCAtIC9cclxuIyBEaW4gdsOkeGVsY3lrZWwgaGFyIHN0b3JhIG9jaCBzbcOlIGt1Z2doanVsLiBJIHZpbGtlbiBvcmRuaW5nIGxpZ2dlciB2w6R4bGFybmE/IFxyXG5cclxuZ2VhciA9IChiaWcsIHNtYWxsLCBpbmRleCkgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5nZWFyID0gKGJpZywgc21hbGwsIGluZGV4KSAtPlxyXG5cdHJlcyA9IFtdXHJcblx0cmVzLnB1c2ggW01hdGgucm91bmQoYi9zICogMTAwKS8xMDAsYixzXSBmb3IgcyBpbiBzbWFsbCBmb3IgYiBpbiBiaWdcclxuXHRic29ydCByZXNcclxuXHRyZXNbaW5kZXhdXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImdlYXIgWzQzLDUzXSwgWzEzLDIxXSwgMFwiIDogWzIuMDUsNDMsMjFdXHJcblx0XHRcdFx0XCJnZWFyIFs0Myw1M10sIFsxMywyMV0sIDFcIiA6IFsyLjUyLDUzLDIxXVxyXG5cdFx0XHRcdFwiZ2VhciBbNDMsNTNdLCBbMTMsMjFdLCAyXCIgOiBbMy4zMSw0MywxM11cclxuXHRcdFx0XHRcImdlYXIgWzQzLDUzXSwgWzEzLDIxXSwgM1wiIDogWzQuMDgsNTMsMTNdXHJcblx0XHRcdFx0XCJnZWFyIFs0Myw1M10sIFsxMywxNSwxNywxOSwyMV0sIDBcIiA6IFsyLjA1LDQzLDIxXVxyXG5cdFx0XHRcdFwiZ2VhciBbNDMsNTNdLCBbMTMsMTUsMTcsMTksMjFdLCAxXCIgOiBbMi4yNiw0MywxOV1cclxuXHRcdFx0XHRcImdlYXIgWzQzLDUzXSwgWzEzLDE1LDE3LDE5LDIxXSwgMlwiIDogWzIuNTIsNTMsMjFdXHJcblx0XHRcdFx0XCJnZWFyIFs0Myw1M10sIFsxMywxNSwxNywxOSwyMV0sIDNcIiA6IFsyLjUzLDQzLDE3XVxyXG5cdFx0XHRcdFwiZ2VhciBbNDMsNTNdLCBbMTMsMTUsMTcsMTksMjFdLCA0XCIgOiBbMi43OSw1MywxOV1cclxuXHRcdFx0XHRcImdlYXIgWzQzLDUzXSwgWzEzLDE1LDE3LDE5LDIxXSwgNVwiIDogWzIuODcsNDMsMTVdXHJcblx0XHRcdFx0XCJnZWFyIFs0Myw1M10sIFsxMywxNSwxNywxOSwyMV0sIDZcIiA6IFszLjEyLDUzLDE3XVxyXG5cdFx0XHRcdFwiZ2VhciBbNDMsNTNdLCBbMTMsMTUsMTcsMTksMjFdLCA3XCIgOiBbMy4zMSw0MywxM11cclxuXHRcdFx0XHRcImdlYXIgWzQzLDUzXSwgWzEzLDE1LDE3LDE5LDIxXSwgOFwiIDogWzMuNTMsNTMsMTVdXHJcblx0XHRcdFx0XCJnZWFyIFs0Myw1M10sIFsxMywxNSwxNywxOSwyMV0sIDlcIiA6IFs0LjA4LDUzLDEzXVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiTWF0aC5yb3VuZCAzLjE0MTVcIiA6IDNcclxuXHRcdFx0XHRcIk1hdGgucm91bmQoMy4xNDE1ICogMTApLzEwXCIgOiAzLjFcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRcIkdlYXIgcmF0aW9zXCIgOiBcImh0dHBzOi8vY3ljbGluZ3RpcHMuY29tLzIwMTQvMDgvYmV5b25kLXRoZS1iaWctcmluZy11bmRlcnN0YW5kaW5nLWdlYXItcmF0aW9zLWFuZC13aHktdGhleS1tYXR0ZXIvXCJcclxuXHJcblx0XHRLYWxreWxhdG9yIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjcgW10gZm9yIGluIHNwbGl0ID09IHB1c2ggcG9wIGlmIGVsc2UgcGFyc2VJbnRcclxuXHJcbmNhbGMgPSAoY29tbWFuZCkgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmNhbGMgPSAoY29tbWFuZCkgLT5cclxuXHRzdGFjayA9IFtdXHJcblx0Zm9yIGNtZCBpbiBjb21tYW5kLnNwbGl0ICcgJ1xyXG5cdFx0aWYgY21kID09ICcrJyB0aGVuIHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKyBzdGFjay5wb3AoKVxyXG5cdFx0ZWxzZSBpZiBjbWQgPT0gJyonIHRoZW4gc3RhY2sucHVzaCBzdGFjay5wb3AoKSAqIHN0YWNrLnBvcCgpXHJcblx0XHRlbHNlIHN0YWNrLnB1c2ggcGFyc2VJbnQgY21kXHJcblx0c3RhY2sucG9wKClcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJjYWxjICcyJ1wiIDogMlxyXG5cdFx0XHRcdFwiY2FsYyAnMiAzJ1wiIDogM1xyXG5cdFx0XHRcdFwiY2FsYyAnMiAzICsnXCIgOiA1XHJcblx0XHRcdFx0XCJjYWxjICcyIDMgKidcIiA6IDZcclxuXHRcdFx0XHRcImNhbGMgJzIgMyA0ICogKydcIiA6IDE0XHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCInYSBiIGMnLnNwbGl0ICcgJ1wiIDogWydhJywnYicsJ2MnXVxyXG5cdFx0XHRcdCcxICsgMicgOiAzXHJcblx0XHRcdFx0XCInMScgKyAnMidcIiA6ICcxMidcclxuXHRcdFx0XHRcIjEgKyAnMidcIiA6ICcxMidcclxuXHRcdFx0XHRcIicxJyArIDJcIiA6ICcxMidcclxuXHRcdFx0XHRcInBhcnNlSW50ICczJ1wiIDogM1xyXG5cdFx0XHRcdFwicGFyc2VGbG9hdCAnMy4xNCdcIiA6IDMuMTRcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRwYXJzZUludCA6IFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9wYXJzZWludC5hc3BcIlxyXG5cdFx0XHRcdHN0YWNrIDogXCJodHRwczovL3N2Lndpa2lwZWRpYS5vcmcvd2lraS9TdGFja18oZGF0YXN0cnVrdHVyKVwiXHJcblx0XHRcdFx0c3BsaXQgOiBcImh0dHBzOi8vY29mZmVlc2NyaXB0LWNvb2tib29rLmdpdGh1Yi5pby9jaGFwdGVycy9zdHJpbmdzL3NwbGl0dGluZy1hLXN0cmluZ1wiXHJcblx0XHRcdFx0UlBOIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SZXZlcnNlX1BvbGlzaF9ub3RhdGlvblwiXHJcblxyXG5cdFwiQTQ6IHsgfVwiIDpcclxuXHJcblx0XHRcIkJveXMgYW5kIEdpcmxzXCIgOlxyXG5cdFx0XHRiIDogXCJcIlwiXHJcbiMgTE9DOjcge30gW10gZm9yIGluIGxlbmd0aCArIC9cclxuXHJcbmdpcmxzID0gW3tuYW1lOiAnU2FicmluYScsIGFnZTogMTJ9LCB7bmFtZTogJ0hlbGVuZScsIGFnZTogMTB9LCB7bmFtZTogJ0FubmEnLCBhZ2U6IDExfV1cclxuYm95cyA9IFt7bmFtZTogJ0RhdmlkJywgYWdlOiAxMH0sIHtuYW1lOiAnSGVucnknLCBhZ2U6IDExfSwge25hbWU6ICdOb2VsJywgYWdlOiAxNH0sIHtuYW1lOiAnTnVtYScsIGFnZTogM31dXHJcblxyXG5naXJsID0gZ2lybHNbMF1cclxuXHJcbm5hbWVzID0gKGtpZHMpIC0+IFtdXHJcbmFnZXMgPSAoa2lkcykgLT4gW11cclxuc3VtID0gKG51bWJlcnMpIC0+IDBcclxuYW50YWwgPSAobnVtYmVycykgLT4gMFxyXG5hdmcgPSAobnVtYmVycykgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZ2lybHMgPSBbe25hbWU6ICdTYWJyaW5hJywgYWdlOiAxMn0sIHtuYW1lOiAnSGVsZW5lJywgYWdlOiAxMH0sIHtuYW1lOiAnQW5uYScsIGFnZTogMTF9XVxyXG5ib3lzID0gW3tuYW1lOiAnRGF2aWQnLCBhZ2U6IDEwfSwge25hbWU6ICdIZW5yeScsIGFnZTogMTF9LCB7bmFtZTogJ05vZWwnLCBhZ2U6IDE0fSwge25hbWU6ICdOdW1hJywgYWdlOiAzfV1cclxuXHJcbm5hbWVzID0gKGtpZHMpIC0+IGtpZC5uYW1lIGZvciBraWQgaW4ga2lkc1xyXG5cclxuYWdlcyA9IChraWRzKSAtPiBraWQuYWdlIGZvciBraWQgaW4ga2lkc1xyXG5cclxuc3VtID0gKG51bWJlcnMpIC0+XHJcblx0cmVzID0gMFxyXG5cdHJlcyArPSBuIGZvciBuIGluIG51bWJlcnNcclxuXHRyZXNcclxuXHJcbmFudGFsID0gKG51bWJlcnMpIC0+IG51bWJlcnMubGVuZ3RoIFxyXG5cdFxyXG5hdmcgPSAobnVtYmVycykgLT4gc3VtKG51bWJlcnMpIC8gYW50YWwobnVtYmVycylcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJuYW1lcyBnaXJsc1wiIDogWydTYWJyaW5hJywgJ0hlbGVuZScsICdBbm5hJ11cclxuXHRcdFx0XHRcIm5hbWVzIGJveXNcIiA6IFsnRGF2aWQnLCAnSGVucnknLCAnTm9lbCcsJ051bWEnXVxyXG5cdFx0XHRcdFwiYWdlcyBnaXJsc1wiIDogWzEyLDEwLDExXVxyXG5cdFx0XHRcdFwiYWdlcyBib3lzXCIgOiBbMTAsMTEsMTQsM11cclxuXHRcdFx0XHRcInN1bSBhZ2VzIGdpcmxzXCIgOiAzM1xyXG5cdFx0XHRcdFwic3VtIGFnZXMgYm95c1wiIDogMzhcclxuXHRcdFx0XHRcImFudGFsIGdpcmxzXCIgOiAzXHJcblx0XHRcdFx0XCJhbnRhbCBib3lzXCIgOiA0XHJcblx0XHRcdFx0XCJhdmcgYWdlcyBnaXJsc1wiIDogMTFcclxuXHRcdFx0XHRcImF2ZyBhZ2VzIGJveXNcIiA6IDkuNVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiZ2lybFwiIDoge25hbWU6ICdTYWJyaW5hJywgYWdlOiAxMn1cclxuXHRcdFx0XHRcImdpcmxbJ25hbWUnXVwiIDogXCJTYWJyaW5hXCJcclxuXHRcdFx0XHRcImdpcmwubmFtZVwiIDogXCJTYWJyaW5hXCJcclxuXHRcdFx0XHRcImdpcmxbJ2FnZSddXCIgOiAxMlxyXG5cdFx0XHRcdFwiZ2lybC5hZ2VcIiA6IDEyXHJcblx0XHRcdFx0XCJnaXJscy5sZW5ndGhcIiA6IDNcclxuXHRcdFx0XHRcIl8uc2l6ZSBnaXJsXCIgOiAyXHJcblx0XHRcdFx0XCJfLmtleXMgZ2lybFwiIDogWyduYW1lJywnYWdlJ11cclxuXHRcdFx0XHRcIl8udmFsdWVzIGdpcmxcIiA6IFsnU2FicmluYScsMTJdXHJcblx0XHRcdFx0XCJfLnBhaXJzIGdpcmxcIiA6IFtbJ25hbWUnLCAnU2FicmluYSddLCBbJ2FnZScsIDEyXV1cclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRcInsgfVwiIDpcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanMvanNfb2JqZWN0cy5hc3BcIlxyXG5cclxuXHRcdEVhcnRoIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuZWFydGggPVxyXG5cdGV1cm9wZSA6XHJcblx0XHRzd2VkZW4gOiAxMFxyXG5cdFx0ZGVubWFyayA6IDVcclxuXHRhc2lhIDpcclxuXHRcdGNoaW5hIDogMTMwMFxyXG5cdFx0aW5kaWEgOiAxNTAwXHJcblx0XHRqYXBhbiA6IDEyMFxyXG5cclxuZiA9IC0+XHJcbmcgPSAtPlxyXG5oID0gLT4gZWFydGguZXVyb3BlLnN3ZWRlblxyXG5rID0gLT5cclxubCA9IC0+XHJcbm0gPSAtPlxyXG5uID0gLT5cclxuXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5lYXJ0aCA9XHJcblx0ZXVyb3BlIDpcclxuXHRcdHN3ZWRlbiA6IDEwXHJcblx0XHRkZW5tYXJrIDogNVxyXG5cdGFzaWEgOlxyXG5cdFx0Y2hpbmEgOiAxMzAwXHJcblx0XHRpbmRpYSA6IDE1MDBcclxuXHRcdGphcGFuIDogMTIwXHJcblxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImYoKVwiIDoge1wiZXVyb3BlXCI6e1wic3dlZGVuXCI6MTAsXCJkZW5tYXJrXCI6NX0sXCJhc2lhXCI6e1wiY2hpbmFcIjoxMzAwLFwiaW5kaWFcIjoxNTAwLFwiamFwYW5cIjoxMjB9fVxyXG5cdFx0XHRcdFwiZygpXCIgOiB7XCJzd2VkZW5cIjoxMCxcImRlbm1hcmtcIjo1fVxyXG5cdFx0XHRcdFwiaCgpXCIgOiAxMFxyXG5cdFx0XHRcdFwiaygpXCIgOiB7XCJjaGluYVwiOjEzMDAsXCJpbmRpYVwiOjE1MDAsXCJqYXBhblwiOjEyMH1cclxuXHRcdFx0XHRcImwoKVwiIDogMTMwMFxyXG5cdFx0XHRcdFwibSgpXCIgOiAxNTAwXHJcblx0XHRcdFx0XCJuKClcIiA6IDEyMFxyXG5cclxuXHRcdEdsb3NvciA6XHJcblx0XHRcdGI6XCJcIlwiXHJcblNXRV9FTkcgPSB7XHRib3JkOid0YWJsZScsXHRzdG9sOidjaGFpcicsXHRodW5kOidkb2cnLFx0IGthdHQ6J2NhdCcsICAgc2VsZmllOidzZWxmaWUnLCBwcm9ncmFtbWVyaW5nOidwcm9ncmFtbWluZycgfVxyXG5TV0VfR0VSID0ge1x0Ym9yZDonVGlzY2gnLFx0c3RvbDonU3R1aGwnLFx0aHVuZDonSHVuZCcsIGthdHQ6J0thdHplJywgc2VsZmllOidTZWxmaWUnLCBwcm9ncmFtbWVyaW5nOidQcm9ncmFtbWllcnVuZycgfVxyXG5cclxuc3dlMmVuZyA9IChvcmQpIC0+XHJcbmVuZzJzd2UgPSAob3JkKSAtPlxyXG5cclxuc3dlMmdlciA9IChvcmQpIC0+XHJcbmdlcjJzd2UgPSAob3JkKSAtPlxyXG5cclxuZW5nMmdlciA9IChvcmQpIC0+XHJcbmdlcjJlbmcgPSAob3JkKSAtPlxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuc3dlMmVuZyA9IChvcmQpIC0+IFNXRV9FTkdbb3JkXVxyXG5lbmcyc3dlID0gKG9yZCkgLT4gXy5pbnZlcnQoU1dFX0VORylbb3JkXVxyXG5cclxuc3dlMmdlciA9IChvcmQpIC0+IFNXRV9HRVJbb3JkXVxyXG5nZXIyc3dlID0gKG9yZCkgLT4gXy5pbnZlcnQoU1dFX0dFUilbb3JkXVxyXG5cclxuZW5nMmdlciA9IChvcmQpIC0+IHN3ZTJnZXIgZW5nMnN3ZSBvcmRcclxuZ2VyMmVuZyA9IChvcmQpIC0+IHN3ZTJlbmcgZ2VyMnN3ZSBvcmRcclxuXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwic3dlMmVuZyAnYm9yZCdcIiA6ICd0YWJsZSdcclxuXHRcdFx0XHRcImVuZzJzd2UgJ2RvZydcIiA6ICdodW5kJ1xyXG5cdFx0XHRcdFwic3dlMmdlciAncHJvZ3JhbW1lcmluZydcIiA6ICdQcm9ncmFtbWllcnVuZydcclxuXHRcdFx0XHRcImdlcjJzd2UgJ1NlbGZpZSdcIiA6ICdzZWxmaWUnXHJcblx0XHRcdFx0XCJlbmcyZ2VyICdjYXQnXCIgOiAnS2F0emUnXHJcblx0XHRcdFx0XCJnZXIyZW5nICdTdHVobCdcIiA6ICdjaGFpcidcclxuXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCJTV0VfRU5HWydib3JkJ11cIiA6IFwidGFibGVcIlxyXG5cdFx0XHRcdFwiXy5pbnZlcnQge2E6MSwgYjoyfVwiIDoge1wiMVwiOlwiYVwiLFwiMlwiOlwiYlwifVxyXG5cclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRcIl8uaW52ZXJ0XCIgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyNpbnZlcnRcIlxyXG5cclxuXHRcdFwiR2xvc29yW11cIiA6XHJcblx0XHRcdGI6XCJcIlwiXHJcblNXRSA9IFtcdCdib3JkJyxcdCAnc3RvbCcsICAnaHVuZCcsICdrYXR0JywgICdzZWxmaWUnLCAncHJvZ3JhbW1lcmluZycgIF1cclxuRU5HID0gW1x0J3RhYmxlJywgJ2NoYWlyJywgJ2RvZycsXHQnY2F0JywgICAnc2VsZmllJywgJ3Byb2dyYW1taW5nJyAgICBdXHJcbkdFUiA9IFtcdCdUaXNjaCcsICdTdHVobCcsICdIdW5kJywgJ0thdHplJywgJ1NlbGZpZScsICdQcm9ncmFtbWllcnVuZycgXVxyXG5cclxuc3dlMmVuZyA9IChvcmQpIC0+XHJcbmVuZzJzd2UgPSAob3JkKSAtPlxyXG5cclxuc3dlMmdlciA9IChvcmQpIC0+XHJcbmdlcjJzd2UgPSAob3JkKSAtPlxyXG5cclxuZW5nMmdlciA9IChvcmQpIC0+XHJcbmdlcjJlbmcgPSAob3JkKSAtPlxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuc3dlMmVuZyA9IChvcmQpIC0+IEVOR1tTV0UuaW5kZXhPZihvcmQpXVxyXG5lbmcyc3dlID0gKG9yZCkgLT4gU1dFW0VORy5pbmRleE9mKG9yZCldXHJcblxyXG5zd2UyZ2VyID0gKG9yZCkgLT4gR0VSW1NXRS5pbmRleE9mKG9yZCldXHJcbmdlcjJzd2UgPSAob3JkKSAtPiBTV0VbR0VSLmluZGV4T2Yob3JkKV1cclxuXHJcbmVuZzJnZXIgPSAob3JkKSAtPiBHRVJbRU5HLmluZGV4T2Yob3JkKV1cclxuZ2VyMmVuZyA9IChvcmQpIC0+IEVOR1tHRVIuaW5kZXhPZihvcmQpXVxyXG5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJzd2UyZW5nICdib3JkJ1wiIDogJ3RhYmxlJ1xyXG5cdFx0XHRcdFwiZW5nMnN3ZSAnZG9nJ1wiIDogJ2h1bmQnXHJcblx0XHRcdFx0XCJzd2UyZ2VyICdwcm9ncmFtbWVyaW5nJ1wiIDogJ1Byb2dyYW1taWVydW5nJ1xyXG5cdFx0XHRcdFwiZ2VyMnN3ZSAnU2VsZmllJ1wiIDogJ3NlbGZpZSdcclxuXHRcdFx0XHRcImVuZzJnZXIgJ2NhdCdcIiA6ICdLYXR6ZSdcclxuXHRcdFx0XHRcImdlcjJlbmcgJ1N0dWhsJ1wiIDogJ2NoYWlyJ1xyXG5cclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIlNXRS5pbmRleE9mICdrYXR0J1wiIDogM1xyXG5cdFx0XHRcdFwiRU5HWzNdXCIgOiBcImNhdFwiXHJcblx0XHRcdFx0XCJHRVJbM11cIiA6IFwiS2F0emVcIlxyXG5cclxuXHQnQTU6IFwiIFwiJyA6XHJcblxyXG5cdFx0SW50cm9kdWt0aW9uOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzo4IGxlbmd0aCBbXSAuLiArIFwiXCIgaW5kZXhPZiBzcGxpdCBqb2luIGZvciBpblxyXG5cclxuYW50YWwgPSAocykgLT4gMFxyXG50ZWNrZW4gPSAocyxpKSAtPiBcIlwiXHJcbm1pdHRpID0gKHMsaSxqKSAtPiBcIlwiXHJcbmtvbmthdGVuZXJhID0gKHMsdCkgLT4gXCJcIlxyXG5sZXRhID0gKHMsdCkgLT4gMFxyXG5zcGxpdHRyYSA9IChzLGF2Z3IpIC0+IFtdXHJcbmhvcHNsYWduaW5nID0gKGEsYXZncj0nJykgLT4gXCJcIlxyXG5kdWJibGEgPSAocykgLT4gXCJcIlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuYW50YWwgPSAocykgLT4gcy5sZW5ndGhcclxudGVja2VuID0gKHMsaSkgLT4gc1tpXVxyXG5taXR0aSA9IChzLGksaikgLT4gc1tpLi5qXVxyXG5rb25rYXRlbmVyYSA9IChzLHQpIC0+IHMgKyB0XHJcbmxldGEgPSAocyx0KSAtPiBzLmluZGV4T2YgdFxyXG5zcGxpdHRyYSA9IChzLGF2Z3IpIC0+IHMuc3BsaXQgYXZnclxyXG5ob3BzbGFnbmluZyA9IChhLGF2Z3I9JycpIC0+IGEuam9pbihhdmdyKVxyXG5kdWJibGEgPSAocykgLT4gaG9wc2xhZ25pbmcgKHRlY2tlbiArIHRlY2tlbiBmb3IgdGVja2VuIGluIHMpXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdCdhbnRhbCBcIkNvZmZlZVwiJyA6IDZcclxuXHRcdFx0XHQndGVja2VuIFwiQ29mZmVlXCIsMScgOiAnbydcclxuXHRcdFx0XHQnbWl0dGkgXCJDb2ZmZWVcIiwxLDMnIDogJ29mZidcclxuXHRcdFx0XHQnbWl0dGkgXCJDb2ZmZWVcIiwzLDUnIDogJ2ZlZSdcclxuXHRcdFx0XHQna29ua2F0ZW5lcmEgXCJDb2ZmZWVcIixcInNjcmlwdFwiJyA6ICdDb2ZmZWVzY3JpcHQnXHJcblx0XHRcdFx0J2xldGEgXCJDb2ZmZWVcIixcImVcIicgOiA0XHJcblx0XHRcdFx0J2xldGEgXCJDb2ZmZWVcIixcInhcIicgOiAtMVxyXG5cdFx0XHRcdFwic3BsaXR0cmEgJzIgMyArJywnICdcIiA6IFsnMicsICczJywgJysnXVxyXG5cdFx0XHRcdFwiaG9wc2xhZ25pbmcgWycyJywgJzMnLCAnKyddLCAnfCdcIiA6IFwiMnwzfCtcIlxyXG5cdFx0XHRcdCdkdWJibGEgXCJzY3JpcHRcIicgOiAnc3NjY3JyaWlwcHR0J1xyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdCdcIkphdmFzY3JpcHRcIi5sZW5ndGgnIDogMTBcclxuXHRcdFx0XHQnXCJKYXZhc2NyaXB0XCIuaW5kZXhPZiBcImFcIicgOiAxXHJcblx0XHRcdFx0J1wiMSwyLDNcIi5zcGxpdCBcIixcIicgOiBbXCIxXCIsXCIyXCIsXCIzXCJdXHJcblx0XHRcdFx0J1tcIjFcIixcIjJcIixcIjNcIl0uam9pbiBcIiBcIicgOiBcIjEgMiAzXCJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHQnXCIgXCInIDogXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX29ial9zdHJpbmcuYXNwXCJcdFx0XHRcdFxyXG5cdFx0XHRcdHNwbGl0OiBcImh0dHA6Ly9jb2ZmZWVzY3JpcHQtY29va2Jvb2suZ2l0aHViLmlvL2NoYXB0ZXJzL3N0cmluZ3Mvc3BsaXR0aW5nLWEtc3RyaW5nXCJcclxuXHRcdFx0XHRqb2luIDogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9qb2luXCJcclxuXHRcdFx0XHRpbmRleE9mIDogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mXCJcclxuXHJcblx0XHRQYWxpbmRyb20gOlxyXG5cdFx0XHRiIDogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgam9pbiByZXZlcnNlIHNwbGl0IFwiXCJcclxuXHRcdFx0IyBFdHQgcGFsaW5kcm9tIGJsaXIgc2FtbWEgb3JkIG9tIG1hbiB2w6RuZGVyIHDDpSBkZXQuXHJcblx0XHRcdCMgT3JkZXQgcGFsaW5kcm9tIMOkciBpbnRlIGV0dCBwYWxpbmRyb20uXHJcblxyXG5cdFx0XHRwYWxpbmRyb20gPSAod29yZCkgLT4gbnVsbFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnBhbGluZHJvbSA9ICh3b3JkKSAtPiB3b3JkLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpID09IHdvcmRcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJwYWxpbmRyb20gJ2JhZHJ1bSdcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJwYWxpbmRyb20gJ2vDtmsnXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJwYWxpbmRyb20gJ2thamFrJ1wiIDogdHJ1ZVxyXG5cdFx0XHRcdFwicGFsaW5kcm9tICdrYW5vdCdcIiA6IGZhbHNlXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0cmV2ZXJzZSA6IFwiaHR0cDovL2NvZmZlZXNjcmlwdC1jb29rYm9vay5naXRodWIuaW8vY2hhcHRlcnMvYXJyYXlzL3JldmVyc2luZy1hcnJheXNcIlxyXG5cclxuXHRcdFLDtnZhcnNwcsOlayA6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxIGZvciBpbiBpZiB0aGVuIGVsc2UgKyBqb2luICcnICgpXHJcblxyXG5cdFx0XHRycyA9ICh3b3JkLGV4dHJhPSdvJykgLT4gXCJcIlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnJzID0gKHdvcmQsZXh0cmE9J28nKSAtPiAoKGlmIGxldHRlciBpbiAnYWVpb3V5IMOlw6TDticgdGhlbiBsZXR0ZXIgZWxzZSBsZXR0ZXIgKyBleHRyYSArIGxldHRlcikgZm9yIGxldHRlciBpbiB3b3JkKS5qb2luKFwiXCIpXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwicnMgJ2thbGFzIGZpbnQnXCIgOiAna29rYWxvbGFzb3MgZm9maW5vbnRvdCdcclxuXHRcdFx0XHRcInJzICdib2tzdGF2J1wiIDogJ2JvYm9rb2tzb3N0b3Rhdm92J1xyXG5cdFx0XHRcdFwicnMgJ2thbGFzIGZpbnQnLCdpJ1wiIDogJ2tpa2FsaWxhc2lzIGZpZmluaW50aXQnXHJcblx0XHRcdFx0XCJycyAnYm9rc3RhdicsJ2UnXCIgOiAnYmVib2tla3Nlc3RldGF2ZXYnXHJcblx0XHRcdFx0XCJycyAna2FsYXMgZmludCcsJ2EnXCIgOiAna2FrYWxhbGFzYXMgZmFmaW5hbnRhdCdcclxuXHJcblx0XHRBZHZhbmNlZCA6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzo4IF8uc29tZSBfLmZpbHRlciBfLmNvdW50QnkgbGVuZ3RoIHNwbGl0IHJldmVyc2Ugam9pbiA9PSBhbmQgZm9yIGluIGNvbnRpbnVlXHJcblxyXG5leGlzdGVyYXIgPSAod29yZCkgLT5cclxucGFsaW5kcm9tZXIgPSAobikgLT4gW11cclxuZnJla3ZlbnMgPSAoKSAtPiAge31cclxua29yc29yZCA9IChwYXR0ZXJuKSAtPiBbXVxyXG5cclxud29yZHMgPSBvcmRsaXN0YS5zcGxpdCBcIiBcIlxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZXhpc3RlcmFyID0gKHdvcmQpIC0+IF8uc29tZSB3b3JkcywgKHcpIC0+IHc9PXdvcmRcclxucGFsaW5kcm9tZXIgPSAobikgLT4gXy5maWx0ZXIgd29yZHMsICh3KSAtPiB3Lmxlbmd0aCA9PSBuIGFuZCB3ID09IHcuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKVxyXG5mcmVrdmVucyA9ICgpIC0+ICBfLmNvdW50Qnkgd29yZHMsIFwibGVuZ3RoXCJcclxubWF0Y2ggPSAod29yZCxwYXR0ZXJuKSAtPlxyXG5cdGZvciBsZXR0ZXIsaSBpbiBwYXR0ZXJuXHJcblx0XHRpZiBsZXR0ZXIgIT0gJy4nIGFuZCBsZXR0ZXIgIT0gd29yZFtpXSB0aGVuXHRyZXR1cm4gZmFsc2VcclxuXHR0cnVlXHJcbmtvcnNvcmQgPSAocGF0dGVybikgLT4gXy5maWx0ZXIgd29yZHMsICh3KSAtPiB3Lmxlbmd0aCA9PSBwYXR0ZXJuLmxlbmd0aCBhbmQgbWF0Y2ggdyxwYXR0ZXJuXHJcblxyXG53b3JkcyA9IG9yZGxpc3RhLnNwbGl0IFwiIFwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiZXhpc3RlcmFyICdhamFiYWphJ1wiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZXhpc3RlcmFyICdzZWxmaWUnXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwicGFsaW5kcm9tZXIgNFwiIDogW1wiYWxsYVwiLFwiYW1tYVwiLFwiYXJyYVwiLFwiZXNzZVwiXVxyXG5cdFx0XHRcdFwicGFsaW5kcm9tZXIgNlwiIDogW1widGlsbGl0XCJdXHJcblx0XHRcdFx0XCJwYWxpbmRyb21lciA3XCIgOiBbXCJhamFiYWphXCIsXCJ0w6R0YXTDpHRcIl1cclxuXHRcdFx0XHRcImZyZWt2ZW5zKClcIiA6IHtcIjRcIjoyNTczLFwiNVwiOjQ1NjgsXCI2XCI6Njc2OSxcIjdcIjoxMDE4MSxcIjhcIjoxMzU3OCxcIjlcIjoxNDYwMH1cclxuXHRcdFx0XHRcImtvcnNvcmQgJ2IuLmwnXCIgOiBbXCJiYWxsXCIsIFwiYmlsbFwiLCBcImJvbGxcIiwgXCJicsO2bFwiXVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwid29yZHMubGVuZ3RoXCIgOiA1MjI2OVxyXG5cdFx0XHRcdFwiXy5maXJzdCB3b3Jkc1wiIDogXCJhYmFrdXNcIlxyXG5cdFx0XHRcdFwiXy5sYXN0IHdvcmRzXCIgOiBcIsO2dsOkcmxkXCJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHQnXy5zb21lJyA6IFwiaHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI3NvbWVcIlxyXG5cdFx0XHRcdCdfLmZpbHRlcicgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyNmaWx0ZXJcIlxyXG5cdFx0XHRcdCdfLmNvdW50QnknIDogXCJodHRwOi8vdW5kZXJzY29yZWpzLm9yZy8jY291bnRCeVwiXHJcblxyXG5cdFwiQTY6IEludGVycG9sYXRpb25cIiA6XHJcblxyXG5cdFx0bGluZWFyZXF1YXRpb24xOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSAqXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiAyICogeFwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJmIDJcIiA6IDRcclxuXHRcdFx0XHRcImYgM1wiIDogNlxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdFwiTGluasOkciBpbnRlcnBvbGF0aW9uXCIgOiBcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9pbnRlcnBvbGF0aW9uXCJcclxuXHJcblx0XHRsaW5lYXJlcXVhdGlvbjI6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxICogK1xyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImYgPSAoeCkgLT4gMyArIDIgKiB4XCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImYgMlwiIDogN1xyXG5cdFx0XHRcdFwiZiAzXCIgOiA5XHJcblx0XHRcdGU6XHJcblx0XHRcdFx0XCJMaW5qw6RyIGludGVycG9sYXRpb25cIiA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2ludGVycG9sYXRpb25cIlxyXG5cclxuXHRcdGxlcnA6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSAqICsgLVxyXG5cclxuXHRcdFx0bGVycCA9ICh5MSx5Mix4KSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImxlcnAgPSAoeTEseTIseCkgLT4geTEgKyAoeTIteTEpICogeFwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LC0xXCIgOiA0XHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LDBcIiA6IDEwXHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LDAuNVwiIDogMTNcclxuXHRcdFx0XHRcImxlcnAgMTAsMTYsMVwiIDogMTZcclxuXHRcdFx0XHRcImxlcnAgMTAsMTYsMlwiIDogMjJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRcIkxpbmrDpHIgaW50ZXJwb2xhdGlvblwiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lYXJfaW50ZXJwb2xhdGlvblwiXHJcblx0XHRcdFx0bGVycCA6IFwiaHR0cHM6Ly9wNWpzLm9yZy9yZWZlcmVuY2UvIy9wNS9sZXJwXCJcclxuXHRcdFxyXG5cdFx0bWFwOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSAqICsgLSAvXHJcblxyXG5cdFx0XHRtYXAgPSAoeCx4MSx4Mix5MSx5MikgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJtYXAgPSAoeCx4MSx4Mix5MSx5MikgLT4geTEgKyAoeTIteTEpICogKHgteDEpLyh4Mi14MSlcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwibWFwIDAsMSwzLDIwLDQwXCIgOiAxMFxyXG5cdFx0XHRcdFwibWFwIDEsMSwzLDIwLDQwXCIgOiAyMFxyXG5cdFx0XHRcdFwibWFwIDIsMSwzLDIwLDQwXCIgOiAzMFxyXG5cdFx0XHRcdFwibWFwIDMsMSwzLDIwLDQwXCIgOiA0MFxyXG5cdFx0XHRcdFwibWFwIDc1LDUwLDEwMCwwLDFcIiA6IDAuNVxyXG5cdFx0XHRcdFwibWFwIDE2LDAsNDAsMCwyMDBcIiA6IDgwXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0bWFwIDogXCJodHRwczovL3A1anMub3JnL3JlZmVyZW5jZS8jL3A1L21hcFwiXHRcclxuXHJcblx0XHRIb3VyMkRlZ3JlZTpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgbWFwICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0aDJkID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiaDJkID0gKHgpIC0+IG1hcCgxNS14LDAsMTIsMCwzNjApICUgMzYwXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImgyZCAwXCIgOiA5MFxyXG5cdFx0XHRcdFwiaDJkIDFcIiA6IDYwXHJcblx0XHRcdFx0XCJoMmQgMlwiIDogMzBcclxuXHRcdFx0XHRcImgyZCAzXCIgOiAwXHJcblx0XHRcdFx0XCJoMmQgNFwiIDogMzMwXHJcblx0XHRcdFx0XCJoMmQgNVwiIDogMzAwXHJcblx0XHRcdFx0XCJoMmQgNlwiIDogMjcwXHJcblx0XHRcdFx0XCJoMmQgN1wiIDogMjQwXHJcblx0XHRcdFx0XCJoMmQgOFwiIDogMjEwXHJcblx0XHRcdFx0XCJoMmQgOVwiIDogMTgwXHJcblx0XHRcdFx0XCJoMmQgMTBcIiA6IDE1MFxyXG5cdFx0XHRcdFwiaDJkIDExXCIgOiAxMjBcclxuXHRcdFx0XHRcImgyZCAxMlwiIDogOTBcclxuXHJcblx0XHRIb3VyMlJhZGlhbjpcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgbWFwICsgLSAqIC8gJSBNYXRoLlBJXHJcblxyXG5cdFx0XHRoMnIgPSAoeCkgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJoMnIgPSAoeCkgLT4gKG1hcCAxNS14LDAsMTIsMCwyKk1hdGguUEkpICUgKDIqTWF0aC5QSSlcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiaDJyIDBcIiA6IDMqTWF0aC5QSS82XHJcblx0XHRcdFx0I1wiaDJyIDFcIiA6IDIqTWF0aC5QSS82ICBkZWNpbWFsIHByb2JsZW1cclxuXHRcdFx0XHQjXCJoMnIgMlwiIDogMSpNYXRoLlBJLzYgIGRlY2ltYWwgcHJvYmxlbVxyXG5cdFx0XHRcdFwiaDJyIDNcIiA6IDAqTWF0aC5QSS82XHJcblx0XHRcdFx0XCJoMnIgNFwiIDogMTEqTWF0aC5QSS82XHJcblx0XHRcdFx0XCJoMnIgNVwiIDogMTAqTWF0aC5QSS82XHJcblx0XHRcdFx0XCJoMnIgNlwiIDogOSpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciA3XCIgOiA4Kk1hdGguUEkvNlxyXG5cdFx0XHRcdCNcImgyciA4XCIgOiA3Kk1hdGguUEkvNiAgZGVjaW1hbCBwcm9ibGVtXHJcblx0XHRcdFx0XCJoMnIgOVwiIDogNipNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciAxMFwiIDogNSpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciAxMVwiIDogNCpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciAxMlwiIDogMypNYXRoLlBJLzZcclxuXHJcblx0XCJBNzogY2xhc3NcIiA6XHJcblxyXG5cdFx0S2lkIDpcclxuXHRcdFx0YiA6IFwiXCJcIlxyXG4jIExPQzo4IGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBAIFtdIGZvciBpbiBsZW5ndGggKyAvXHJcbiMgSW5uYW4gZHUgbMO2c2VyIGRlbm5hIHVwcGdpZnQ6IEJlIGF0dCBmw6Ugc2UgQm91bmNpbmcgQmFsbHMhXHJcbiMgTE9DIGJldHlkZXIgTGluZXMgT2YgQ29kZSwgZHZzIGFudGFsIGtvZHJhZGVyLlxyXG4jIMOFdHRhIGtvZHJhZGVyIMOkciBsYWdvbSBmw7ZyIGRldHRhIHByb2JsZW0uXHJcbiMgRsOkcnJlIGlubmViw6RyIHPDpG1yZSBsw6RzYmFyaGV0LlxyXG4jIEhhciBkdSBmbGVyIGLDtnIgZHUgZnVuZGVyYSBww6UgZW4ga29ydGFyZSBsw7ZzbmluZy5cclxuXHJcbmNsYXNzIEtpZFxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUsYWdlKSAtPlxyXG5cclxuZ2lybHMgPSBbbmV3IEtpZCgnU2FicmluYScsMTIpLCBuZXcgS2lkKCdIZWxlbmUnLDEwKSwgbmV3IEtpZCgnQW5uYScsMTEpXVxyXG5ib3lzID0gW25ldyBLaWQoJ0RhdmlkJywxMCksIG5ldyBLaWQoJ0hlbnJ5JywxMSksIG5ldyBLaWQoJ05vZWwnLDE0KSwgbmV3IEtpZCgnTnVtYScsMyldXHJcblxyXG5uYW1lcyA9IChraWRzKSAtPiBbXVxyXG5hZ2VzID0gKGtpZHMpIC0+IFtdXHJcbnN1bSA9IChudW1iZXJzKSAtPiAwXHJcbmFudGFsID0gKG51bWJlcnMpIC0+IDBcclxuYXZlcmFnZSA9IChudW1iZXJzKSAtPiAwXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcblxyXG5jbGFzcyBLaWRcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSxAYWdlKSAtPlxyXG5cdFxyXG5naXJscyA9IFtuZXcgS2lkKCdTYWJyaW5hJywxMiksIG5ldyBLaWQoJ0hlbGVuZScsMTApLCBuZXcgS2lkKCdBbm5hJywxMSldXHJcbmJveXMgPSBbbmV3IEtpZCgnRGF2aWQnLDEwKSwgbmV3IEtpZCgnSGVucnknLDExKSwgbmV3IEtpZCgnTm9lbCcsMTQpLCBuZXcgS2lkKCdOdW1hJywzKV1cclxuXHJcbm5hbWVzID0gKGtpZHMpIC0+IGtpZC5uYW1lIGZvciBraWQgaW4ga2lkc1xyXG5cdFxyXG5hZ2VzID0gKGtpZHMpIC0+IGtpZC5hZ2UgZm9yIGtpZCBpbiBraWRzXHJcblxyXG5zdW0gPSAobnVtYmVycykgLT5cclxuXHRyZXMgPSAwXHJcblx0cmVzICs9IG4gZm9yIG4gaW4gbnVtYmVyc1xyXG5cdHJlc1xyXG5cclxuYW50YWwgPSAobnVtYmVycykgLT4gbnVtYmVycy5sZW5ndGggXHJcblxyXG5hdmVyYWdlID0gKG51bWJlcnMpIC0+IHN1bShudW1iZXJzKSAvIGFudGFsKG51bWJlcnMpXHJcblwiXCJcIlxyXG5cclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIm5hbWVzIGdpcmxzXCIgOiBbJ1NhYnJpbmEnLCAnSGVsZW5lJywgJ0FubmEnXVxyXG5cdFx0XHRcdFwibmFtZXMgYm95c1wiIDogWydEYXZpZCcsICdIZW5yeScsICdOb2VsJywnTnVtYSddXHJcblx0XHRcdFx0XCJhZ2VzIGdpcmxzXCIgOiBbMTIsMTAsMTFdXHJcblx0XHRcdFx0XCJhZ2VzIGJveXNcIiA6IFsxMCwxMSwxNCwzXVxyXG5cdFx0XHRcdFwic3VtIGFnZXMgZ2lybHNcIiA6IDMzXHJcblx0XHRcdFx0XCJzdW0gYWdlcyBib3lzXCIgOiAzOFxyXG5cdFx0XHRcdFwiYW50YWwgZ2lybHNcIiA6IDNcclxuXHRcdFx0XHRcImFudGFsIGJveXNcIiA6IDRcclxuXHRcdFx0XHRcImF2ZXJhZ2UgYWdlcyBnaXJsc1wiIDogMTFcclxuXHRcdFx0XHRcImF2ZXJhZ2UgYWdlcyBib3lzXCIgOiA5LjVcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRjbGFzcyA6IFwiaHR0cDovL2Jsb2cudGVhbXRyZWVob3VzZS5jb20vdGhlLWFic29sdXRlLWJlZ2lubmVycy1ndWlkZS10by1jb2ZmZWVzY3JpcHRcIlxyXG5cclxuXHRcdEJyw6VrdGFsIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6OCBjbGFzcyBjb25zdHJ1Y3RvciBuZXcgQCBpZiB0aGVuIGVsc2UgKiArIC0gLyAlID09XHJcblxyXG5nY2QgPSAoYSxiKSAtPiAxXHJcblxyXG5jbGFzcyBGcmFjdGlvblxyXG5cdGNvbnN0cnVjdG9yIDogKGEsYikgLT5cclxuXHR0b19zIDogLT4gXCIxLzFcIlxyXG5cdGFkZCA6IChvKSAtPiBuZXcgRnJhY3Rpb24gMSwxXHJcblx0c3ViIDogKG8pIC0+IG5ldyBGcmFjdGlvbiAxLDFcclxuXHRtdWwgOiAobykgLT4gbmV3IEZyYWN0aW9uIDEsMVxyXG5cdGRpdiA6IChvKSAtPiBuZXcgRnJhY3Rpb24gMSwxXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5nY2QgPSAoYSxiKSAtPiBpZiBiID09IDAgdGhlbiBhIGVsc2UgZ2NkIGIsIGEgJSBiXHJcblxyXG5jbGFzcyBGcmFjdGlvblxyXG5cdGNvbnN0cnVjdG9yIDogKEBhLEBiKSAtPiBbQGEsQGJdID0gW0BhL2djZChAYSxAYiksIEBiL2djZChAYSxAYildXHJcblx0dG9fcyA6IC0+IEBhICsgXCIvXCIgKyBAYlxyXG5cdGFkZCA6IChvKSAtPiBuZXcgRnJhY3Rpb24gQGEqby5iK0BiKm8uYSwgQGIqby5iXHJcblx0c3ViIDogKG8pIC0+IG5ldyBGcmFjdGlvbiBAYSpvLmItQGIqby5hLCBAYipvLmJcclxuXHRtdWwgOiAobykgLT4gbmV3IEZyYWN0aW9uIEBhKm8uYSwgQGIqby5iXHJcblx0ZGl2IDogKG8pIC0+IG5ldyBGcmFjdGlvbiBAYSpvLmIsIEBiKm8uYVxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImdjZCAyLDRcIiA6IDJcclxuXHRcdFx0XHRcImdjZCAxNSwyNVwiIDogNVxyXG5cdFx0XHRcdFwiKG5ldyBGcmFjdGlvbiAyLDQpLnRvX3MoKVwiIDogXCIxLzJcIlxyXG5cdFx0XHRcdFwiKG5ldyBGcmFjdGlvbiAzLDgpLnRvX3MoKVwiIDogXCIzLzhcIlxyXG5cdFx0XHRcdFwiKG5ldyBGcmFjdGlvbiAxLDIpLmFkZChuZXcgRnJhY3Rpb24gMSwzKS50b19zKClcIiA6IFwiNS82XCJcclxuXHRcdFx0XHRcIihuZXcgRnJhY3Rpb24gMSwyKS5zdWIobmV3IEZyYWN0aW9uIDEsMykudG9fcygpXCIgOiBcIjEvNlwiXHJcblx0XHRcdFx0XCIobmV3IEZyYWN0aW9uIDQsNikubXVsKG5ldyBGcmFjdGlvbiAxLDMpLnRvX3MoKVwiIDogXCIyLzlcIlxyXG5cdFx0XHRcdFwiKG5ldyBGcmFjdGlvbiA0LDYpLmRpdihuZXcgRnJhY3Rpb24gMiwxKS50b19zKClcIiA6IFwiMS8zXCJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRCcsOla3RhbCA6IFwiaHR0cDovL3d3dy5tYXR0ZWJva2VuLnNlL2xla3Rpb25lci9za29sYXItNy9icmFrLW9jaC1wcm9jZW50L2JyYWt0YWxcIlx0XHRcdFx0XHJcblxyXG5cdFx0U2ltcGxleCA6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjE0IGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBbXSBAXHQrIC0gKlxyXG4jIFRpcHM6IFNwZWxhIHA1Q29tcGxleCBpbm5hbiBkdSBww6Viw7ZyamFyIGRlbm5hIMO2dm5pbmcuXHJcblxyXG5jbGFzcyBTaW1wbGV4XHJcblx0Y29uc3RydWN0b3IgOiAoeCx5KSAtPlxyXG5cdHRyYW5zbGF0ZSA6IC0+IEBcclxuXHRzY2FsZSA6IC0+IEBcclxuXHRyb3RhdGUgOiAtPiBAXHJcblx0bWlycm9yIDogLT4gQFxyXG5cclxuYSA9IG5ldyBTaW1wbGV4IDEsM1xyXG5iID0gbmV3IFNpbXBsZXggLTIsNFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgU2ltcGxleFxyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5KSAtPlxyXG5cdHRyYW5zbGF0ZSA6IC0+XHJcblx0XHRAeCArPSAxXHJcblx0XHRAXHJcblx0c2NhbGUgOiAtPlxyXG5cdFx0W0B4LEB5XSA9IFsyKkB4LDIqQHldXHJcblx0XHRAXHJcblx0cm90YXRlIDogLT5cclxuXHRcdFtAeCxAeV0gPSBbLUB5LEB4XVxyXG5cdFx0QFxyXG5cdG1pcnJvciA6IC0+XHJcblx0XHRbQHgsQHldID0gW0B5LEB4XVxyXG5cdFx0QFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcInBwIGFcIiA6IFwie3g6MSx5OjN9XCJcclxuXHRcdFx0XHRcInBwIGEudHJhbnNsYXRlKClcIiA6IFwie3g6Mix5OjN9XCJcclxuXHRcdFx0XHRcInBwIGEuc2NhbGUoKVwiIDogXCJ7eDoyLHk6Nn1cIlxyXG5cdFx0XHRcdFwicHAgYS5yb3RhdGUoKVwiIDogXCJ7eDotMyx5OjF9XCJcclxuXHRcdFx0XHRcInBwIGEubWlycm9yKClcIiA6IFwie3g6Myx5OjF9XCJcclxuXHRcdFx0XHRcInBwIGEudHJhbnNsYXRlKCkuc2NhbGUoKVwiIDogXCJ7eDo0LHk6Nn1cIlxyXG5cdFx0XHRcdFwicHAgYS5zY2FsZSgpLnRyYW5zbGF0ZSgpXCIgOiBcInt4OjMseTo2fVwiXHJcblx0XHRcdFx0XCJwcCBiXCIgOiBcInt4Oi0yLHk6NH1cIlxyXG5cdFx0XHRcdFwicHAgYi50cmFuc2xhdGUoKVwiIDogXCJ7eDotMSx5OjR9XCJcclxuXHRcdFx0XHRcInBwIGIuc2NhbGUoKVwiIDogXCJ7eDotNCx5Ojh9XCJcclxuXHRcdFx0XHRcInBwIGIucm90YXRlKClcIiA6IFwie3g6LTQseTotMn1cIlxyXG5cdFx0XHRcdFwicHAgYi5taXJyb3IoKVwiIDogXCJ7eDo0LHk6LTJ9XCJcclxuXHRcdFx0XHRcInBwIGIudHJhbnNsYXRlKCkuc2NhbGUoKVwiIDogXCJ7eDotMix5Ojh9XCJcclxuXHRcdFx0XHRcInBwIGIuc2NhbGUoKS50cmFuc2xhdGUoKVwiIDogXCJ7eDotMyx5Ojh9XCJcclxuXHRcdFx0XHRcInBwIGIubWlycm9yKCkubWlycm9yKClcIiA6IFwie3g6LTIseTo0fVwiXHJcblx0XHRcdFx0XCJwcCBiLnJvdGF0ZSgpLnJvdGF0ZSgpLnJvdGF0ZSgpLnJvdGF0ZSgpXCIgOiBcInt4Oi0yLHk6NH1cIlxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdHA1Q29tcGxleCA6IFwiaHR0cHM6Ly9jaHJpc3Rlcm5pbHNzb24uZ2l0aHViLmlvL3A1Q29tcGxleC93d3dcIlxyXG5cclxuXHRcdEJpZ251bSA6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjIyIGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBAIHBhcnNlSW50IHJldmVyc2UgbGVuZ3RoIHB1c2ggZmxvb3Igc2xpY2UgdW5zaGlmdCBqb2luIGZvciBpZlxyXG4jIE1lZCBCaWdudW0ga2FuIG1hbiByw6RrbmEgZXhha3QgbWVkIHRhbCBtZWQgdHVzZW50YWxzIHNpZmZvci5cclxuIyBEdSBwcm9ncmFtbWVyYXIgcMOlIHNhbW1hIHPDpHR0IHNvbSBvbSBkdSByw6RrbmFyIG1lZCBwYXBwZXIgb2NoIHBlbm5hLlxyXG4jIE11bHRpcGxpa2F0aW9uZW4gYW52w6RuZGVyIHNpZyBhdiBhZGRpdGlvbmVuIHNhbXQgaW5za2lmdGFuZGUgYXYgbm9sbCBmw7ZyIHZhcmplIHNpZmZyYS5cclxuXHJcbmNsYXNzIEJpZ251bVxyXG5cdGNvbnN0cnVjdG9yIDogKHMpIC0+IEBsaXN0PVtdXHJcblx0dG9fcyA6ICgpIC0+IFwiXCJcclxuXHRhZGQgOiAob3RoZXIpIC0+IEBcclxuXHRtdWwgOiAob3RoZXIpIC0+IEBcclxuXHJcbmEgPSBuZXcgQmlnbnVtIFwiMTIzXCJcclxuYiA9IG5ldyBCaWdudW0gXCI4XCJcclxuYyA9IG5ldyBCaWdudW0gXCI5OTlcIlxyXG5kID0gbmV3IEJpZ251bSBcIjQ1NlwiXHJcbmUgPSBuZXcgQmlnbnVtIFwiMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIlxyXG5mID0gbmV3IEJpZ251bSBcIjFcIlxyXG5nID0gbmV3IEJpZ251bSBcIjFcIlxyXG5oID0gbmV3IEJpZ251bSBcIjJcIlxyXG5cclxuZyA9IGcuYWRkIGcgZm9yIGkgaW4gcmFuZ2UgMTAwXHJcbmggPSBoLm11bCBoIGZvciBpIGluIHJhbmdlIDdcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcblxyXG4jIG9ic2VydmVyYSBhdHQgcmV2ZXJzZSgpIHbDpG5kZXIgUMOFIHBsYXRzLlxyXG4jIGNsb25hIGTDpHJmw7ZyIG1lZCBzbGljZSgpIGkgdCBleCB0b19zXHJcbiNyZXZlcnNlcmEgPSAoYXJyKSAtPiBhcnIuc2xpY2UoKS5yZXZlcnNlKClcclxuXHJcbmNsYXNzIEJpZ251bVxyXG5cdGNvbnN0cnVjdG9yIDogKHMpIC0+XHJcblx0XHRAbGlzdCA9IChwYXJzZUludChjaCkgZm9yIGNoIGluIHMpXHJcblx0XHRAbGlzdC5yZXZlcnNlKClcclxuXHJcblx0dG9fcyA6ICgpIC0+IEBsaXN0LnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIilcclxuXHJcblx0YWRkIDogKG90aGVyKSAtPlxyXG5cdFx0aWYgQGxpc3QubGVuZ3RoIDwgb3RoZXIubGlzdC5sZW5ndGggdGhlbiByZXR1cm4gb3RoZXIuYWRkIEBcclxuXHRcdGNhcnJ5ID0gMFxyXG5cdFx0cmVzID0gbmV3IEJpZ251bSBcIlwiXHJcblx0XHRmb3IgZDEsIHBvcyBpbiBAbGlzdFxyXG5cdFx0XHRkID0gZDEgKyAob3RoZXIubGlzdFtwb3NdIHx8IDApICsgY2FycnlcclxuXHRcdFx0cmVzLmxpc3QucHVzaCBkICUgMTBcclxuXHRcdFx0Y2FycnkgPSBNYXRoLmZsb29yIGQgLyAxMFxyXG5cdFx0aWYgY2FycnkgdGhlbiByZXMubGlzdC5wdXNoIDFcclxuXHRcdHJlc1xyXG5cclxuXHRtdWwgOiAob3RoZXIpIC0+XHJcblx0XHRyZXMgPSBuZXcgQmlnbnVtIFwiXCJcclxuXHRcdGZvciBkaWdpdCxkIGluIG90aGVyLmxpc3Quc2xpY2UoKS5yZXZlcnNlKClcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgZGlnaXRcclxuXHRcdFx0XHRyZXMgPSByZXMuYWRkIEBcclxuXHRcdFx0aWYgZCA8IG90aGVyLmxpc3QubGVuZ3RoLTEgdGhlbiByZXMubGlzdC51bnNoaWZ0IDBcclxuXHRcdHJlc1xyXG5cclxuYSA9IG5ldyBCaWdudW0gXCIxMjNcIlxyXG5iID0gbmV3IEJpZ251bSBcIjhcIlxyXG5jID0gbmV3IEJpZ251bSBcIjk5OVwiXHJcbmQgPSBuZXcgQmlnbnVtIFwiNDU2XCJcclxuZSA9IG5ldyBCaWdudW0gXCIxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiXHJcbmYgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmcgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmggPSBuZXcgQmlnbnVtIFwiMlwiXHJcblxyXG5nID0gZy5hZGQgZyBmb3IgaSBpbiByYW5nZSAxMDBcclxuaCA9IGgubXVsIGggZm9yIGkgaW4gcmFuZ2UgN1xyXG5cclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJhLmxpc3RcIiA6IFszLDIsMV1cclxuXHRcdFx0XHRcImEudG9fcygpXCIgOiBcIjEyM1wiXHJcblx0XHRcdFx0XCJhLmFkZChiKS50b19zKClcIiA6IFwiMTMxXCJcclxuXHRcdFx0XHRcImIuYWRkKGEpLnRvX3MoKVwiIDogXCIxMzFcIlxyXG5cdFx0XHRcdFwiYS5hZGQoYykudG9fcygpXCIgOiBcIjExMjJcIlxyXG5cdFx0XHRcdFwiYS5hZGQoYikuYWRkKGMpLnRvX3MoKVwiIDogXCIxMTMwXCJcclxuXHRcdFx0XHRcImUuYWRkKGYpLnRvX3MoKVwiIDogXCIxMjM0NTY3ODkwMTIzNDU2Nzg5MVwiXHJcblx0XHRcdFx0XCJnLnRvX3MoKVwiIDogXCIxMjY3NjUwNjAwMjI4MjI5NDAxNDk2NzAzMjA1Mzc2XCJcclxuXHRcdFx0XHRcImEubXVsKGIpLnRvX3MoKVwiIDpcIjk4NFwiXHJcblx0XHRcdFx0XCJhLm11bChjKS50b19zKClcIiA6IFwiMTIyODc3XCJcclxuXHRcdFx0XHRcImEubXVsKGQpLnRvX3MoKVwiIDogXCI1NjA4OFwiXHJcblx0XHRcdFx0XCJoLnRvX3MoKVwiIDpcIjM0MDI4MjM2NjkyMDkzODQ2MzQ2MzM3NDYwNzQzMTc2ODIxMTQ1NlwiXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCJwYXJzZUludCAnMSdcIiA6IDFcclxuXHRcdFx0XHRcIlsxLDIsM10ucmV2ZXJzZSgpXCIgOiBbMywyLDFdXHJcblx0XHRcdFx0XCJbMSwyLDNdLmxlbmd0aFwiIDogM1xyXG5cdFx0XHRcdFwiTWF0aC5mbG9vciAzLjE0XCIgOiAzXHJcblx0XHRcdFx0XCJbMTEsMjIsMzNdLnNsaWNlIDFcIiA6IFsyMiwzM11cclxuXHRcdFx0XHRcIlsxMSwyMiwzM10uc2xpY2UgMSwyXCIgOiBbMjJdXHJcblx0XHRcdFx0XCJbMTEsMjIsMzNdLnNsaWNlKClcIiA6IFsxMSwyMiwzM11cclxuXHRcdFx0XHRcIjEyMzQ1Njc4OTAxMjM0NTY3ODkwICsgMVwiIDogMTIzNDU2Nzg5MDEyMzQ1NjcwMDBcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRCaWdudW0gOiBcImh0dHBzOi8vc3Yud2lraXBlZGlhLm9yZy93aWtpL0JpZ251bS1hcml0bWV0aWtcIlxyXG5cclxuXHRcdENvbXBsZXg6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzozMSBjbGFzcyBjb25zdHJ1Y3RvciBuZXcgQCAtPiBpZiArICogPT0gPiA8XHJcbiMgQsO2cmphIG1lZCBhdHQgZsOlIGJvcnQgb27DtmRpZ2Egbm9sbG9yIG9jaCBldHRvciBpIHRvX3MhXHJcblxyXG5jbGFzcyBDb21wbGV4XHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHkpIC0+XHJcblx0dG9fcyA6IC0+IEB4ICsgXCIgXCIgKyBAeSArIFwiaVwiXHJcblx0YWRkIDogKG90aGVyKSAtPiBAXHJcblx0bXVsIDogKG90aGVyKSAtPiBAXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuY2xhc3MgQ29tcGxleFxyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5KSAtPlxyXG5cdGFkZCA6IChvdGhlcikgLT5cclxuXHRcdG5ldyBDb21wbGV4IEB4K290aGVyLngsIEB5K290aGVyLnlcclxuXHRtdWwgOiAob3RoZXIpIC0+XHJcblx0XHRhID0gQHhcclxuXHRcdGIgPSBAeVxyXG5cdFx0YyA9IG90aGVyLnhcclxuXHRcdGQgPSBvdGhlci55XHJcblx0XHRuZXcgQ29tcGxleCBhKmMtYipkLCBiKmMrYSpkXHJcblx0dG9fcyA6IC0+XHJcblx0XHRzeCA9IFwiXCIgaWYgQHggPT0gMFxyXG5cdFx0c3ggPSBcIiN7QHh9XCIgaWYgQHggPiAwXHJcblx0XHRzeCA9IFwiI3tAeH1cIiBpZiBAeCA8IDBcclxuXHJcblx0XHRzeSA9IFwiXCIgaWYgQHkgPT0gMFxyXG5cdFx0c3kgPSBcIi1pXCIgaWYgQHkgPT0gLTFcclxuXHRcdHN5ID0gXCJpXCIgaWYgQHkgPT0gMVxyXG5cdFx0c3kgPSBcIiN7QHl9aVwiIGlmIEB5ID4gMVxyXG5cdFx0c3kgPSBcIiN7QHl9aVwiIGlmIEB5IDwgLTFcclxuXHJcblx0XHRpZiBzeCE9XCJcIiBhbmQgc3khPVwiXCJcclxuXHRcdFx0aWYgQHkgPCAwXHJcblx0XHRcdFx0cyA9IHN4K3N5XHJcblx0XHRcdGVsc2UgaWYgQHk9PTBcclxuXHRcdFx0XHRzID0gc3hcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHMgPSBzeCArIFwiK1wiICsgc3lcclxuXHRcdGVsc2UgaWYgQHg9PTAgYW5kIEB5PT0wXHJcblx0XHRcdHMgPSBcIjBcIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRzID0gc3ggKyBzeVxyXG5cdFx0c1xyXG5cdFx0XHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KC0xLDApLnRvX3MoKVwiIDpcIi0xXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KC0xLC0xKS50b19zKClcIiA6IFwiLTEtaVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgwLC0xKS50b19zKClcIiA6IFwiLWlcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMCwwKS50b19zKClcIiA6IFwiMFwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgwLDEpLnRvX3MoKVwiIDogXCJpXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDEsLTIpLnRvX3MoKVwiIDogXCIxLTJpXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDEsLTEpLnRvX3MoKVwiIDogXCIxLWlcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMSwwKS50b19zKClcIiA6IFwiMVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDEpLnRvX3MoKVwiIDogXCIxK2lcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMSwyKS50b19zKClcIiA6IFwiMSsyaVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDIpLmFkZChuZXcgQ29tcGxleCgxLC0xKSkudG9fcygpXCIgOiBcIjIraVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDIpLm11bChuZXcgQ29tcGxleCgxLC0xKSkudG9fcygpXCIgOiBcIjMraVwiXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0XCJLb21wbGV4YSB0YWxcIiA6IFwiaHR0cHM6Ly9zdi53aWtpcGVkaWEub3JnL3dpa2kvS29tcGxleGFfdGFsXCJcclxuXHJcblx0XHRQb2x5bm9tIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjUyIGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBbXSBAIG9yIGZvciBpbiByYW5nZSBsZW5ndGggKiogcHVzaCByZXZlcnNlIGpvaW4gI3t9XHJcbiMgVXBwZ2lmdGVuIGlubmVow6VsbGVyIG1hdGVtYXRpayBww6UgZ3ltbmFzaWVuaXbDpS5cclxuXHJcbmNsYXNzIFBvbHlub21cclxuXHRjb25zdHJ1Y3RvciA6IChsc3QpIC0+IEBsc3Q9W11cclxuXHR0b19zIDogLT4gXCJcIlxyXG5cdGFkZCA6IChvdGhlcikgLT4gQFxyXG5cdG11bCA6IChvdGhlcikgLT4gQFxyXG5cdHBvd2VyIDogKG4pIC0+IEBcclxuXHR2YWx1ZSA6ICh4KSAtPiAwXHJcblx0ZGlmZiA6IC0+IEBcclxuXHRpbnRlZyA6IC0+IEBcclxuXHRjb21wb3NlIDogKG90aGVyKVx0LT4gQFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jbGFzcyBQb2x5bm9tXHJcblx0Y29uc3RydWN0b3IgOiAoQGxzdCkgLT5cclxuXHJcblx0YWRkIDogKG90aGVyKSAtPlxyXG5cdFx0aCA9IFtdXHJcblx0XHRoW2ldID0gKGhbaV0gb3IgMCkgKyB2YWx1ZSBmb3IgdmFsdWUsaSBpbiBAbHN0XHJcblx0XHRoW2ldID0gKGhbaV0gb3IgMCkgKyB2YWx1ZSBmb3IgdmFsdWUsaSBpbiBvdGhlci5sc3RcclxuXHRcdG5ldyBQb2x5bm9tIGhcclxuXHJcblx0bXVsIDogKG90aGVyKSAtPlxyXG5cdFx0aCA9ICgwIGZvciBpIGluIHJhbmdlIEBsc3QubGVuZ3RoICsgb3RoZXIubHN0Lmxlbmd0aCAtIDEpXHJcblx0XHRmb3IgdmFsdWUxLGkxIGluIEBsc3RcclxuXHRcdFx0Zm9yIHZhbHVlMixpMiBpbiBvdGhlci5sc3RcclxuXHRcdFx0XHRpID0gaTEraTJcclxuXHRcdFx0XHRoW2ldID0gKGhbaV0gb3IgMCkgKyB2YWx1ZTEgKiB2YWx1ZTJcclxuXHRcdG5ldyBQb2x5bm9tIGhcclxuXHJcblx0cG93ZXIgOiAobikgLT5cclxuXHRcdHJlcyA9IG5ldyBQb2x5bm9tIFsxXVxyXG5cdFx0cmVzID0gcmVzLm11bCBAIGZvciBpIGluIHJhbmdlIG5cclxuXHRcdHJlc1xyXG5cclxuXHRjb21wb3NlIDogKG90aGVyKVx0LT5cclxuXHRcdHJlcyA9IG5ldyBQb2x5bm9tIFtdXHJcblx0XHRmb3IgdmFsdWUsaSBpbiBAbHN0XHJcblx0XHRcdHJlcyA9IHJlcy5hZGQgKG5ldyBQb2x5bm9tIFt2YWx1ZV0pLm11bCBvdGhlci5wb3dlciBpXHJcblx0XHRyZXNcclxuXHJcblx0dmFsdWUgOiAoeCkgLT5cclxuXHRcdHJlcyA9IDBcclxuXHRcdHJlcyArPSB2YWx1ZSAqIHggKiogaSBmb3IgdmFsdWUsaSBpbiBAbHN0XHJcblx0XHRyZXNcclxuXHJcblx0ZGlmZiA6IC0+XHJcblx0XHRsc3QgPSBbXVxyXG5cdFx0Zm9yIHZhbHVlLGkgaW4gQGxzdFxyXG5cdFx0XHRpZiBpICE9IDAgdGhlbiBsc3RbaS0xXSA9IGkqdmFsdWVcclxuXHRcdG5ldyBQb2x5bm9tIGxzdFxyXG5cclxuXHRpbnRlZyA6IC0+XHJcblx0XHRsc3QgPSBbMF1cclxuXHRcdGZvciB2YWx1ZSxpIGluIEBsc3RcclxuXHRcdFx0aSArPSAxXHJcblx0XHRcdGxzdFtpXSA9IHZhbHVlL2lcclxuXHRcdG5ldyBQb2x5bm9tIGxzdFxyXG5cclxuXHR0b19zIDogLT5cclxuXHRcdGFyciA9IFtdXHJcblx0XHRmb3IgaXRlbSxpIGluIEBsc3RcclxuXHRcdFx0aWYgaXRlbSA9PSAwIHRoZW4gY29udGludWVcclxuXHRcdFx0aWYgaXRlbSA9PSAxXHJcblx0XHRcdFx0aWYgaT09MCB0aGVuIGFyci5wdXNoIFwiMVwiXHJcblx0XHRcdFx0ZWxzZSBpZiBpPT0xIHRoZW4gYXJyLnB1c2ggXCJ4XCJcclxuXHRcdFx0XHRlbHNlIGFyci5wdXNoIFwieF5cIiArIGlcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGlmIGk9PTAgdGhlbiBhcnIucHVzaCBpdGVtXHJcblx0XHRcdFx0ZWxzZSBpZiBpPT0xIHRoZW4gYXJyLnB1c2ggaXRlbSArIFwiKnhcIlxyXG5cdFx0XHRcdGVsc2UgYXJyLnB1c2ggaXRlbSArIFwiKnheXCIgKyBpXHJcblx0XHRhcnIucmV2ZXJzZSgpXHJcblx0XHRhcnIuam9pbiBcIitcIlxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSw0LDNdKS5sc3RcIiA6IFs1LDQsM11cclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNCwzXSkubHN0XCIgOiBbNCwzXVxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFs1LDQsM10pLnRvX3MoKVwiIDogXCIzKnheMis0KngrNVwiXHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzAsMCwxXSkudG9fcygpXCIgOiBcInheMlwiXHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzUsNCwzXSkuYWRkKG5ldyBQb2x5bm9tIFs0LDNdKS50b19zKClcIiA6IFwiMyp4XjIrNyp4KzlcIlxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFs1LDQsM10pLm11bChuZXcgUG9seW5vbSBbNCwzXSkudG9fcygpXCIgOiBcIjkqeF4zKzI0KnheMiszMSp4KzIwXCJcclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSw0LDNdKS52YWx1ZSgyKVwiIDogMjVcclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSw0LDNdKS5wb3dlcigyKS5sc3RcIiA6IFsyNSw0MCw0NiwyNCw5XVxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFs0LDNdKS5wb3dlcigzKS5sc3RcIiA6IFs2NCwxNDQsMTA4LDI3XSBcclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSw0LDNdKS5kaWZmKCkubHN0XCIgOiBbNCw2XVxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFs1LDQsM10pLmludGVnKCkubHN0XCIgOiBbMCw1LDIsMV1cclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbMCwwLDFdKS5pbnRlZygpLnRvX3MoKVwiIDogXCIwLjMzMzMzMzMzMzMzMzMzMzMqeF4zXCJcclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbMCwwLDFdKS5pbnRlZygpLnZhbHVlKDMpXCIgOiA5XHJcblx0XHRcdFx0XCIobmV3IFBvbHlub20gWzMsMl0pLmNvbXBvc2UobmV3IFBvbHlub20gWzMsMl0pLmxzdFwiIDogWzksNF1cclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbMywyXSkuY29tcG9zZShuZXcgUG9seW5vbSBbNSwwLC0xXSkubHN0XCIgOiBbMTMsMCwtMl1cclxuXHRcdFx0XHRcIihuZXcgUG9seW5vbSBbNSwwLC0xXSkuY29tcG9zZShuZXcgUG9seW5vbSBbMywyXSkubHN0XCIgOiBbLTQsLTEyLC00XVxyXG5cdFx0XHRcdFwiKG5ldyBQb2x5bm9tIFs1LDAsLTFdKS5jb21wb3NlKG5ldyBQb2x5bm9tIFs1LDAsLTFdKS5sc3RcIiA6IFstMjAsMCwxMCwwLC0xXVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdFBvbHlub20gOiBcImh0dHA6Ly93d3cubWF0dGVib2tlbi5zZS9sZWt0aW9uZXIvbWF0dGUtMi9hbGdlYnJhL3BvbHlub21cIlxyXG5cdFx0XHRcdFBvbHlub21mdW5rdGlvbmVyIDogXCJodHRwOi8vd3d3Lm1hdHRlYm9rZW4uc2UvbGVrdGlvbmVyL21hdHRlLTMvcG9seW5vbS1vY2gtZWt2YXRpb25lci9wb2x5bm9tZnVua3Rpb25lclwiXHJcblx0XHRcdFx0XCJNdWx0aXBsaWthdGlvblwiIDogXCJodHRwOi8vd3d3Lm1hdHRlYm9rZW4uc2UvbGVrdGlvbmVyL21hdHRlLTMvcG9seW5vbS1vY2gtZWt2YXRpb25lci9tdWx0aXBsaWthdGlvbi1hdi1wb2x5bm9tXCJcclxuXHRcdFx0XHRcIlBvbHlub20sIHdpa2lwZWRpYVwiIDogXCJodHRwczovL3N2Lndpa2lwZWRpYS5vcmcvd2lraS9Qb2x5bm9tXCJcclxuXHJcblx0XHROaWFuIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MjAgY2xhc3MgY29uc3RydWN0b3IgbmV3IEAgc3BsaXQgZm9yIGluIG9mIHJlZHVjZSAqKiAmIGFuZCBwdXNoIFwiXCIgaW5kZXhPZiA+IGlmIHRoZW4gXy5jb3VudEJ5XHJcbiMgQmlsZGEgb3JkIG1lZCBmeXJhIHRpbGwgbmlvIGJva3N0w6R2ZXIuIERlbiBtaXR0ZXJzdGEgYm9rc3RhdmVuIG3DpXN0ZSBpbmfDpS5cclxuXHJcbmNsYXNzIE5pYW5cclxuXHRjb25zdHJ1Y3RvciA6IChsaXN0YT13b3JkcykgLT5cclxuXHRiaXRzIDogKHdvcmQpIC0+IDBcclxuXHRzb2x2ZSA6IChsZXR0ZXJzKSAtPiBbXVxyXG5cclxud29yZHMgPSBvcmRsaXN0YS5zcGxpdCBcIiBcIlxyXG5uaWFuID0gbmV3IE5pYW4oKVxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuXHJcbmNsYXNzIE5pYW5cclxuXHRjb25zdHJ1Y3RvciA6IChAd29yZHM9d29yZHMpIC0+XHJcblx0XHRAcGF0dGVybnMgPSAoQGJpdHMgd29yZCBmb3Igd29yZCBpbiBAd29yZHMpXHJcblxyXG5cdGJpdHMgOiAod29yZCkgLT4gd29yZC5zcGxpdChcIlwiKS5yZWR1Y2UgKChhY2MsY2gpIC0+IGFjY3woMiAqKiBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6w6XDpMO2XCIuaW5kZXhPZiBjaCkpLCAwXHJcblx0b2sgOiAoZjEsZjIpIC0+XHJcblx0XHRmb3IgY2gsIGYgb2YgZjJcclxuXHRcdFx0aWYgZiA+IGYxW2NoXSB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0dHJ1ZVxyXG5cclxuXHRzb2x2ZSA6IChsZXR0ZXJzKSAtPlxyXG5cdFx0bWFuZGF0b3J5ID0gbGV0dGVyc1s0XVxyXG5cdFx0cmVzID0gW11cclxuXHRcdHAgPSBAYml0cyBsZXR0ZXJzXHJcblx0XHRsZXR0ZXJzMSA9IGxldHRlcnMuc3BsaXQgXCJcIlxyXG5cdFx0ZnJlcTEgPSBfLmNvdW50QnkgbGV0dGVyczFcclxuXHRcdGZvciBwYXR0ZXJuLGkgaW4gQHBhdHRlcm5zXHJcblx0XHRcdGlmIChwICYgcGF0dGVybikgPT0gcGF0dGVyblxyXG5cdFx0XHRcdGxldHRlcnMyID0gQHdvcmRzW2ldLnNwbGl0IFwiXCJcclxuXHRcdFx0XHRmcmVxMiA9IF8uY291bnRCeSBsZXR0ZXJzMlxyXG5cdFx0XHRcdGlmIEBvayhmcmVxMSxmcmVxMikgYW5kIG1hbmRhdG9yeSBpbiBsZXR0ZXJzMiB0aGVuIHJlcy5wdXNoIEB3b3Jkc1tpXVxyXG5cdFx0cmVzXHJcbndvcmRzID0gb3JkbGlzdGEuc3BsaXQgXCIgXCJcclxubmlhbiA9IG5ldyBOaWFuKClcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJuaWFuLmJpdHMgJ2EnXCIgOiAxXHJcblx0XHRcdFx0XCJuaWFuLmJpdHMgJ2InXCIgOiAyXHJcblx0XHRcdFx0XCJuaWFuLmJpdHMgJ2MnXCIgOiA0XHJcblx0XHRcdFx0XCJuaWFuLmJpdHMgJ2FiYmEnXCIgOiAzXHJcblx0XHRcdFx0XCJuaWFuLmJpdHMgJ2FhYWFja2xtbidcIiA6IDE1MzY1XHJcblx0XHRcdFx0XCJuaWFuLmJpdHMgJ21hY2snXCIgOiA1MTI1XHJcblx0XHRcdFx0XCJuaWFuLnNvbHZlICdhYWFhY2tsbW4nXCIgOiBbXCJhbG1hbmFja2FcIiwgXCJhbmFja2FcIiwgXCJsYWNrXCIsIFwibGFja2FcIiwgXCJtYWNrXCIsIFwibWFja2FcIiwgXCJtYWNrbGFcIiwgXCJuYWNrYVwiXVxyXG5cdFx0XHRcdFwibmlhbi5zb2x2ZSAnZWVtbmNycnTDtidcIiA6IFtcImNlbWVudFwiLCBcImNlbWVudHLDtnJcIiwgXCJjZW50XCIsIFwiY2VudGVyXCIsIFwiY2VydFwiLCBcImNyw6htZVwiLCBcInJlY2VudFwiXVxyXG5cdFx0XHRcdFwibmlhbi5zb2x2ZSgncmFrZXV0cmFmJykubGVuZ3RoXCIgOiAzNFxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwid29yZHMubGVuZ3RoXCIgOiA1MjI2OVxyXG5cdFx0XHRcdFwiXy5maXJzdCB3b3Jkc1wiIDogXCJhYmFrdXNcIlxyXG5cdFx0XHRcdFwiXy5sYXN0IHdvcmRzXCIgOiBcIsO2dsOkcmxkXCJcclxuXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0TmlhbiA6IFwiaHR0cDovL3N2ZW5za2EtYXBwcy5zZS9pcGhvbmUtaXBhZC91bmRlcmhhbGxuaW5nL3N2ZC1uaWFuLWJhYnFwZy5odG1sXCJcclxuXHJcblxyXG5cdFwiQTg6IEFkdmFuY2VkXCIgOlxyXG5cclxuXHRcdHBhdGg6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIGNvbmNhdCBpZiB0aGVuIGVsc2VcclxuXHJcbnRyZWUgPSB7MzowLCA0OjgsIDU6MywgNjozLCAxMDo1LCA3OjUsIDEyOjYsIDg6NiwgMjA6MTAsIDk6NywgMjQ6MTIsIDE0OjEyfVxyXG5cclxucGF0aCA9ICh0cmVlLHgpIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxucGF0aCA9ICh0cmVlLHgpIC0+IGlmIHg9PTAgdGhlbiByZXR1cm4gW10gZWxzZSBbeF0uY29uY2F0IHBhdGggdHJlZSx0cmVlW3hdXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwicGF0aCB0cmVlLCA0XCIgOiBbNCw4LDYsM11cclxuXHRcdFx0XHRcInBhdGggdHJlZSwgMjBcIiA6IFsyMCwxMCw1LDNdXHJcblx0XHRcdFx0XCJwYXRoIHRyZWUsIDlcIiA6IFs5LDcsNSwzXVxyXG5cclxuXHRcdHN1bW1hOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBfLmlzRXF1YWwgXy5pc051bWJlciBfLmhlYWQgXy50YWlsXHJcblxyXG5zdW1tYSA9ICh0cmVlKSAtPiAwXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc3VtbWEgPSAodHJlZSkgLT4gcmV0dXJuIGlmIF8uaXNFcXVhbCB0cmVlLFtdIHRoZW4gMCBlbHNlIGlmIF8uaXNOdW1iZXIgdHJlZSB0aGVuIHRyZWUgZWxzZVx0c3VtbWEoXy5oZWFkIHRyZWUpICsgc3VtbWEgXy50YWlsIHRyZWVcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJzdW1tYSBbMSwyLDMsNF1cIiA6IDEwXHJcblx0XHRcdFx0XCJzdW1tYSBbMywgWzUsNl0sIFs3LDgsMTAsMTJdLCBbNCw5LDE0LFsyMCwyNF1dLCBbWzEyLDEzXSwxNF1dXCIgOiAxNjFcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIl8uaXNOdW1iZXIgJzEyJ1wiIDogZmFsc2VcclxuXHRcdFx0XHRcIl8uaXNOdW1iZXIgMTJcIiA6IHRydWVcclxuXHRcdFx0XHRcIl8uaXNOdW1iZXIgWzEyXVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIl8uaGVhZCBbMTEsMjIsMzNdXCIgOiAxMVxyXG5cdFx0XHRcdFwiXy50YWlsIFsxMSwyMiwzM11cIiA6IFsyMiwzM11cclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRcIl8uaXNFcXVhbFwiIDogXCJodHRwOi8vdW5kZXJzY29yZWpzLm9yZy8jaXNFcXVhbFwiXHJcblx0XHRcdFx0XCJfLmlzTnVtYmVyXCIgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyNpc051bWJlclwiXHJcblx0XHRcdFx0XCJfLmhlYWRcIiA6IFwiaHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI2hlYWRcIlxyXG5cdFx0XHRcdFwiXy50YWlsXCIgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyN0YWlsXCJcclxuXHJcblxyXG5cdFx0XCJsaXN0IHJlY3Vyc2lvblwiIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6NyB0eXBlb2YgaWYgdGhlbiBlbHNlIGZvciBpbiByYW5nZSBtaW4gbGVuZ3RoXHJcbiMgTMOkZ2cgbcOkcmtlIHRpbGwgamF2YXNjcmlwdHMgZmVsYWt0aWdhIGhhbnRlcmluZyBhdiB0YWwgdmlkIGrDpG1mw7ZyZWxzZSBhdiBsaXN0b3IuXHJcblxyXG5jb21wYXJlID0gKGEsYikgLT4gLTJcclxuXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jb21wYXJlID0gKGEsYikgLT5cclxuXHRpZiB0eXBlb2YgYSAhPSBcIm9iamVjdFwiXHJcblx0XHRpZiBhID4gYiB0aGVuIHJldHVybiAtMSBlbHNlIGlmIGEgPCBiIHRoZW4gcmV0dXJuIDEgZWxzZSByZXR1cm4gMFxyXG5cdGZvciBpIGluIHJhbmdlIG1pbiBhLmxlbmd0aCxiLmxlbmd0aFxyXG5cdFx0YyA9IGNvbXBhcmUgYVtpXSxiW2ldXHJcblx0XHRpZiBjICE9IDAgdGhlbiByZXR1cm4gY1xyXG5cdDBcclxuXCJcIlwiXHJcblx0XHRcdGM6XHRcclxuXHRcdFx0XHRcImNvbXBhcmUgMTEsIDJcIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxMV0sIFsyXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzExXSwgWzEwXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzExXSwgWzExXVwiIDogMFxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMl0sIFsxMV1cIiA6IDFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzEsWzIsM11dLCBbMSxbMiwzXV1cIiA6IDBcclxuXHRcdFx0XHRcImNvbXBhcmUgWzEwLFsyLDNdXSwgWzEsWzIsM11dXCIgOiAtMVxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMSxbMjAsM11dLCBbMSxbMiwzXV1cIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxLFsyLDMwXV0sIFsxLFsyLDNdXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjRdXSwgW1sxMiwxM10sMTRdXSwgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjNdXSwgW1sxMiwxM10sMTRdXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjRdXSwgW1sxMiwxM10sMTRdXSwgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjRdXSwgW1sxMiwxM10sMTRdXVwiIDogMFxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMywgWzUsNl0sIFs3LDgsMTAsMTJdLCBbNCw5LDE0LFsyMCwyNF1dLCBbWzEyLDEzXSwxNF1dLCBbMywgWzUsNl0sIFs3LDgsMTAsMTJdLCBbNCw5LDE0LFsyMCwyNV1dLCBbWzEyLDEzXSwxNF1dXCIgOiAxXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCJ0eXBlb2YgMVwiIDogXCJudW1iZXJcIlxyXG5cdFx0XHRcdFwidHlwZW9mIDMuMTRcIiA6IFwibnVtYmVyXCJcclxuXHRcdFx0XHQndHlwZW9mIFwiXCInIDogXCJzdHJpbmdcIlxyXG5cdFx0XHRcdFwidHlwZW9mIFtdXCIgOiBcIm9iamVjdFwiXHJcblx0XHRcdFx0XCJ0eXBlb2Yge31cIiA6IFwib2JqZWN0XCJcclxuXHRcdFx0XHRcIm1pbiAxLDJcIiA6IDFcclxuXHRcdFx0XHRcIm1pbiAyLDFcIiA6IDFcclxuXHRcdFx0XHRcIjExID4gMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiWzExXSA+IFsyXVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIlsxMV0gPiBbMTBdXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxMSA9PSAxMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdCdcIjExXCIgPT0gXCIxMVwiJyA6IHRydWVcclxuXHRcdFx0XHRcIlsxMV0gPT0gWzExXVwiIDogZmFsc2VcclxuXHJcblx0XHRmaWx0ZXI6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIGZpbHRlclxyXG5cclxuZGp1ciA9IFtcclxuXHR7bmFtbjonRmx1ZmZ5JyxhcnQ6J2thbmluJ31cclxuXHR7bmFtbjonS2FybycsYXJ0OidodW5kJ31cclxuXHR7bmFtbjonUm9ja3knLGFydDonaHVuZCd9XHJcblx0e25hbW46J0FsYmVydCcsYXJ0OidmaXNrJ31cclxuXHR7bmFtbjonVHJpeGllJyxhcnQ6J2thdHQnfVxyXG5cdHtuYW1uOidIZXJiZXJ0JyxhcnQ6J2Zpc2snfVxyXG5dXHJcblxyXG5nID0gKGRqdXIsIGFydCkgLT4gW11cclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuZyA9IChkanVyLCBhcnQpIC0+IGRqdXIuZmlsdGVyIChkKSAtPiBkLmFydCA9PSBhcnRcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiZyBkanVyLCdodW5kJ1wiIDogW3tuYW1uOidLYXJvJyxhcnQ6J2h1bmQnfSx7bmFtbjonUm9ja3knLGFydDonaHVuZCd9XVxyXG5cdFx0XHRcdFwiZyBkanVyLCdmaXNrJ1wiIDogW3tuYW1uOidBbGJlcnQnLGFydDonZmlzayd9LHtuYW1uOidIZXJiZXJ0JyxhcnQ6J2Zpc2snfV1cclxuXHRcdFx0XHRcImcgZGp1ciwna2FuaW4nXCIgOiBbe25hbW46J0ZsdWZmeScsYXJ0OidrYW5pbid9XVxyXG5cdFx0XHRcdFwiZyBkanVyLCdrYXR0J1wiIDogW3tuYW1uOidUcml4aWUnLGFydDona2F0dCd9XVxyXG5cdFx0XHRcdFwiZyBkanVyLCdwYXBlZ29qYSdcIiA6IFtdXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCJbMSwgLTIsIDAsIDMsIC00XS5maWx0ZXIgKHgpIC0+IHggPiAwXCIgOiBbMSwzXVxyXG5cdFx0XHRlOiBcclxuXHRcdFx0XHRmaWx0ZXIgOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2ZpbHRlclwiXHJcblxyXG5cdFx0Y29tcHJlaGVuc2lvbjpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgZm9yXHJcblxyXG5kanVyID0gW1xyXG5cdHtuYW1uOidGbHVmZnknLGFydDona2FuaW4nfVxyXG5cdHtuYW1uOidLYXJvJyxhcnQ6J2h1bmQnfVxyXG5cdHtuYW1uOidSb2NreScsYXJ0OidodW5kJ31cclxuXHR7bmFtbjonQWxiZXJ0JyxhcnQ6J2Zpc2snfVxyXG5cdHtuYW1uOidUcml4aWUnLGFydDona2F0dCd9XHJcblx0e25hbW46J0hlcmJlcnQnLGFydDonZmlzayd9XHJcbl1cclxuXHJcbm5hbW4gPSAoZGp1cikgLT4gW11cclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxubmFtbiA9IChkanVyKSAtPiAoZC5uYW1uIGZvciBkIGluIGRqdXIpXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwibmFtbiBkanVyXCIgOiBbJ0ZsdWZmeScsJ0thcm8nLCdSb2NreScsJ0FsYmVydCcsJ1RyaXhpZScsJ0hlcmJlcnQnXVxyXG5cdFx0XHRkOlxyXG5cdFx0XHRcdFwiKDIqKmkgZm9yIGkgaW4gcmFuZ2UgNSlcIiA6IFsxLDIsNCw4LDE2XVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdGNvbXByZWhlbnNpb24gOiBcImh0dHBzOi8vY29mZmVlc2NyaXB0LWNvb2tib29rLmdpdGh1Yi5pby9jaGFwdGVycy9hcnJheXMvbGlzdC1jb21wcmVoZW5zaW9uc1wiXHJcblxyXG5cdFx0cmVkdWNlOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSByZWR1Y2VcclxuXHJcbmljYSA9IFtcclxuXHR7cHJpczogMTIzLCBhbnRhbDoxfVxyXG5cdHtwcmlzOiAzNCwgYW50YWw6Mn1cclxuXHR7cHJpczogNzgsIGFudGFsOjR9XHJcblx0e3ByaXM6IDk2LCBhbnRhbDo1fVxyXG5dXHJcbmtvbnN1bSA9IFtcclxuXHR7cHJpczogMTAwLCBhbnRhbDoxfVxyXG5cdHtwcmlzOiAzMCwgYW50YWw6MX1cclxuXHR7cHJpczogNzAsIGFudGFsOjF9XHJcblx0e3ByaXM6IDkwLCBhbnRhbDoxfVxyXG5dXHJcblxyXG5zdW1tYSA9ICh2YXJvcikgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnN1bW1hID0gKHZhcm9yKSAtPiB2YXJvci5yZWR1Y2UgKChzdW0sIHZhcmEpIC0+IHN1bSArIHZhcmEucHJpcyAqIHZhcmEuYW50YWwpLCAwXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwic3VtbWEgaWNhXCIgOiA5ODNcclxuXHRcdFx0XHRcInN1bW1hIGtvbnN1bVwiIDogMjkwXHJcblx0XHRcdGQ6XHJcblx0XHRcdFx0XCJpY2EucmVkdWNlICgoc3VtLCB2YXJhKSAtPiBzdW0gKyB2YXJhLmFudGFsKSwgMFwiIDogMTJcclxuXHRcdFx0XHRcImtvbnN1bS5yZWR1Y2UgKChzdW0sIHZhcmEpIC0+IHN1bSArIHZhcmEucHJpcyksIDBcIiA6IDI5MFxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdHJlZHVjZSA6IFwiaHR0cHM6Ly9jb2ZmZWVzY3JpcHQtY29va2Jvb2suZ2l0aHViLmlvL2NoYXB0ZXJzL2FycmF5cy9yZWR1Y2luZy1hcnJheXNcIlxyXG5cclxuXHRcdHNvcnRCeTpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgXy5zb3J0QnlcclxuXHJcbmRqdXIgPSBbJ0ZsdWZmeScsJ0thcm8nLCdSb2NreScsJ0FsYmVydCcsJ1RyaXhpZScsJ0hlcmJlcnQnXVxyXG5cclxuc29ydGVyYSA9IChkanVyLGYpIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc29ydGVyYSA9IChkanVyLGYpIC0+IF8uc29ydEJ5IGRqdXIsIGZcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJzb3J0ZXJhIGRqdXIsIChkKSAtPiBkLmxlbmd0aFwiIDogW1wiS2Fyb1wiLFwiUm9ja3lcIixcIkZsdWZmeVwiLFwiQWxiZXJ0XCIsXCJUcml4aWVcIixcIkhlcmJlcnRcIl1cclxuXHRcdFx0XHRcInNvcnRlcmEgZGp1clwiIDogW1wiQWxiZXJ0XCIsXCJGbHVmZnlcIixcIkhlcmJlcnRcIixcIkthcm9cIixcIlJvY2t5XCIsXCJUcml4aWVcIl1cclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIl8uc29ydEJ5IFsnb25lJywgJ3R3bycsICd0aHJlZScsICdmb3VyJ10sICdsZW5ndGgnXCIgOiBbXCJvbmVcIiwgXCJ0d29cIixcImZvdXJcIixcInRocmVlXCJdXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0XCJfLnNvcnRCeVwiIDogXCJodHRwOi8vdW5kZXJzY29yZWpzLm9yZy8jc29ydEJ5XCJcclxuXHJcblx0XHRncm91cEJ5OlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBfLmdyb3VwQnlcclxuXHJcbmRqdXIgPSBbJ0ZsdWZmeScsJ0thcm8nLCdSb2NreScsJ0FsYmVydCcsJ1RyaXhpZScsJ0hlcmJlcnQnXVxyXG5cclxuZ3J1cHBlcmEgPSAoZGp1cixmKSAtPiB7fVxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmdydXBwZXJhID0gKGRqdXIsZikgLT4gXy5ncm91cEJ5IGRqdXIsIGZcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJncnVwcGVyYSBkanVyLCAoZCkgLT4gZC5sZW5ndGhcIiA6IHtcIjRcIjpbXCJLYXJvXCJdLFwiNVwiOltcIlJvY2t5XCJdLFwiNlwiOltcIkZsdWZmeVwiLFwiQWxiZXJ0XCIsXCJUcml4aWVcIl0sXCI3XCI6W1wiSGVyYmVydFwiXX1cclxuXHRcdFx0XHRcImdydXBwZXJhIGRqdXIsIChkKSAtPiBfLmxhc3QoZClcIiA6IHtcInlcIjpbXCJGbHVmZnlcIixcIlJvY2t5XCJdLFwib1wiOltcIkthcm9cIl0sXCJ0XCI6W1wiQWxiZXJ0XCIsXCJIZXJiZXJ0XCJdLFwiZVwiOltcIlRyaXhpZVwiXX1cclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIl8uZ3JvdXBCeSBbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCdcIiA6IHszOiBbXCJvbmVcIiwgXCJ0d29cIl0sIDU6IFtcInRocmVlXCJdfVxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdFwiXy5ncm91cEJ5XCIgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyNncm91cEJ5XCJcclxuXHJcblx0XHRzcGxpdDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgc3BsaXQgZm9yIGluIF8ub2JqZWN0XHJcblxyXG5wYXJhbWV0cmFyID0gKHVybCkgLT4ge31cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5wYXJhbWV0cmFyID0gKHVybCkgLT4gXy5vYmplY3QoZi5zcGxpdCAnPScgZm9yIGYgaW4gdXJsLnNwbGl0KCc/JylbMV0uc3BsaXQoJyYnKSlcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJwYXJhbWV0cmFyICdkbi5zZT94PTAmeT0xJ1wiIDoge3g6JzAnLCB5OicxJ31cclxuXHRcdFx0XHRcInBhcmFtZXRyYXIgJ3N2ZC5zZT9wYWdlPTcnXCIgOiB7cGFnZSA6ICc3J31cclxuXHRcdFx0XHRcInBhcmFtZXRyYXIgJ2FmdG9uYmxhZGV0LnNlP2FydGljbGU9MTIzNDU2JmRhdGU9MjAxNi0xMi0wMSdcIiA6IHthcnRpY2xlOicxMjM0NTYnLCBkYXRlOicyMDE2LTEyLTAxJ31cclxuXHRcdFx0XHRcInBhcmFtZXRyYXIgJ2V4cHJlc3Nlbi5zZT9jaXR5PVN0b2NraG9sbSdcIiA6IHtjaXR5IDogJ1N0b2NraG9sbSd9XHJcblx0XHRcdFx0XCJwYXJhbWV0cmFyICdodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vc2VhcmNoP3E9Y29mZmVlc2NyaXB0J1wiIDoge3EgOiAnY29mZmVlc2NyaXB0J31cclxuXHRcdFx0ZDpcclxuXHRcdFx0XHRcIicxLDIsMycuc3BsaXQgJywnXCIgOiBbXCIxXCIsXCIyXCIsXCIzXCJdXHJcblx0XHRcdFx0XCJfLm9iamVjdCBbJ21vZScsICdsYXJyeScsICdjdXJseSddLCBbMzAsIDQwLCA1MF1cIiA6IHttb2U6IDMwLCBsYXJyeTogNDAsIGN1cmx5OiA1MH1cclxuXHRcdFx0XHRcIl8ub2JqZWN0IFtbJ21vZScsIDMwXSwgWydsYXJyeScsIDQwXSwgWydjdXJseScsIDUwXV1cIiA6IHttb2U6IDMwLCBsYXJyeTogNDAsIGN1cmx5OiA1MH1cclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRcIl8ub2JqZWN0XCIgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyNvYmplY3RcIlxyXG5cdFx0XHRcdHNwbGl0IDogXCJodHRwczovL2NvZmZlZXNjcmlwdC1jb29rYm9vay5naXRodWIuaW8vY2hhcHRlcnMvc3RyaW5ncy9zcGxpdHRpbmctYS1zdHJpbmdcIlxyXG5cclxuXHJcblx0XHRQb2tlckhhbmQgOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MTAgbmlsc3NvbjogY29tcGFyZSBic29ydCB1bmRlcnNjb3JlOiBfLnNpemUgXy5ncm91cEJ5IF8udW56aXAgXy51bmlxIFwiXCIgW10ge31cclxuIyBqYXZhc2NyaXB0OiBmb3IgaW4gaWYgdGhlbiBlbHNlIHN1YnN0cmluZyBsZW5ndGggcGFyc2VJbnQgc3BsaXQgaW5kZXhPZlxyXG5cclxucG9rZXIgPSAoYSxiKSAtPiAtMlxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnBva2VyID0gKGEsYikgLT4gY29tcGFyZSBjYWxjKGEuc3BsaXQoXCIgXCIpKSwgY2FsYyhiLnNwbGl0KFwiIFwiKSlcclxuY2FsYyA9IChoYW5kKSAtPlxyXG5cdGdyb3VwcyA9IF8uZ3JvdXBCeSgnICAyMzQ1Njc4OVRKUUtBJy5pbmRleE9mKGNhcmRbMl0pIGZvciBjYXJkIGluIGhhbmQpXHJcblx0W3Njb3JlLCByYW5rc10gPSBfLnVuemlwIHJldmVyc2UgYnNvcnQgKFtjbnQubGVuZ3RoLCBwYXJzZUludChyYW5rKV0gZm9yIHJhbmssIGNudCBvZiBncm91cHMpXHJcblx0aWYgc2NvcmUubGVuZ3RoID09IDVcclxuXHRcdGlmIGNvbXBhcmUocmFua3MsIFsxNCw1LDQsMywyXSk9PTAgdGhlbiByYW5rcyA9IFs1LDQsMywyLDFdXHJcblx0XHRzdHJhaWdodCA9IGlmIHJhbmtzWzBdIC0gcmFua3NbNF0gPT0gNCB0aGVuIDEgZWxzZSAwXHJcblx0XHRmbHVzaCA9IGlmIF8uc2l6ZShfLnVuaXEoc3VpdC5zdWJzdHJpbmcoMCwyKSBmb3Igc3VpdCBpbiBoYW5kKSkgPT0gMSB0aGVuIDEgZWxzZSAwXHJcblx0XHRzY29yZSA9IFtbWzFdLCBbMywxLDEsMV1dLCBbWzMsMSwxLDJdLCBbNV1dXVtmbHVzaF1bc3RyYWlnaHRdXHJcblx0W3Njb3JlLCByYW5rc11cclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJwb2tlciAna2w4IHJ1QSBydTgga2xBIGtsOScsICdydTcgc3AyIHJ1NSBzcDMga2xBJ1wiOiAtMVxyXG5cdFx0XHRcdFwicG9rZXIgJ2tsOCBzcFQga2xLIGhqOSBzcDQnLCAncnU3IHNwMiBydTUgc3AzIGtsQSdcIjogMVxyXG5cdFx0XHRcdFwicG9rZXIgJ2tsOCBydUEgcnU4IGtsQSBrbDknLCAna2w4IHJ1QSBydTgga2xBIGtsVCdcIjogMVxyXG5cdFx0XHRcdFwicG9rZXIgJ2tsOCBydUEgcnU4IGtsQSBrbDknLCAna2w4IHJ1QSBydTgga2xBIGtsNydcIjogLTFcclxuXHRcdFx0XHRcInBva2VyICdrbDggcnVBIHJ1OCBrbEEga2w5JywgJ2tsVCBydUEgcnVUIGtsQSBrbDknXCI6IDFcclxuXHRcdFx0XHRcInBva2VyICdzcEEgc3AyIHNwMyBzcDQgc3A1JywgJ3J1QSBydTIgcnUzIHJ1NCBydTUnXCI6IDBcclxuXHRcdFx0XHRcInBva2VyICdzcEEgaGpBIHJ1QSBrbEEgc3A1JywgJ3J1QSBydTIgcnUzIHJ1NCBydTUnXCI6IDFcclxuXHRcdFx0XHRcInBva2VyICdydTcgc3A3IGhqNyBrbDcgc3BKJywgJ3J1NiBzcDUgaGo2IGtsNiBzcFEnXCI6IC0xXHJcblx0XHRcdFx0XCJwb2tlciAncnU4IHNwOCBoajgga2w5IHNwOScsICdydTYgc3A2IGhqNiBydTkgaGo5J1wiOiAtMVxyXG5cdFx0XHRcdFwicG9rZXIgJ3J1NyBydTMgcnU1IHJ1OSBydUsnLCAnaGo3IGhqMyBoajUgaGo5IGhqSydcIjogMFxyXG5cdFx0XHRcdFwicG9rZXIgJ3J1NyBydTMgcnU1IHJ1OSBydUsnLCAnaGo3IGhqMyBoajUgaGo5IGhqSydcIjogMFxyXG5cdFx0XHRcdFwicG9rZXIgJ3J1NyBydTMgcnU1IHJ1OSBydUsnLCAnaGo3IGhqMyBoajUgaGo5IGhqSydcIjogMFxyXG5cdFx0XHRcdFwicG9rZXIgJ3J1NyBoajggcnU5IGhqNSBydTYnLCAnaGo3IHJ1OCBrbDkgaGpUIHNwNidcIjogMVxyXG5cdFx0XHRcdFwicG9rZXIgJ3J1NyBoajggcnU4IGtsOCBydUonLCAna2w3IGhqOSBydTkga2w5IHJ1USdcIjogMVxyXG5cdFx0XHRcdFwicG9rZXIgJ3J1NyBoajcgcnU4IGtsOCBydUonLCAnc3A3IGtsNyBzcDggaGo4IHJ1VCdcIjogLTFcclxuXHRcdFx0XHRcInBva2VyICdoajcga2wzIHNwMyBrbDQgaGpBJywgJ3NwNyBoajMgcnUzIGtsSyBzcEEnXCI6IDFcclxuXHRcdFx0XHRcInBva2VyICdzcDcgaGozIHJ1MiBrbDQgc3BBJywgJ2hqNyBydTMgcnU1IHNwNCBoakEnXCI6IDFcclxuXHRcdFx0ZDpcclxuXHRcdFx0XHQnWzEsMiwzXSA9PSBbMSwyLDNdJyA6IGZhbHNlXHJcblx0XHRcdFx0JzIgPCAxMScgOiB0cnVlXHJcblx0XHRcdFx0J1wiMlwiIDwgXCIxMVwiJyA6IGZhbHNlXHJcblx0XHRcdFx0J1syXSA8IFsxMV0nIDogZmFsc2VcclxuXHRcdFx0XHQnW1wiMlwiXSA8IFtcIjExXCJdJyA6IGZhbHNlXHJcblx0XHRcdFx0J2NvbXBhcmUgWzJdLCBbMTFdJyA6IDFcclxuXHRcdFx0XHQnY29tcGFyZSBbMSwyLDNdLCBbMSwyLDNdJyA6IDBcclxuXHRcdFx0XHQnY29tcGFyZSBbMTFdLCBbMl0nIDogLTFcclxuXHRcdFx0XHQnYnNvcnQgWzQ3LDEyLDI1XScgOiBbMTIsMjUsNDddXHJcblx0XHRcdFx0J2Jzb3J0IFtbMTEsMTNdLFsxMSwxMl0sWzIsMl1dJyA6IFtbMiwyXSxbMTEsMTJdLFsxMSwxM11dXHJcblx0XHRcdFx0J2Jzb3J0IFtbMTEsMTNdLFsxMSwxMl0sWzIsMl1dLCAoYSxiKSAtPiBjb21wYXJlIGIsYScgOiBbWzExLDEzXSxbMTEsMTJdLFsyLDJdXVxyXG5cdFx0XHRcdCdic29ydCBbXCJwZXJcIiwgXCJhbm5hXCIsIFwiYm9cIl0nIDogW1wiYW5uYVwiLFwiYm9cIixcInBlclwiXVxyXG5cdFx0XHRcdCdfLmdyb3VwQnkgW1wicGVyXCIsIFwiYW5uYVwiLCBcImthcmxcIl0sIFwibGVuZ3RoXCInIDoge1wiM1wiOltcInBlclwiXSxcIjRcIjpbXCJhbm5hXCIsXCJrYXJsXCJdfVxyXG5cdFx0XHRcdCdfLnVuemlwIFtbXCJtb2VcIiwgMzAsIHRydWVdLCBbXCJsYXJyeVwiLCA0MCwgZmFsc2VdXScgOiBbWydtb2UnLCAnbGFycnknXSwgWzMwLCA0MF0sIFt0cnVlLCBmYWxzZV1dXHJcblx0XHRcdFx0J18udW5pcSBbNSw0LDEsMiwxLDldJyA6IFs1LDQsMSwyLDldXHJcblxyXG5cdFx0XHRlOlxyXG5cdFx0XHRcdFBva2VyaGFuZCA6IFwiaHR0cHM6Ly9zdi53aWtpcGVkaWEub3JnL3dpa2kvUG9rZXJoYW5kXCJcclxuXHRcdFx0XHRcIl8uc2l6ZVwiIDogXCJodHRwOi8vdW5kZXJzY29yZWpzLm9yZy8jc2l6ZVwiXHJcblx0XHRcdFx0XCJfLnVuemlwXCIgOiBcImh0dHA6Ly91bmRlcnNjb3JlanMub3JnLyN1bnppcFwiXHJcblx0XHRcdFx0XCJfLnVuaXFcIiA6IFwiaHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI3VuaXFcIlxyXG4gXHJcblxyXG5cdFx0TWF0ZW1hdGlrIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjE3IGlmIHRoZW4gZWxzZSAqIC8gKyAtICUgKiogTWF0aC5zcXJ0ID09IDw9IGZvciBpbiByYW5nZSBbXSBjb25jYXRcclxuXHJcbmEgPSAoeCkgLT4gMCBcclxuYiA9ICh4KSAtPiAwIFxyXG5jID0gKHgpIC0+IDAgXHJcbmQgPSAoeCkgLT4gMCBcclxuZSA9ICh4KSAtPiAwIFxyXG5oID0gKG4pIC0+IDBcclxuZiA9ICh4KSAtPiAwIFxyXG5nID0gKG4pIC0+IDBcclxuayA9ICh4LHkpIC0+IDBcclxubCA9IChhLGIpIC0+IFswLDBdXHJcbnAgPSAoYSxiKSAtPiAwXHJcbm4gPSAoeSkgLT4gZmFsc2VcclxubSA9IChuKSAtPiBbXVxyXG5xID0gKG4pIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5hID0gKG4pIC0+IDIqbisxXHJcbmIgPSAobikgLT4gMipuKzJcclxuYyA9IChuKSAtPiAoLTEpKipuICogblxyXG5kID0gKG4pIC0+IDEwKipuXHJcbmUgPSAobikgLT4gMioqblxyXG5oID0gKG4pIC0+IGlmIG49PTAgdGhlbiAwIGVsc2UgbitoKG4tMSlcclxuZiA9IChuKSAtPiBpZiBuPT0wIHRoZW4gMSBlbHNlIG4qZihuLTEpXHJcbmcgPSAobikgLT4gaWYgbjw9MSB0aGVuIDEgZWxzZSBnKG4tMSkgKyBnKG4tMilcclxuayA9ICh4LHkpIC0+IGlmIHkgPT0gMCB0aGVuIHggZWxzZSBrIHksIHggJSB5XHJcbmwgPSAoYSxiKSAtPiBbYS9rKGEsYiksYi9rKGEsYildXHJcbnAgPSAoYSxiKSAtPiBNYXRoLnNxcnQoYSphK2IqYilcclxubiA9ICh5KSAtPiBpZiB5JTEwMD09MCB0aGVuIHklNDAwPT0wIGVsc2UgeSU0PT0wXHJcbm0gPSAobikgLT4gaSBmb3IgaSBpbiBbMi4uLm5dIHdoZW4gbiAlIGkgPT0gMFxyXG5xID0gKG4pIC0+XHJcblx0Zm9yIGkgaW4gcmFuZ2Ugbi0xLDEsLTFcclxuXHRcdHYgPSBpIGlmIG4laT09MFxyXG5cdGlmIHYgdGhlbiBbdl0uY29uY2F0IHEobi92KSBlbHNlIFtuXVxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImEoaSkgZm9yIGkgaW4gcmFuZ2UgMTJcIiA6IFsxLDMsNSw3LDksMTEsMTMsMTUsMTcsMTksMjEsMjNdXHJcblx0XHRcdFx0XCJiKGkpIGZvciBpIGluIHJhbmdlIDEyXCIgOiBbMiw0LDYsOCwxMCwxMiwxNCwxNiwxOCwyMCwyMiwyNF1cclxuXHRcdFx0XHRcImMoaSkgZm9yIGkgaW4gcmFuZ2UgMTJcIiA6IFswLC0xLDIsLTMsNCwtNSw2LC03LDgsLTksMTAsLTExXVxyXG5cdFx0XHRcdFwiZChpKSBmb3IgaSBpbiByYW5nZSA2XCIgOiBbMSwxMCwxMDAsMTAwMCwxMDAwMCwxMDAwMDBdXHJcblx0XHRcdFx0XCJlKGkpIGZvciBpIGluIHJhbmdlIDEwXCIgOiBbMSwyLDQsOCwxNiwzMiw2NCwxMjgsMjU2LDUxMl1cclxuXHRcdFx0XHRcImgoaSkgZm9yIGkgaW4gcmFuZ2UgMTJcIiA6IFswLDEsMyw2LDEwLDE1LDIxLDI4LDM2LDQ1LDU1LDY2XVxyXG5cdFx0XHRcdFwiZihpKSBmb3IgaSBpbiByYW5nZSA5XCIgOiBbMSwxLDIsNiwyNCwxMjAsNzIwLDUwNDAsNDAzMjBdXHJcblx0XHRcdFx0XCJnKGkpIGZvciBpIGluIHJhbmdlIDEyXCIgOiBbMSwxLDIsMyw1LDgsMTMsMjEsMzQsNTUsODksMTQ0XVxyXG5cdFx0XHRcdFwiW2soNywxMSksaygxOCw0MiksaygxMDAsMzApLGsoOTksMTA1KV1cIiA6IFsxLDYsMTAsM11cclxuXHRcdFx0XHRcIltsKDEsNCksbCgyLDQpLGwoMTIsMTgpLGwoOTAsMTAwKV1cIiA6IFtbMSw0XSxbMSwyXSxbMiwzXSxbOSwxMF1dXHJcblx0XHRcdFx0XCJbcCgzLDQpLHAoNSwxMikscCg3LDI0KSxwKDksNDApLHAoMTEsNjApXVwiIDogWzUsMTMsMjUsNDEsNjFdXHJcblx0XHRcdFx0XCJbbigyMDAwKSxuKDIwMTYpLG4oMjAxNyksbigyMDIwKSxuKDIxMDApXVwiIDogW3RydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlXVxyXG5cdFx0XHRcdFwiW20oMTcpLG0oNjApXVwiIDogW1tdLFsyLDMsNCw1LDYsMTAsMTIsMTUsMjAsMzBdXVxyXG5cdFx0XHRcdFwiW3EoMTcpLHEoNjApXVwiIDogW1sxN10sWzIsMiwzLDVdXVxyXG5cdFx0XHRlOiBcclxuXHRcdFx0XHRyZWt1cnNpb24gOiBcImh0dHA6Ly93d3cubWF0dGVib2tlbi5zZS9sZWt0aW9uZXIvbWF0dGUtNS90YWxmb2xqZGVyLW9jaC1pbmR1a3Rpb25zYmV2aXMvcmVrdXJzaW9uXCJcclxuXHRcdFx0XHR0YWxzZXJpZXIgOiBcImh0dHA6Ly93d3cubWF0dGVib2tlbi5zZS9sZWt0aW9uZXIvbWF0dGUtMy9vdm5pbmdzZXhlbXBlbC90YWxzZXJpZXJcIlxyXG5cdFx0XHRcdHB5dGhhZ29yYXMgOiBcImh0dHA6Ly93d3cubWF0dGVib2tlbi5zZS9sZWt0aW9uZXIvc2tvbGFyLTkvZ2VvbWV0cmkvcHl0aGFnb3Jhcy1zYXRzXCJcclxuXHRcdFx0XHRkZWxiYXJoZXQgOiBcImh0dHA6Ly93d3cubWF0dGVib2tlbi5zZS9sZWt0aW9uZXIvbWF0dGUtMS90YWwvZGVsYmFyaGV0XCJcclxuIl19
//# sourceURL=C:\github\p5Assert\data.coffee