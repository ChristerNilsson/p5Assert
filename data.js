// Generated by CoffeeScript 1.11.1
var data;

data = {
  "Nyheter": {
    "Nyheter": {
      b: "# NYHETER\n# 2017-03-01 A3: Listor, Växelcykel, Kalkylator\n#            A5: Palindrom, Rövarspråk\n#            A7: Bignum, Pokerhand\n#            A8: List recursion\n\n# Klicka nu på A0!",
      a: ""
    }
  },
  "A0: One Parameter": {
    Operator1: {
      b: "# Försök att skapa funktionen f.\n# f(2) ska bli 2. f(3) ska bli 3.\n# Den första kolumnen (gul) innehåller INDATA.\n# Den andra kolumnen (grön) innehåller UTDATA du ska återskapa.\n# Den tredje kolumnen (röd eller grön) innehåller UTDATA skapad av din kod.\n\n# Se till att göra de RÖDA cellerna GRÖNA! Gå till sista raden med PgDn.\n\n# Ändra nollan till en tvåa. Nu blir enbart den första RÖDA cellen GRÖN.\n# Ändra tvåan till en trea.  Nu blir enbart den andra RÖDA cellen GRÖN.\n# Ändra trean till ett x.    Nu blir båda de RÖDA cellerna GRÖNA!\n\n# Gå till nästa övning genom att klicka på Operator2.\n\nf = (x) -> 0",
      a: "f = (x) -> x",
      c: {
        "f 2": 2,
        "f 3": 3
      }
    },
    Operator2: {
      b: "# Välj en av dessa operatorer: + - * / %\n# f(7) == 8\n# f(8) == 9\n# f(x) == ?\n# Sju ska bli åtta och åtta ska bli nio. Vad ska f skicka ut?\n\nf = (x) -> 0",
      a: "f = (x) -> x+1",
      c: {
        "3+2": 5,
        "3-2": 1,
        "3*2": 6,
        "6/2": 3,
        "5%2": 1,
        "6%2": 0,
        "f 7": 8,
        "f 8": 9
      }
    },
    Operator3: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> 2*x",
      c: {
        "f 5": 10,
        "f 6": 12
      }
    },
    Operator4: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> x*x",
      c: {
        "f 5": 25,
        "f 6": 36
      }
    },
    Operator5: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> -x",
      c: {
        "f -4": 4,
        "f 3": -3
      }
    },
    Operator6: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> x-2",
      c: {
        "f 7": 5,
        "f 17": 15
      }
    },
    Operator7: {
      b: "# + - * / %\n\nf = (x) -> 0",
      a: "f = (x) -> x/2",
      c: {
        "f 8": 4,
        "f 6": 3
      }
    },
    Operator8: {
      b: "# + - * / %\n\nf = (x) -> 0		",
      a: "f = (x) -> x%2",
      c: {
        "f 7": 1,
        "f 8": 0,
        "f 10": 0,
        "f 11": 1
      }
    },
    Operator9: {
      b: "# == < > !=\n\nf = (x) -> null			",
      a: "f = (x) -> x == 2",
      c: {
        "1 == 1": true,
        "1 == 2": false,
        "1 != 1": false,
        "1 != 2": true,
        "1 < 1": false,
        "1 < 2": true,
        "1 > 1": false,
        "1 > 2": false,
        "1 <= 1": true,
        "1 <= 2": true,
        "1 >= 1": true,
        "1 >= 2": false,
        "f 1": false,
        "f 2": true,
        "f 3": false,
        "f 4": false
      }
    },
    Operator10: {
      b: "# == < > !=\n\nf = (x) -> null		",
      a: "f = (x) -> x > 2",
      c: {
        "f 1": false,
        "f 2": false,
        "f 3": true,
        "f 4": true
      }
    },
    Operator11: {
      b: "# == < > !=\n\nf = (x) -> null		",
      a: "f = (x) -> x > 2",
      c: {
        "f 1": false,
        "f 2": false,
        "f 3": true,
        "f 4": true
      }
    },
    Operator12: {
      b: "# == < > !=\n\nf = (x) -> null	",
      a: "f = (x) -> x != 2",
      c: {
        "f 1": true,
        "f 2": false,
        "f 3": true,
        "f 4": true
      }
    }
  },
  "A1: Two Parameters": {
    Operator1: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a*b",
      c: {
        "g 3,4": 12,
        "g 4,6": 24
      }
    },
    Operator2: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a+b",
      c: {
        "g 3,4": 7,
        "g 4,6": 10
      }
    },
    Operator3: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> b-a",
      c: {
        "g 3,4": 1,
        "g 4,6": 2
      }
    },
    Operator4: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a/b",
      c: {
        "g 8,4": 2,
        "g 12,3": 4
      }
    },
    Operator5: {
      b: "# + - * / %\n\ng = (a,b) -> 0",
      a: "g = (a,b) -> a%b",
      c: {
        "g 8,4": 0,
        "g 9,4": 1,
        "g 10,4": 2,
        "g 11,4": 3
      }
    },
    Operator6: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a == b",
      c: {
        "g 0,0": true,
        "g 1,1": true,
        "g 7,4": false,
        "g 6,4": false
      }
    },
    Operator7: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a - b == 1",
      c: {
        "g 7,6": true,
        "g 5,4": true,
        "g 7,4": false,
        "g 6,4": false
      }
    },
    Operator8: {
      b: "# + - * / % ==\n\ng = (a,b) -> null",
      a: "g = (a,b) -> a + b == 7",
      c: {
        "g 7,0": true,
        "g 5,2": true,
        "g 7,4": false,
        "g 6,4": false
      }
    }
  },
  'A2: range lerp for': {
    range: {
      b: "# LOC:3 range\n\nf = (n) -> []\ng = (a,b) -> []\nh = (a,b,n) -> []",
      a: "f = (n) -> range n\ng = (a,b) -> range a,b\ng = (a,b,n) -> range a,b,n",
      c: {
        "range 3": [0, 1, 2],
        "range 1,4": [1, 2, 3],
        "range 1,9,2": [1, 3, 5, 7],
        "f 5": [0, 1, 2, 3, 4],
        "f 6": [0, 1, 2, 3, 4, 5],
        "g 1,5": [1, 2, 3, 4],
        "g 2,4": [2, 3],
        "g -2,0": [-2, -1],
        "h 0,10,1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        "h 0,10,2": [0, 2, 4, 6, 8],
        "h 0,-10,-1": [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
      }
    },
    "lerp": {
      b: "# LOC:1 lerp\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,i) -> 0",
      a: "f = (a,b,i) -> lerp a,b,i",
      c: {
        "lerp 8,12,0": 8,
        "lerp 8,12,1": 12,
        "lerp 8,12,0.5": 10,
        "lerp 8,12,-1": 4,
        "lerp 8,12,2": 16,
        "f 10,20,0": 10,
        "f 10,20,1": 20,
        "f 10,20,2": 30,
        "f 10,20,0.5": 15,
        "f 10,20,-1": 0
      }
    },
    "for": {
      b: "# LOC:1 for in range lerp\n# Försök lösa uppgiften både med och utan lerp\n\nf = (a,b,n) -> []",
      a: "f = (a,b,n) -> lerp a,b,i for i in range n",
      c: {
        "(i*i for i in range 5)": [0, 1, 4, 9, 16],
        "f 0,0,5": [0, 0, 0, 0, 0],
        "f 1,2,5": [1, 2, 3, 4, 5],
        "f 5,4,5": [5, 4, 3, 2, 1],
        "f -1,-2,5": [-1, -2, -3, -4, -5],
        "f 5,25,10": [5, 25, 45, 65, 85, 105, 125, 145, 165, 185],
        "f -0.1,0.0,3": [-0.1, 0.0, 0.1]
      }
    }
  },
  "A3: [ ]": {
    Introduktion: {
      b: "# LOC:16 if < then else\n# Sortera UTAN att använda loopar\n# Du får inte heller använda någon punkt\n\nsort2 = (a,b) -> [a,b]\nsort3 = (a,b,c) -> [a,b,c]\nsort4 = (a,b,c,d) -> [a,b,c,d]\nsort5 = (a,b,c,d,e) -> [a,b,c,d,e]\n",
      a: "sort2 = (a,b) -> if a>b then [b,a] else [a,b]\n\nsort3 = (a,b,c) ->\n	[a,b] = sort2 a,b\n	[b,c] = sort2 b,c\n	[a,b] = sort2 a,b\n	[a,b,c]\n\nsort4 = (a,b,c,d) ->\n	[a,b,c] = sort3 a,b,c\n	[b,c,d] = sort3 b,c,d\n	[a,b] = sort2 a,b\n	[a,b,c,d]\n\nsort5 = (a,b,c,d,e) ->\n	[a,b,c,d] = sort4 a,b,c,d\n	[b,c,d,e] = sort4 b,c,d,e\n	[a,b] = sort2 a,b\n	[a,b,c,d,e]",
      c: {
        "if 1 < 2 then [1,2] else [2,1]": [1, 2],
        "sort2 3,4": [3, 4],
        "sort2 4,3": [3, 4],
        "sort3 3,4,5": [3, 4, 5],
        "sort3 3,5,4": [3, 4, 5],
        "sort3 4,3,5": [3, 4, 5],
        "sort3 4,5,3": [3, 4, 5],
        "sort3 5,3,4": [3, 4, 5],
        "sort3 5,4,3": [3, 4, 5],
        "sort4 3,4,5,6": [3, 4, 5, 6],
        "sort4 3,4,6,5": [3, 4, 5, 6],
        "sort4 3,5,4,6": [3, 4, 5, 6],
        "sort4 3,5,6,4": [3, 4, 5, 6],
        "sort4 3,6,4,5": [3, 4, 5, 6],
        "sort4 3,6,5,4": [3, 4, 5, 6],
        "sort4 4,3,5,6": [3, 4, 5, 6],
        "sort4 4,3,6,5": [3, 4, 5, 6],
        "sort4 4,5,3,6": [3, 4, 5, 6],
        "sort4 4,5,6,3": [3, 4, 5, 6],
        "sort4 4,6,3,5": [3, 4, 5, 6],
        "sort4 4,6,5,3": [3, 4, 5, 6],
        "sort4 5,3,4,6": [3, 4, 5, 6],
        "sort4 5,3,6,4": [3, 4, 5, 6],
        "sort4 5,4,3,6": [3, 4, 5, 6],
        "sort4 5,4,6,3": [3, 4, 5, 6],
        "sort4 5,6,3,4": [3, 4, 5, 6],
        "sort4 5,6,4,3": [3, 4, 5, 6],
        "sort4 6,3,4,5": [3, 4, 5, 6],
        "sort4 6,3,5,4": [3, 4, 5, 6],
        "sort4 6,4,3,5": [3, 4, 5, 6],
        "sort4 6,4,5,3": [3, 4, 5, 6],
        "sort4 6,5,3,4": [3, 4, 5, 6],
        "sort4 6,5,4,3": [3, 4, 5, 6],
        "sort5 5,4,3,2,1": [1, 2, 3, 4, 5],
        "sort5 3,5,2,4,1": [1, 2, 3, 4, 5],
        "sort5 5,2,3,4,1": [1, 2, 3, 4, 5]
      }
    },
    Listor: {
      b: "# LOC:11 length push concat pop sort .. []\n\nantal = (a) -> 0\nfetch = (a,i) -> 0 \nkonkatenera = (a,b) -> [] \nsortera = (a) -> []\nförsta = (a,n) -> []\nmitti = (a,i,j) -> []\nsista = (a,n) -> []",
      a: "antal = (a) -> a.length\nfetch = (a,i) -> a[i]\nkonkatenera = (a,b) -> a.concat b\nsortera = (a) -> a.sort()\nförsta = (a,n) -> a[..n-1]\nmitti = (a,i,j) -> a[i..j]\nsista = (a,n) -> a[-n..]",
      c: {
        "[1,2].concat [3,4]": [1, 2, 3, 4],
        "[2,3,4,5].length": 4,
        "[11,22,33,44][2]": 33,
        "[11,22,33,44][..2]": [11, 22, 33],
        "[11,22,33,44][1..]": [22, 33, 44],
        "[11,22,33,44][1..2]": [22, 33],
        "[4,2,3,1].sort()": [1, 2, 3, 4],
        "[4,2,3,1].sort().reverse()": [4, 3, 2, 1],
        "antal [1,2,3]": 3,
        "antal [5,4,1,2,9,3,7]": 7,
        "fetch [4,5,6],0": 4,
        "fetch [4,5,6],2": 6,
        "konkatenera [1,2,3],[4,5,6]": [1, 2, 3, 4, 5, 6],
        "sortera [5,4,1,2,9,3,7]": [1, 2, 3, 4, 5, 7, 9],
        "första [11,12,13,14,15],3": [11, 12, 13],
        "mitti [11,12,13,14,15],1,2": [12, 13],
        "sista [11,12,13,14,15],4": [12, 13, 14, 15]
      }
    },
    Växelcykel: {
      b: "# LOC:4 [] for in push sort - /\n# Din växelcykel har stora och små kugghjul. I vilken i ordning ligger växlarna? \n\ngear = (big, small) -> []",
      a: "gear = (big, small) ->\n	res = []\n	res.push [Math.round(b/s * 100)/100,b,s] for s in small for b in big\n	res.sort() ",
      c: {
        "Math.round(3.1415)": 3,
        "Math.round(3.1415 * 10)/10": 3.1,
        "gear([43,53],[13,21])": [[2.05, 43, 21], [2.52, 53, 21], [3.31, 43, 13], [4.08, 53, 13]],
        "gear([43,53],[13,15,17,19,21])": [[2.05, 43, 21], [2.26, 43, 19], [2.52, 53, 21], [2.53, 43, 17], [2.79, 53, 19], [2.87, 43, 15], [3.12, 53, 17], [3.31, 43, 13], [3.53, 53, 15], [4.08, 53, 13]]
      }
    },
    Kalkylator: {
      b: "# LOC:7 [] for in split == push pop if else parseInt\n\ncalc = (command) -> 0",
      a: "calc = (command) ->\n	stack = []\n	for cmd in command.split ' '\n		if cmd == '+' then stack.push stack.pop() + stack.pop()\n		else if cmd == '*' then stack.push stack.pop() * stack.pop()\n		else stack.push parseInt cmd\n	stack.pop()		",
      c: {
        "'a b c'.split ' '": ['a', 'b', 'c'],
        '1+2': 3,
        "'1'+'2'": '12',
        "1+'2'": '12',
        "'1'+2": '12',
        "parseInt '3'": 3,
        "parseFloat '3.14'": 3.14,
        "calc '2'": 2,
        "calc '2 3'": 3,
        "calc '2 3 +'": 5,
        "calc '2 3 *'": 6,
        "calc '2 3 4 * +'": 14
      }
    }
  },
  "A4: { }": {
    "Boys and Girls": {
      b: "# LOC:7 {} [] for in length + /\n\ngirls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\nnames = (kids) -> kid.name for kid in kids\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\navg = (numbers) -> 0",
      a: "girls = [{name: 'Sabrina', age: 12}, {name: 'Helene', age: 10}, {name: 'Anna', age: 11}]\nboys = [{name: 'David', age: 10}, {name: 'Henry', age: 11}, {name: 'Noel', age: 14}, {name: 'Numa', age: 3}]\n\nnames = (kids) -> kid.name for kid in kids\n\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n	\navg = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "avg ages girls": 11,
        "avg ages boys": 9.5
      }
    }
  },
  'A5: " "': {
    Introduktion: {
      b: "# LOC:8 length [] .. + indexOf split join for in\n# LOC betyder Lines Of Code, dvs antal kodrader.\n# Åtta kodrader är lagom för detta problem.\n# Färre innebär sämre läsbarhet.\n# Har du fler bör du fundera på en kortare lösning.\n\nantal = (s) -> 0\ntecken = (s,i) -> \"\"\nmitti = (s,i,j) -> \"\"\nkonkatenera = (s,t) -> \"\"\nleta = (s,t) -> 0\nsplittra = (s,avgr) -> [] \nhopslagning = (a,avgr='') -> \"\" \ndubbla = (s) -> \"\"",
      a: "antal = (s) -> s.length\ntecken = (s,i) -> s[i]\nmitti = (s,i,j) -> s[i..j]\nkonkatenera = (s,t) -> s + t\nleta = (s,t) -> s.indexOf t\nsplittra = (s,avgr) -> s.split avgr\nhopslagning = (a,avgr='') -> a.join(avgr)\ndubbla = (s) -> hopslagning (tecken + tecken for tecken in s)",
      c: {
        '"Javascript".length': 10,
        '"Javascript".indexOf "a"': 1,
        '"1,2,3".split ","': ["1", "2", "3"],
        '["1","2","3"].join " "': "1 2 3",
        'antal "Coffee"': 6,
        'tecken "Coffee",1': 'o',
        'mitti "Coffee",1,3': 'off',
        'mitti "Coffee",3,5': 'fee',
        'konkatenera "Coffee","script"': 'Coffeescript',
        'leta "Coffee","e"': 4,
        'leta "Coffee","x"': -1,
        "splittra '2 3 +',' '": ['2', '3', '+'],
        "hopslagning ['2', '3', '+'], '|'": "2|3|+",
        'dubbla "script"': 'ssccrriipptt'
      }
    },
    Palindrom: {
      b: "# LOC:1 join reverse split\n# Ett palindrom blir samma ord om man vänder på det.\n# Ordet palindrom är inte ett palindrom.\n\npalindrom = (word) -> null",
      a: "palindrom = (word) -> word.split(\"\").reverse().join(\"\") == word",
      c: {
        "palindrom 'badrum'": false,
        "palindrom 'kök'": true,
        "palindrom 'kajak'": true,
        "palindrom 'kanot'": false
      }
    },
    Rövarspråk: {
      b: "# LOC:1 for in if then else + join '' ()\n\nrs = (word,extra='o') -> \"\"",
      a: "rs = (word,extra='o') -> ((if letter in 'aeiouy åäö' then letter else letter + extra + letter) for letter in word).join(\"\")",
      c: {
        "rs 'kalas fint'": 'kokalolasos fofinontot',
        "rs 'bokstav'": 'bobokoksostotavov',
        "rs 'kalas fint','i'": 'kikalilasis fifinintit',
        "rs 'bokstav','e'": 'bebokeksestetavev',
        "rs 'kalas fint','a'": 'kakalalasas fafinantat'
      }
    }
  },
  "A6: Interpolation": {
    linearequation1: {
      b: "# LOC:1 *\n\nf = (x) -> 0",
      a: "f = (x) -> 2 * x",
      c: {
        "f 2": 4,
        "f 3": 6
      }
    },
    linearequation2: {
      b: "# LOC:1 * +\n\nf = (x) -> 0",
      a: "f = (x) -> 3 + 2 * x",
      c: {
        "f 2": 7,
        "f 3": 9
      }
    },
    lerp: {
      b: "# LOC:1 * + -\n\nlerp = (y1,y2,x) -> 0",
      a: "lerp = (y1,y2,x) -> y1 + (y2-y1) * x",
      c: {
        "lerp 10,16,-1": 4,
        "lerp 10,16,0": 10,
        "lerp 10,16,0.5": 13,
        "lerp 10,16,1": 16,
        "lerp 10,16,2": 22
      }
    },
    map: {
      b: "# LOC:1 * + - /\n\nmap = (x,x1,x2,y1,y2) -> 0",
      a: "map = (x,x1,x2,y1,y2) -> y1 + (y2-y1) * (x-x1)/(x2-x1)",
      c: {
        "map 0,1,3,20,40": 10,
        "map 1,1,3,20,40": 20,
        "map 2,1,3,20,40": 30,
        "map 3,1,3,20,40": 40,
        "map 75,50,100,0,1": 0.5,
        "map 16,0,40,0,200": 80
      }
    },
    Hour2Degree: {
      b: "# LOC:1 map\n\nh2d = (x) -> 0",
      a: "h2d = (x) -> map(15-x,0,12,0,360) % 360",
      c: {
        "h2d 0": 90,
        "h2d 1": 60,
        "h2d 2": 30,
        "h2d 3": 0,
        "h2d 4": 330,
        "h2d 5": 300,
        "h2d 6": 270,
        "h2d 7": 240,
        "h2d 8": 210,
        "h2d 9": 180,
        "h2d 10": 150,
        "h2d 11": 120,
        "h2d 12": 90
      }
    },
    Hour2Radian: {
      b: "# LOC:1 map\n\nh2r = (x) -> 0",
      a: "h2r = (x) -> (map 15-x,0,12,0,2*Math.PI) % (2*Math.PI)",
      c: {
        "h2r 0": 3 * Math.PI / 6,
        "h2r 3": 0 * Math.PI / 6,
        "h2r 4": 11 * Math.PI / 6,
        "h2r 5": 10 * Math.PI / 6,
        "h2r 6": 9 * Math.PI / 6,
        "h2r 7": 8 * Math.PI / 6,
        "h2r 9": 6 * Math.PI / 6,
        "h2r 10": 5 * Math.PI / 6,
        "h2r 11": 4 * Math.PI / 6,
        "h2r 12": 3 * Math.PI / 6
      }
    }
  },
  "A7: class": {
    Kid: {
      b: "# LOC:8 class constructor new @ [] for in length + /\n# Innan du löser denna uppgift: Be att få se Bouncing Balls!\n\nclass Kid\n	constructor : (name,age) ->\n\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\nnames = (kids) -> []\nages = (kids) -> []\nsum = (numbers) -> 0\nantal = (numbers) -> 0\naverage = (numbers) -> 0\n",
      a: "\nclass Kid\n	constructor : (@name,@age) ->\n	\ngirls = [new Kid('Sabrina',12), new Kid('Helene',10), new Kid('Anna',11)]\nboys = [new Kid('David',10), new Kid('Henry',11), new Kid('Noel',14), new Kid('Numa',3)]\n\nnames = (kids) -> kid.name for kid in kids\n	\nages = (kids) -> kid.age for kid in kids\n\nsum = (numbers) ->\n	res = 0\n	res += n for n in numbers\n	res\n\nantal = (numbers) -> numbers.length \n	\naverage = (numbers) -> sum(numbers) / antal(numbers)",
      c: {
        "names girls": ['Sabrina', 'Helene', 'Anna'],
        "names boys": ['David', 'Henry', 'Noel', 'Numa'],
        "ages girls": [12, 10, 11],
        "ages boys": [10, 11, 14, 3],
        "sum ages girls": 33,
        "sum ages boys": 38,
        "antal girls": 3,
        "antal boys": 4,
        "average ages girls": 11,
        "average ages boys": 9.5
      }
    },
    Simplex: {
      b: "# LOC:14 class constructor new [] @	+ - *\n# Tips: Spela p5Complex innan du påbörjar denna övning.	\n\nclass Simplex\n	constructor : (x,y) ->\n	translate : -> @\n	scale : -> @\n	rotate : -> @\n	mirror : -> @\n\na = new Simplex 1,3\nb = new Simplex -2,4",
      a: "class Simplex\n	constructor : (@x,@y) ->\n	translate : -> \n		@x += 1\n		@\n	scale : -> \n		[@x,@y] = [2*@x,2*@y] \n		@\n	rotate : -> \n		[@x,@y] = [-@y,@x]\n		@\n	mirror : ->\n		[@x,@y] = [@y,@x]\n		@",
      c: {
        "pp a": "{x:1,y:3}",
        "pp a.translate()": "{x:2,y:3}",
        "pp a.scale()": "{x:2,y:6}",
        "pp a.rotate()": "{x:-3,y:1}",
        "pp a.mirror()": "{x:3,y:1}",
        "pp a.translate().scale()": "{x:4,y:6}",
        "pp a.scale().translate()": "{x:3,y:6}",
        "pp b": "{x:-2,y:4}",
        "pp b.translate()": "{x:-1,y:4}",
        "pp b.scale()": "{x:-4,y:8}",
        "pp b.rotate()": "{x:-4,y:-2}",
        "pp b.mirror()": "{x:4,y:-2}",
        "pp b.translate().scale()": "{x:-2,y:8}",
        "pp b.scale().translate()": "{x:-3,y:8}",
        "pp b.mirror().mirror()": "{x:-2,y:4}",
        "pp b.rotate().rotate().rotate().rotate()": "{x:-2,y:4}"
      }
    },
    Bignum: {
      b: "# LOC:22 class constructor new @ parseInt reverse length push floor slice unshift join for if\n# Med Bignum kan man räkna exakt med tal med tusentals siffor.\n# Du programmerar på samma sätt som om du räknar med papper och penna.\n# Multiplikationen använder sig av additionen samt inskiftande av noll för varje siffra.\n\nclass Bignum\n	constructor : (s) -> @list=[]\n	to_s : () -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7",
      a: "\n# observera att reverse() vänder PÅ plats.\n# clona därför med slice() i t ex to_s\n#reversera = (arr) -> arr.slice().reverse() \n\nclass Bignum\n	constructor : (s) ->\n		@list = (parseInt(ch) for ch in s)\n		@list.reverse()\n\n	to_s : () -> @list.slice().reverse().join(\"\")\n\n	add : (other) ->\n		if @list.length < other.list.length then return other.add @ \n		carry = 0\n		res = new Bignum \"\"\n		for d1, pos in @list\n			d = d1 + (other.list[pos] || 0) + carry\n			res.list.push d % 10\n			carry = Math.floor d / 10\n		if carry then res.list.push 1\n		res\n\n	mul : (other) ->\n		res = new Bignum \"\"\n		for digit,d in other.list.slice().reverse()\n			for i in range digit\n				res = res.add @\n			if d < other.list.length-1 then res.list.unshift 0\n		res\n	\na = new Bignum \"123\"\nb = new Bignum \"8\"\nc = new Bignum \"999\"\nd = new Bignum \"456\"\ne = new Bignum \"12345678901234567890\"\nf = new Bignum \"1\"\ng = new Bignum \"1\"\nh = new Bignum \"2\"\n\ng = g.add g for i in range 100\nh = h.mul h for i in range 7\n	",
      c: {
        "parseInt '1'": 1,
        "[1,2,3].reverse()": [3, 2, 1],
        "[1,2,3].length": 3,
        "Math.floor 3.14": 3,
        "[11,22,33].slice(1)": [22, 33],
        "[11,22,33].slice(1,2)": [22],
        "[11,22,33].slice()": [11, 22, 33],
        "12345678901234567890 + 1": 12345678901234567000,
        "a.list": [3, 2, 1],
        "a.to_s()": "123",
        "a.add(b).to_s()": "131",
        "b.add(a).to_s()": "131",
        "a.add(c).to_s()": "1122",
        "a.add(b).add(c).to_s()": "1130",
        "e.add(f).to_s()": "12345678901234567891",
        "g.to_s()": "1267650600228229401496703205376",
        "a.mul(b).to_s()": "984",
        "a.mul(c).to_s()": "122877",
        "a.mul(d).to_s()": "56088",
        "h.to_s()": "340282366920938463463374607431768211456"
      }
    },
    Complex: {
      b: "# LOC:31 class constructor new @ -> if + * == > < \n# Börja med att få bort onödiga nollor och ettor i to_s!\n\nclass Complex\n	constructor : (@x,@y) ->\n	to_s : -> @x + \" \" + @y + \"i\"\n	add : (other) -> @\n	mul : (other) -> @",
      a: "class Complex\n	constructor : (@x,@y) ->\n	add : (other) ->\n		new Complex @x+other.x, @y+other.y\n	mul : (other) ->\n		a = @x\n		b = @y\n		c = other.x\n		d = other.y\n		new Complex a*c-b*d, b*c+a*d\n	to_s : ->\n		sx = \"\" if @x == 0\n		sx = \"" + this.x + "\" if @x > 0\n		sx = \"" + this.x + "\" if @x < 0\n\n		sy = \"\" if @y == 0\n		sy = \"-i\" if @y == -1\n		sy = \"i\" if @y == 1\n		sy = \"" + this.y + "i\" if @y > 1\n		sy = \"" + this.y + "i\" if @y < -1\n\n		if sx!=\"\" and sy!=\"\"\n			if @y < 0\n				s = sx+sy\n			else if @y==0\n				s = sx\n			else\n				s = sx + \"+\" + sy\n		else if @x==0 and @y==0\n			s = \"0\"\n		else \n			s = sx + sy\n		s",
      c: {
        "new Complex(-1,0).to_s()": "-1",
        "new Complex(-1,-1).to_s()": "-1-i",
        "new Complex(0,-1).to_s()": "-i",
        "new Complex(0,0).to_s()": "0",
        "new Complex(0,1).to_s()": "i",
        "new Complex(1,-2).to_s()": "1-2i",
        "new Complex(1,-1).to_s()": "1-i",
        "new Complex(1,0).to_s()": "1",
        "new Complex(1,1).to_s()": "1+i",
        "new Complex(1,2).to_s()": "1+2i",
        "new Complex(1,2).add(new Complex(1,-1)).to_s()": "2+i",
        "new Complex(1,2).mul(new Complex(1,-1)).to_s()": "3+i"
      }
    },
    PokerHand: {
      b: "# LOC:41 class constructor new _.sortBy _.flatten _.isEqual _.without  \n#        split for in range indexOf push unshift reverse and not if then keys length\n\n# https://sv.wikipedia.org/wiki/Pokerhand\n\n# 9	Färgstege (straight flush)\n# 8	Fyrtal (four of a kind)\n# 7	Kåk (full house)\n# 6	Färg (flush)\n# 5	Stege (straight)\n# 4	Triss (three of a kind)\n# 3	Två par (two pairs)\n# 2	Par (pair)\n# 1	Högt kort (high card)\n\n# Ingen färg är bättre än någon annan färg. Vissa händer är värda lika mycket.\n\nclass Hand\n	constructor : (s) -> @separator = []\n	compare : (other) -> -2\n",
      a: "class Hand\n	constructor : (s) ->\n		@colorcount = {} \n		@valuecount = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n		@value = []\n		@separator = []\n		for card in s.split \" \"\n			@colorcount[card[0..1]] = true\n			iValue = \"  23456789TJQKA\".indexOf card[2]\n			@valuecount[iValue] += 1	\n			@value.push iValue	\n		for v,i in @valuecount \n			if v > 0 then @separator.push [v,i]\n		@valuecount = @sortera _.without @valuecount, 0 \n		@value = @sortera @value\n		@separator = _.sortBy @separator, (list) -> -1000*list[0]-list[1] # pga att js sorterar listor alfabetiskt. t ex [11] < [2].\n		@separator = _.flatten @separator\n\n		# Specialbehandling av A5432 eftersom esset räknas som 14.\n		if _.isEqual @separator,[1, 14, 1, 5, 1, 4, 1, 3, 1,  2]\n			@separator =          [1,  5, 1, 4, 1, 3, 1, 2, 1, 14]\n		@separator.unshift @calc()\n\n	compare : (other) -> \n		for i in range @separator.length\n			if @separator[i] > other.separator[i] then return -1\n			if @separator[i] < other.separator[i] then return 1\n		0	\n\n	calc : ->\n		if @stege() and @flush() then return 9\n		if _.isEqual(@valuecount,[1,4]) then return 8\n		if _.isEqual(@valuecount,[2,3]) then return 7\n		if @flush() then return 6\n		if @stege() then return 5\n		if _.isEqual(@valuecount,[1,1,3]) then return 4\n		if _.isEqual(@valuecount,[1,2,2]) then return 3\n		if _.isEqual(@valuecount,[1,1,1,2]) then return 2\n		1\n\n	sortera : (arr) -> _.sortBy arr \n	flush : -> Object.keys(@colorcount).length==1\n	stege : ->\n		if not _.isEqual(@valuecount, [1,1,1,1,1]) then return false\n		if @value[0] + 4 == @value[4] then return true\n		_.isEqual @value, [2,3,4,5,14]\n",
      c: {
        '[1,2,3] == [1,2,3]': false,
        '_.isEqual [1,2,3], [1,2,3]': true,
        '_.isEqual [1,2,3], [1,2,4]': false,
        '_.flatten [1,[2,1],3]': [1, 2, 1, 3],
        '_.without [1,2,1,3], 1': [2, 3],
        '_.sortBy ["per", "anna", "bo"]': ["anna", "bo", "per"],
        '_.sortBy ["per", "anna", "bo"], (w) -> w.length': ["bo", "per", "anna"],
        '(new Hand "spA sp2 sp3 sp4 sp5").separator': [9, 1, 5, 1, 4, 1, 3, 1, 2, 1, 14],
        '(new Hand "ru7 sp7 hj7 kl7 spJ").separator': [8, 4, 7, 1, 11],
        '(new Hand "ru8 sp8 hj8 kl9 sp9").separator': [7, 3, 8, 2, 9],
        '(new Hand "ru7 ru3 ru5 ru9 ruK").separator': [6, 1, 13, 1, 9, 1, 7, 1, 5, 1, 3],
        '(new Hand "ru7 hj8 ru9 hj5 ru6").separator': [5, 1, 9, 1, 8, 1, 7, 1, 6, 1, 5],
        '(new Hand "ru7 hj8 ru8 kl8 ruJ").separator': [4, 3, 8, 1, 11, 1, 7],
        '(new Hand "ru7 hj7 ru8 kl8 ruJ").separator': [3, 2, 8, 2, 7, 1, 11],
        '(new Hand "sp7 hj3 ru3 kl4 spA").separator': [2, 2, 3, 1, 14, 1, 7, 1, 4],
        '(new Hand "sp7 hj3 ru2 kl4 spA").separator': [1, 1, 14, 1, 7, 1, 4, 1, 3, 1, 2],
        '(new Hand "spA sp2 sp3 sp4 sp5").compare new Hand "ruA ru2 ru3 ru4 ru5"': 0,
        '(new Hand "ru7 sp7 hj7 kl7 spJ").compare new Hand "ru6 sp5 hj6 kl6 spQ"': -1,
        '(new Hand "ru8 sp8 hj8 kl9 sp9").compare new Hand "ru6 sp6 hj6 ru9 hj9"': -1,
        '(new Hand "ru7 ru3 ru5 ru9 ruK").compare new Hand "hj7 hj3 hj5 hj9 hjK"': 0,
        '(new Hand "ru7 hj8 ru9 hj5 ru6").compare new Hand "hj7 ru8 kl9 hjT sp6"': 1,
        '(new Hand "ru7 hj8 ru8 kl8 ruJ").compare new Hand "kl7 hj9 ru9 kl9 ruQ"': 1,
        '(new Hand "ru7 hj7 ru8 kl8 ruJ").compare new Hand "sp7 kl7 sp8 hj8 ruT"': -1,
        '(new Hand "hj7 kl3 sp3 kl4 hjA").compare new Hand "sp7 hj3 ru3 klK spA"': 1,
        '(new Hand "sp7 hj3 ru2 kl4 spA").compare new Hand "hj7 ru3 ru5 sp4 hjA"': 1
      }
    },
    Polynom: {
      b: "# LOC:52 class constructor new [] @ or for in range length ** push reverse join " + "\n# Uppgiften innehåller matematik på gymnasienivå.\n\nclass Polynom\n	constructor : (lst) -> @lst=[]\n	to_s : -> \"\"\n	add : (other) -> @\n	mul : (other) -> @\n	power : (n) -> @\n	value : (x) -> 0\n	diff : -> @\n	integ : -> @\n	compose : (other)	-> @\n\na = new Polynom [5,4,3]\nb = new Polynom [4,3]\nc = new Polynom [0,0,1]\nd = new Polynom [3,2]\ne = new Polynom [5,0,-1]",
      a: "class Polynom\n	constructor : (@lst) ->\n\n	add : (other) ->\n		h = []\n		h[i] = (h[i] or 0) + value for value,i in @lst\n		h[i] = (h[i] or 0) + value for value,i in other.lst\n		new Polynom h\n\n	mul : (other) ->\n		h = (0 for i in range @lst.length + other.lst.length - 1)\n		for value1,i1 in @lst\n			for value2,i2 in other.lst\n				i = i1+i2\n				h[i] = (h[i] or 0) + value1 * value2\n		new Polynom h\n\n	power : (n) ->\n		res = new Polynom [1]\n		res = res.mul @ for i in range n\n		res\n\n	compose : (other)	->\n		res = new Polynom []\n		for value,i in @lst\n			res = res.add (new Polynom [value]).mul other.power i\n		res\n\n	value : (x) ->\n		res = 0\n		res += value * x ** i for value,i in @lst\n		res\n\n	diff : ->\n		lst = []\n		for value,i in @lst\n			if i != 0 then lst[i-1] = i*value\n		new Polynom lst\n\n	integ : ->\n		lst = [0]\n		for value,i in @lst\n			i += 1\n			lst[i] = value/i\n		new Polynom lst\n\n	to_s : ->\n		arr = []\n		for item,i in @lst\n			if item == 0 then continue\n			if item == 1 \n				if i==0 then arr.push \"1\"\n				else if i==1 then arr.push \"x\"\n				else arr.push \"x^\" + i\n			else				\n				if i==0 then arr.push item\n				else if i==1 then arr.push item + \"*x\"\n				else arr.push item + \"*x^\" + i\n		arr.reverse()\n		arr.join \"+\"",
      c: {
        "a.lst": [5, 4, 3],
        "b.lst": [4, 3],
        "a.to_s()": "3*x^2+4*x+5",
        "c.to_s()": "x^2",
        "a.add(b).to_s()": "3*x^2+7*x+9",
        "a.mul(b).to_s()": "9*x^3+24*x^2+31*x+20",
        "a.value(2)": 25,
        "a.power(2).lst": [25, 40, 46, 24, 9],
        "b.power(3).lst": [64, 144, 108, 27],
        "a.diff().lst": [4, 6],
        "a.integ().lst": [0, 5, 2, 1],
        "c.integ().to_s()": "0.3333333333333333*x^3",
        "c.integ().value(3)": 9,
        "d.compose(d).lst": [9, 4],
        "d.compose(e).lst": [13, 0, -2],
        "e.compose(d).lst": [-4, -12, -4],
        "e.compose(e).lst": [-20, 0, 10, 0, -1]
      }
    }
  },
  "A8: Advanced": {
    path: {
      b: "# LOC:1 concat if then else\n\ntree = {3:0, 4:8, 5:3, 6:3, 10:5, 7:5, 12:6, 8:6, 20:10, 9:7, 24:12, 14:12}\n\npath = (tree,x) -> []",
      a: "path = (tree,x) -> if x==0 then return [] else [x].concat path tree,tree[x]",
      c: {
        "path tree, 4": [4, 8, 6, 3],
        "path tree, 20": [20, 10, 5, 3],
        "path tree, 9": [9, 7, 5, 3]
      }
    },
    summa: {
      b: "# LOC:4 _.isEqual _.isNumber _.head _.tail\n\nsumma = (tree) -> 0",
      a: "summa = (tree) -> \n	return 0 if _.isEqual tree,[]\n	return tree if _.isNumber tree \n	summa(_.head tree) + summa _.tail tree ",
      c: {
        "_.isNumber '12'": false,
        "_.isNumber 12": true,
        "_.isNumber [12]": false,
        "_.head [11,22,33]": 11,
        "_.tail [11,22,33]": [22, 33],
        "summa [1,2,3,4]": 10,
        "summa [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 161
      }
    },
    "list recursion": {
      b: "# LOC:7 typeof if then else for in range min length\n# Lägg märke till javascripts felaktiga hantering av tal vid jämförelse av listor.\n\ncompare = (a,b) -> -2\n",
      a: "compare = (a,b) ->\n	if typeof a != \"object\" \n		if a > b then return -1 else if a < b then return 1 else return 0\n	for i in range min a.length,b.length\n		c = compare a[i],b[i]\n		if c != 0 then return c\n	0",
      c: {
        "typeof 1": "number",
        "typeof 3.14": "number",
        'typeof ""': "string",
        "typeof []": "object",
        "typeof {}": "object",
        "min 1,2": 1,
        "min 2,1": 1,
        "11 > 2": true,
        "[11] > [2]": false,
        "[11] > [10]": true,
        "11 == 11": true,
        '"11" == "11"': true,
        "[11] == [11]": false,
        "compare 11, 2": -1,
        "compare [11], [2]": -1,
        "compare [11], [10]": -1,
        "compare [11], [11]": 0,
        "compare [2], [11]": 1,
        "compare [1,[2,3]], [1,[2,3]]": 0,
        "compare [10,[2,3]], [1,[2,3]]": -1,
        "compare [1,[20,3]], [1,[2,3]]": -1,
        "compare [1,[2,30]], [1,[2,3]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,23]], [[12,13],14]]": -1,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]]": 0,
        "compare [3, [5,6], [7,8,10,12], [4,9,14,[20,24]], [[12,13],14]], [3, [5,6], [7,8,10,12], [4,9,14,[20,25]], [[12,13],14]]": 1
      }
    },
    filter: {
      b: "# LOC:1 filter\n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\ng = (djur, art) -> []\n",
      a: "g = (djur, art) -> djur.filter (d) -> d.art == art\n",
      c: {
        "[1,-2,0,3,-4].filter (x) -> x > 0": [1, 3],
        "g djur,'hund'": [
          {
            namn: 'Karo',
            art: 'hund'
          }, {
            namn: 'Rocky',
            art: 'hund'
          }
        ],
        "g djur,'fisk'": [
          {
            namn: 'Albert',
            art: 'fisk'
          }, {
            namn: 'Herbert',
            art: 'fisk'
          }
        ],
        "g djur,'kanin'": [
          {
            namn: 'Fluffy',
            art: 'kanin'
          }
        ],
        "g djur,'katt'": [
          {
            namn: 'Trixie',
            art: 'katt'
          }
        ],
        "g djur,'papegoja'": []
      }
    },
    comprehension: {
      b: "# LOC:1 for \n\ndjur = [\n	{namn:'Fluffy',art:'kanin'}\n	{namn:'Karo',art:'hund'}\n	{namn:'Rocky',art:'hund'}\n	{namn:'Albert',art:'fisk'}\n	{namn:'Trixie',art:'katt'}\n	{namn:'Herbert',art:'fisk'}\n]\n\nnamn = (djur) -> []\n",
      a: "namn = (djur) -> (d.namn for d in djur)",
      c: {
        "(2**i for i in range 5)": [1, 2, 4, 8, 16],
        "namn djur": ['Fluffy', 'Karo', 'Rocky', 'Albert', 'Trixie', 'Herbert']
      }
    },
    reduce: {
      b: "# LOC:1 reduce\n\nica = [\n	{pris: 123, antal:1}\n	{pris: 34, antal:2}\n	{pris: 78, antal:4}\n	{pris: 96, antal:5}\n]\nkonsum = [\n	{pris: 100, antal:1}\n	{pris: 30, antal:1}\n	{pris: 70, antal:1}\n	{pris: 90, antal:1}\n]\n\nsumma = (varor) -> 0",
      a: "summa = (varor) -> varor.reduce ((sum, vara) -> sum + vara.pris * vara.antal), 0",
      c: {
        "ica.reduce ((sum, vara) -> sum + vara.antal), 0": 12,
        "konsum.reduce ((sum, vara) -> sum + vara.pris), 0": 290,
        "summa ica": 983,
        "summa konsum": 290
      }
    },
    sortBy: {
      b: "# LOC:1 _.sortBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\nsortera = (djur,f) -> []",
      a: "sortera = (djur,f) -> _.sortBy djur, f",
      c: {
        "sortera djur,(d)->d.length": ["Karo", "Rocky", "Fluffy", "Albert", "Trixie", "Herbert"],
        "sortera djur": ["Albert", "Fluffy", "Herbert", "Karo", "Rocky", "Trixie"]
      }
    },
    groupBy: {
      b: "# LOC:1 groupBy\n\ndjur = ['Fluffy','Karo','Rocky','Albert','Trixie','Herbert']\n\ngruppera = (djur,f) -> {}",
      a: "gruppera = (djur,f) -> _.groupBy djur, f",
      c: {
        "gruppera djur,(d) -> d.length": {
          "4": ["Karo"],
          "5": ["Rocky"],
          "6": ["Fluffy", "Albert", "Trixie"],
          "7": ["Herbert"]
        },
        "gruppera djur,(d) -> _.last(d)": {
          "y": ["Fluffy", "Rocky"],
          "o": ["Karo"],
          "t": ["Albert", "Herbert"],
          "e": ["Trixie"]
        }
      }
    },
    split: {
      b: "# LOC:1 split for in _.object\n\nparametrar = (url) -> {}",
      a: "parametrar = (url) -> _.object(f.split '=' for f in url.split('?')[1].split('&'))",
      c: {
        "_.object ['moe', 'larry', 'curly'], [30, 40, 50]": {
          moe: 30,
          larry: 40,
          curly: 50
        },
        "_.object [['moe', 30], ['larry', 40], ['curly', 50]]": {
          moe: 30,
          larry: 40,
          curly: 50
        },
        "parametrar 'dn.se?x=0&y=1'": {
          x: '0',
          y: '1'
        },
        "parametrar 'svd.se?page=7'": {
          page: '7'
        },
        "parametrar 'aftonbladet.se?article=123456&date=2016-12-01'": {
          article: '123456',
          date: '2016-12-01'
        },
        "parametrar 'expressen.se?city=Stockholm'": {
          city: 'Stockholm'
        },
        "parametrar 'http://stackoverflow.com/search?q=coffeescript'": {
          q: 'coffeescript'
        }
      }
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxJQUFBOztBQUFBLElBQUEsR0FFQztFQUFBLFNBQUEsRUFDQztJQUFBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRSwrTEFBRjtNQVNBLENBQUEsRUFBRSxFQVRGO0tBREQ7R0FERDtFQWFBLG1CQUFBLEVBQ0M7SUFBQSxTQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsZ25CQUFIO01BaUJBLENBQUEsRUFBRyxjQWpCSDtNQWtCQSxDQUFBLEVBQ0M7UUFBQSxLQUFBLEVBQVEsQ0FBUjtRQUNBLEtBQUEsRUFBUSxDQURSO09BbkJEO0tBREQ7SUF1QkEsU0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLGdLQUFIO01BU0EsQ0FBQSxFQUFHLGdCQVRIO01BVUEsQ0FBQSxFQUNDO1FBQUEsS0FBQSxFQUFRLENBQVI7UUFDQSxLQUFBLEVBQVEsQ0FEUjtRQUVBLEtBQUEsRUFBUSxDQUZSO1FBR0EsS0FBQSxFQUFRLENBSFI7UUFJQSxLQUFBLEVBQVEsQ0FKUjtRQUtBLEtBQUEsRUFBUSxDQUxSO1FBTUEsS0FBQSxFQUFRLENBTlI7UUFPQSxLQUFBLEVBQVEsQ0FQUjtPQVhEO0tBeEJEO0lBNENBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRyw2QkFBSDtNQUtBLENBQUEsRUFBRyxnQkFMSDtNQU1BLENBQUEsRUFDQztRQUFBLEtBQUEsRUFBUSxFQUFSO1FBQ0EsS0FBQSxFQUFRLEVBRFI7T0FQRDtLQTdDRDtJQXVEQSxTQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsNkJBQUg7TUFLQSxDQUFBLEVBQUcsZ0JBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxLQUFBLEVBQVEsRUFBUjtRQUNBLEtBQUEsRUFBUSxFQURSO09BUEQ7S0F4REQ7SUFrRUEsU0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLDZCQUFIO01BS0EsQ0FBQSxFQUFHLGVBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxNQUFBLEVBQVMsQ0FBVDtRQUNBLEtBQUEsRUFBUSxDQUFDLENBRFQ7T0FQRDtLQW5FRDtJQTZFQSxTQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsNkJBQUg7TUFLQSxDQUFBLEVBQUcsZ0JBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxLQUFBLEVBQVEsQ0FBUjtRQUNBLE1BQUEsRUFBUyxFQURUO09BUEQ7S0E5RUQ7SUF3RkEsU0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLDZCQUFIO01BS0EsQ0FBQSxFQUFHLGdCQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsS0FBQSxFQUFRLENBQVI7UUFDQSxLQUFBLEVBQVEsQ0FEUjtPQVBEO0tBekZEO0lBbUdBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRywrQkFBSDtNQUtBLENBQUEsRUFBRyxnQkFMSDtNQU1BLENBQUEsRUFDQztRQUFBLEtBQUEsRUFBUSxDQUFSO1FBQ0EsS0FBQSxFQUFRLENBRFI7UUFFQSxNQUFBLEVBQVMsQ0FGVDtRQUdBLE1BQUEsRUFBUyxDQUhUO09BUEQ7S0FwR0Q7SUFnSEEsU0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLG1DQUFIO01BS0EsQ0FBQSxFQUFHLG1CQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsUUFBQSxFQUFXLElBQVg7UUFDQSxRQUFBLEVBQVcsS0FEWDtRQUVBLFFBQUEsRUFBVyxLQUZYO1FBR0EsUUFBQSxFQUFXLElBSFg7UUFJQSxPQUFBLEVBQVUsS0FKVjtRQUtBLE9BQUEsRUFBVSxJQUxWO1FBTUEsT0FBQSxFQUFVLEtBTlY7UUFPQSxPQUFBLEVBQVUsS0FQVjtRQVFBLFFBQUEsRUFBVyxJQVJYO1FBU0EsUUFBQSxFQUFXLElBVFg7UUFVQSxRQUFBLEVBQVcsSUFWWDtRQVdBLFFBQUEsRUFBVyxLQVhYO1FBWUEsS0FBQSxFQUFRLEtBWlI7UUFhQSxLQUFBLEVBQVEsSUFiUjtRQWNBLEtBQUEsRUFBUSxLQWRSO1FBZUEsS0FBQSxFQUFRLEtBZlI7T0FQRDtLQWpIRDtJQXlJQSxVQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsa0NBQUg7TUFLQSxDQUFBLEVBQUcsa0JBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxLQUFBLEVBQVEsS0FBUjtRQUNBLEtBQUEsRUFBUSxLQURSO1FBRUEsS0FBQSxFQUFRLElBRlI7UUFHQSxLQUFBLEVBQVEsSUFIUjtPQVBEO0tBMUlEO0lBc0pBLFVBQUEsRUFDQztNQUFBLENBQUEsRUFBRyxrQ0FBSDtNQUtBLENBQUEsRUFBRyxrQkFMSDtNQU1BLENBQUEsRUFDQztRQUFBLEtBQUEsRUFBUSxLQUFSO1FBQ0EsS0FBQSxFQUFRLEtBRFI7UUFFQSxLQUFBLEVBQVEsSUFGUjtRQUdBLEtBQUEsRUFBUSxJQUhSO09BUEQ7S0F2SkQ7SUFtS0EsVUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLGlDQUFIO01BS0EsQ0FBQSxFQUFHLG1CQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsS0FBQSxFQUFRLElBQVI7UUFDQSxLQUFBLEVBQVEsS0FEUjtRQUVBLEtBQUEsRUFBUSxJQUZSO1FBR0EsS0FBQSxFQUFRLElBSFI7T0FQRDtLQXBLRDtHQWREO0VBOExBLG9CQUFBLEVBRUM7SUFBQSxTQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsK0JBQUg7TUFLQSxDQUFBLEVBQUcsa0JBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxPQUFBLEVBQVUsRUFBVjtRQUNBLE9BQUEsRUFBVSxFQURWO09BUEQ7S0FERDtJQVdBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRywrQkFBSDtNQUtBLENBQUEsRUFBRyxrQkFMSDtNQU1BLENBQUEsRUFDQztRQUFBLE9BQUEsRUFBVSxDQUFWO1FBQ0EsT0FBQSxFQUFVLEVBRFY7T0FQRDtLQVpEO0lBc0JBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRywrQkFBSDtNQUtBLENBQUEsRUFBRyxrQkFMSDtNQU1BLENBQUEsRUFDQztRQUFBLE9BQUEsRUFBVSxDQUFWO1FBQ0EsT0FBQSxFQUFVLENBRFY7T0FQRDtLQXZCRDtJQWlDQSxTQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsK0JBQUg7TUFLQSxDQUFBLEVBQUcsa0JBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxPQUFBLEVBQVUsQ0FBVjtRQUNBLFFBQUEsRUFBVyxDQURYO09BUEQ7S0FsQ0Q7SUE0Q0EsU0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLCtCQUFIO01BS0EsQ0FBQSxFQUFHLGtCQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsT0FBQSxFQUFVLENBQVY7UUFDQSxPQUFBLEVBQVUsQ0FEVjtRQUVBLFFBQUEsRUFBVyxDQUZYO1FBR0EsUUFBQSxFQUFXLENBSFg7T0FQRDtLQTdDRDtJQXlEQSxTQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcscUNBQUg7TUFLQSxDQUFBLEVBQUcscUJBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxPQUFBLEVBQVUsSUFBVjtRQUNBLE9BQUEsRUFBVSxJQURWO1FBRUEsT0FBQSxFQUFVLEtBRlY7UUFHQSxPQUFBLEVBQVUsS0FIVjtPQVBEO0tBMUREO0lBc0VBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRyxxQ0FBSDtNQUtBLENBQUEsRUFBRyx5QkFMSDtNQU1BLENBQUEsRUFDQztRQUFBLE9BQUEsRUFBVSxJQUFWO1FBQ0EsT0FBQSxFQUFVLElBRFY7UUFFQSxPQUFBLEVBQVUsS0FGVjtRQUdBLE9BQUEsRUFBVSxLQUhWO09BUEQ7S0F2RUQ7SUFtRkEsU0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLHFDQUFIO01BS0EsQ0FBQSxFQUFHLHlCQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsT0FBQSxFQUFVLElBQVY7UUFDQSxPQUFBLEVBQVUsSUFEVjtRQUVBLE9BQUEsRUFBVSxLQUZWO1FBR0EsT0FBQSxFQUFVLEtBSFY7T0FQRDtLQXBGRDtHQWhNRDtFQWdTQSxvQkFBQSxFQUVDO0lBQUEsS0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLG9FQUFGO01BT0EsQ0FBQSxFQUFFLHdFQVBGO01BWUEsQ0FBQSxFQUNDO1FBQUEsU0FBQSxFQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQVo7UUFDQSxXQUFBLEVBQWMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FEZDtRQUVBLGFBQUEsRUFBZ0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBRmhCO1FBR0EsS0FBQSxFQUFRLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FIUjtRQUlBLEtBQUEsRUFBUSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxDQUpSO1FBS0EsT0FBQSxFQUFVLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQUxWO1FBTUEsT0FBQSxFQUFVLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FOVjtRQU9BLFFBQUEsRUFBVyxDQUFDLENBQUMsQ0FBRixFQUFJLENBQUMsQ0FBTCxDQVBYO1FBUUEsVUFBQSxFQUFhLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixFQUFlLENBQWYsRUFBaUIsQ0FBakIsRUFBbUIsQ0FBbkIsQ0FSYjtRQVNBLFVBQUEsRUFBYSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULENBVGI7UUFVQSxZQUFBLEVBQWUsQ0FBQyxDQUFELEVBQUcsQ0FBQyxDQUFKLEVBQU0sQ0FBQyxDQUFQLEVBQVMsQ0FBQyxDQUFWLEVBQVksQ0FBQyxDQUFiLEVBQWUsQ0FBQyxDQUFoQixFQUFrQixDQUFDLENBQW5CLEVBQXFCLENBQUMsQ0FBdEIsRUFBd0IsQ0FBQyxDQUF6QixFQUEyQixDQUFDLENBQTVCLENBVmY7T0FiRDtLQUREO0lBMEJBLE1BQUEsRUFDQztNQUFBLENBQUEsRUFBRSxrRkFBRjtNQU1BLENBQUEsRUFBRSwyQkFORjtNQVNBLENBQUEsRUFDQztRQUFBLGFBQUEsRUFBZ0IsQ0FBaEI7UUFDQSxhQUFBLEVBQWdCLEVBRGhCO1FBRUEsZUFBQSxFQUFrQixFQUZsQjtRQUdBLGNBQUEsRUFBaUIsQ0FIakI7UUFJQSxhQUFBLEVBQWdCLEVBSmhCO1FBS0EsV0FBQSxFQUFjLEVBTGQ7UUFNQSxXQUFBLEVBQWMsRUFOZDtRQU9BLFdBQUEsRUFBYyxFQVBkO1FBUUEsYUFBQSxFQUFnQixFQVJoQjtRQVNBLFlBQUEsRUFBZSxDQVRmO09BVkQ7S0EzQkQ7SUFnREEsS0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLGdHQUFGO01BTUEsQ0FBQSxFQUFFLDRDQU5GO01BU0EsQ0FBQSxFQUNDO1FBQUEsd0JBQUEsRUFBMkIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsRUFBVCxDQUEzQjtRQUNBLFNBQUEsRUFBWSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULENBRFo7UUFFQSxTQUFBLEVBQVksQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQUZaO1FBR0EsU0FBQSxFQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FIWjtRQUlBLFdBQUEsRUFBYyxDQUFDLENBQUMsQ0FBRixFQUFJLENBQUMsQ0FBTCxFQUFPLENBQUMsQ0FBUixFQUFVLENBQUMsQ0FBWCxFQUFhLENBQUMsQ0FBZCxDQUpkO1FBS0EsV0FBQSxFQUFjLENBQUMsQ0FBRCxFQUFHLEVBQUgsRUFBTSxFQUFOLEVBQVMsRUFBVCxFQUFZLEVBQVosRUFBZSxHQUFmLEVBQW1CLEdBQW5CLEVBQXVCLEdBQXZCLEVBQTJCLEdBQTNCLEVBQStCLEdBQS9CLENBTGQ7UUFNQSxjQUFBLEVBQWlCLENBQUMsQ0FBQyxHQUFGLEVBQU0sR0FBTixFQUFVLEdBQVYsQ0FOakI7T0FWRDtLQWpERDtHQWxTRDtFQXFXQSxTQUFBLEVBRUM7SUFBQSxZQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsa09BQUY7TUFXQSxDQUFBLEVBQUUsdVdBWEY7TUFnQ0EsQ0FBQSxFQUNDO1FBQUEsZ0NBQUEsRUFBbUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFuQztRQUNBLFdBQUEsRUFBYyxDQUFDLENBQUQsRUFBRyxDQUFILENBRGQ7UUFFQSxXQUFBLEVBQWMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUZkO1FBSUEsYUFBQSxFQUFnQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUpoQjtRQUtBLGFBQUEsRUFBZ0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FMaEI7UUFNQSxhQUFBLEVBQWdCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBTmhCO1FBT0EsYUFBQSxFQUFnQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQVBoQjtRQVFBLGFBQUEsRUFBZ0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FSaEI7UUFTQSxhQUFBLEVBQWdCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBVGhCO1FBV0EsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FYbEI7UUFZQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQVpsQjtRQWFBLGVBQUEsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBYmxCO1FBY0EsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FkbEI7UUFlQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQWZsQjtRQWdCQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQWhCbEI7UUFrQkEsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FsQmxCO1FBbUJBLGVBQUEsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBbkJsQjtRQW9CQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQXBCbEI7UUFxQkEsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FyQmxCO1FBc0JBLGVBQUEsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBdEJsQjtRQXVCQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQXZCbEI7UUF5QkEsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0F6QmxCO1FBMEJBLGVBQUEsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBMUJsQjtRQTJCQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQTNCbEI7UUE0QkEsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0E1QmxCO1FBNkJBLGVBQUEsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBN0JsQjtRQThCQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQTlCbEI7UUFnQ0EsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FoQ2xCO1FBaUNBLGVBQUEsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBakNsQjtRQWtDQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQWxDbEI7UUFtQ0EsZUFBQSxFQUFrQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FuQ2xCO1FBb0NBLGVBQUEsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBcENsQjtRQXFDQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQXJDbEI7UUF1Q0EsaUJBQUEsRUFBb0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQXZDcEI7UUF3Q0EsaUJBQUEsRUFBb0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQXhDcEI7UUF5Q0EsaUJBQUEsRUFBb0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQXpDcEI7T0FqQ0Q7S0FERDtJQTZFQSxNQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsd01BQUY7TUFXQSxDQUFBLEVBQUUsZ01BWEY7TUFvQkEsQ0FBQSxFQUNDO1FBQUEsb0JBQUEsRUFBdUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBQXZCO1FBQ0Esa0JBQUEsRUFBcUIsQ0FEckI7UUFFQSxrQkFBQSxFQUFxQixFQUZyQjtRQUdBLG9CQUFBLEVBQXVCLENBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxFQUFQLENBSHZCO1FBSUEsb0JBQUEsRUFBdUIsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsQ0FKdkI7UUFLQSxxQkFBQSxFQUF3QixDQUFDLEVBQUQsRUFBSSxFQUFKLENBTHhCO1FBTUEsa0JBQUEsRUFBcUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBTnJCO1FBT0EsNEJBQUEsRUFBK0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBUC9CO1FBUUEsZUFBQSxFQUFrQixDQVJsQjtRQVNBLHVCQUFBLEVBQTBCLENBVDFCO1FBVUEsaUJBQUEsRUFBb0IsQ0FWcEI7UUFXQSxpQkFBQSxFQUFvQixDQVhwQjtRQVlBLDZCQUFBLEVBQWdDLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLENBWmhDO1FBYUEseUJBQUEsRUFBNEIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLENBYjVCO1FBY0EsMkJBQUEsRUFBOEIsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsQ0FkOUI7UUFlQSw0QkFBQSxFQUErQixDQUFDLEVBQUQsRUFBSSxFQUFKLENBZi9CO1FBZ0JBLDBCQUFBLEVBQTZCLENBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxFQUFQLEVBQVUsRUFBVixDQWhCN0I7T0FyQkQ7S0E5RUQ7SUFxSEEsVUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLGlKQUFIO01BTUEsQ0FBQSxFQUFHLHdIQU5IO01BWUEsQ0FBQSxFQUNDO1FBQUEsb0JBQUEsRUFBdUIsQ0FBdkI7UUFDQSw0QkFBQSxFQUErQixHQUQvQjtRQUVBLHVCQUFBLEVBQTBCLENBQUMsQ0FBQyxJQUFELEVBQU0sRUFBTixFQUFTLEVBQVQsQ0FBRCxFQUFjLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQWQsRUFBMkIsQ0FBQyxJQUFELEVBQU0sRUFBTixFQUFTLEVBQVQsQ0FBM0IsRUFBd0MsQ0FBQyxJQUFELEVBQU0sRUFBTixFQUFTLEVBQVQsQ0FBeEMsQ0FGMUI7UUFHQSxnQ0FBQSxFQUFtQyxDQUFDLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQUQsRUFBYyxDQUFDLElBQUQsRUFBTSxFQUFOLEVBQVMsRUFBVCxDQUFkLEVBQTJCLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQTNCLEVBQXdDLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQXhDLEVBQXFELENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQXJELEVBQWtFLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQWxFLEVBQStFLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQS9FLEVBQTRGLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQTVGLEVBQXlHLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQXpHLEVBQXNILENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULENBQXRILENBSG5DO09BYkQ7S0F0SEQ7SUF3SUEsVUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLCtFQUFIO01BS0EsQ0FBQSxFQUFHLDRPQUxIO01BY0EsQ0FBQSxFQUNDO1FBQUEsbUJBQUEsRUFBc0IsQ0FBQyxHQUFELEVBQUssR0FBTCxFQUFTLEdBQVQsQ0FBdEI7UUFDQSxLQUFBLEVBQVEsQ0FEUjtRQUVBLFNBQUEsRUFBWSxJQUZaO1FBR0EsT0FBQSxFQUFVLElBSFY7UUFJQSxPQUFBLEVBQVUsSUFKVjtRQUtBLGNBQUEsRUFBaUIsQ0FMakI7UUFNQSxtQkFBQSxFQUFzQixJQU50QjtRQU9BLFVBQUEsRUFBYSxDQVBiO1FBUUEsWUFBQSxFQUFlLENBUmY7UUFTQSxjQUFBLEVBQWlCLENBVGpCO1FBVUEsY0FBQSxFQUFpQixDQVZqQjtRQVdBLGtCQUFBLEVBQXFCLEVBWHJCO09BZkQ7S0F6SUQ7R0F2V0Q7RUE0Z0JBLFNBQUEsRUFDQztJQUFBLGdCQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUksa1hBQUo7TUFZQSxDQUFBLEVBQUUsaWNBWkY7TUE2QkEsQ0FBQSxFQUNDO1FBQUEsYUFBQSxFQUFnQixDQUFDLFNBQUQsRUFBWSxRQUFaLEVBQXNCLE1BQXRCLENBQWhCO1FBQ0EsWUFBQSxFQUFlLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsTUFBbkIsRUFBMEIsTUFBMUIsQ0FEZjtRQUVBLFlBQUEsRUFBZSxDQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sRUFBUCxDQUZmO1FBR0EsV0FBQSxFQUFjLENBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxFQUFQLEVBQVUsQ0FBVixDQUhkO1FBSUEsZ0JBQUEsRUFBbUIsRUFKbkI7UUFLQSxlQUFBLEVBQWtCLEVBTGxCO1FBTUEsYUFBQSxFQUFnQixDQU5oQjtRQU9BLFlBQUEsRUFBZSxDQVBmO1FBUUEsZ0JBQUEsRUFBbUIsRUFSbkI7UUFTQSxlQUFBLEVBQWtCLEdBVGxCO09BOUJEO0tBREQ7R0E3Z0JEO0VBdWpCQSxTQUFBLEVBRUM7SUFBQSxZQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsbWJBQUY7TUFnQkEsQ0FBQSxFQUFFLHVSQWhCRjtNQTBCQSxDQUFBLEVBQ0M7UUFBQSxxQkFBQSxFQUF3QixFQUF4QjtRQUNBLDBCQUFBLEVBQTZCLENBRDdCO1FBRUEsbUJBQUEsRUFBc0IsQ0FBQyxHQUFELEVBQUssR0FBTCxFQUFTLEdBQVQsQ0FGdEI7UUFHQSx3QkFBQSxFQUEyQixPQUgzQjtRQUlBLGdCQUFBLEVBQW1CLENBSm5CO1FBS0EsbUJBQUEsRUFBc0IsR0FMdEI7UUFNQSxvQkFBQSxFQUF1QixLQU52QjtRQU9BLG9CQUFBLEVBQXVCLEtBUHZCO1FBUUEsK0JBQUEsRUFBa0MsY0FSbEM7UUFTQSxtQkFBQSxFQUFzQixDQVR0QjtRQVVBLG1CQUFBLEVBQXNCLENBQUMsQ0FWdkI7UUFXQSxzQkFBQSxFQUF5QixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQVh6QjtRQVlBLGtDQUFBLEVBQXFDLE9BWnJDO1FBYUEsaUJBQUEsRUFBb0IsY0FicEI7T0EzQkQ7S0FERDtJQTJDQSxTQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUksMEpBQUo7TUFPQSxDQUFBLEVBQUcscUVBUEg7TUFVQSxDQUFBLEVBQ0M7UUFBQSxvQkFBQSxFQUF1QixLQUF2QjtRQUNBLGlCQUFBLEVBQW9CLElBRHBCO1FBRUEsbUJBQUEsRUFBc0IsSUFGdEI7UUFHQSxtQkFBQSxFQUFzQixLQUh0QjtPQVhEO0tBNUNEO0lBNERBLFVBQUEsRUFDQztNQUFBLENBQUEsRUFBRywyRUFBSDtNQUtBLENBQUEsRUFBRywrSEFMSDtNQVFBLENBQUEsRUFDQztRQUFBLGlCQUFBLEVBQW9CLHdCQUFwQjtRQUNBLGNBQUEsRUFBaUIsbUJBRGpCO1FBRUEscUJBQUEsRUFBd0Isd0JBRnhCO1FBR0Esa0JBQUEsRUFBcUIsbUJBSHJCO1FBSUEscUJBQUEsRUFBd0Isd0JBSnhCO09BVEQ7S0E3REQ7R0F6akJEO0VBc29CQSxtQkFBQSxFQUVDO0lBQUEsZUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLDJCQUFIO01BS0EsQ0FBQSxFQUFHLGtCQUxIO01BTUEsQ0FBQSxFQUNDO1FBQUEsS0FBQSxFQUFRLENBQVI7UUFDQSxLQUFBLEVBQVEsQ0FEUjtPQVBEO0tBREQ7SUFXQSxlQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsNkJBQUg7TUFLQSxDQUFBLEVBQUcsc0JBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxLQUFBLEVBQVEsQ0FBUjtRQUNBLEtBQUEsRUFBUSxDQURSO09BUEQ7S0FaRDtJQXNCQSxJQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsd0NBQUg7TUFLQSxDQUFBLEVBQUcsc0NBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxlQUFBLEVBQWtCLENBQWxCO1FBQ0EsY0FBQSxFQUFpQixFQURqQjtRQUVBLGdCQUFBLEVBQW1CLEVBRm5CO1FBR0EsY0FBQSxFQUFpQixFQUhqQjtRQUlBLGNBQUEsRUFBaUIsRUFKakI7T0FQRDtLQXZCRDtJQW9DQSxHQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsK0NBQUg7TUFLQSxDQUFBLEVBQUcsd0RBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxpQkFBQSxFQUFvQixFQUFwQjtRQUNBLGlCQUFBLEVBQW9CLEVBRHBCO1FBRUEsaUJBQUEsRUFBb0IsRUFGcEI7UUFHQSxpQkFBQSxFQUFvQixFQUhwQjtRQUlBLG1CQUFBLEVBQXNCLEdBSnRCO1FBS0EsbUJBQUEsRUFBc0IsRUFMdEI7T0FQRDtLQXJDRDtJQW1EQSxXQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsK0JBQUg7TUFLQSxDQUFBLEVBQUcseUNBTEg7TUFNQSxDQUFBLEVBQ0M7UUFBQSxPQUFBLEVBQVUsRUFBVjtRQUNBLE9BQUEsRUFBVSxFQURWO1FBRUEsT0FBQSxFQUFVLEVBRlY7UUFHQSxPQUFBLEVBQVUsQ0FIVjtRQUlBLE9BQUEsRUFBVSxHQUpWO1FBS0EsT0FBQSxFQUFVLEdBTFY7UUFNQSxPQUFBLEVBQVUsR0FOVjtRQU9BLE9BQUEsRUFBVSxHQVBWO1FBUUEsT0FBQSxFQUFVLEdBUlY7UUFTQSxPQUFBLEVBQVUsR0FUVjtRQVVBLFFBQUEsRUFBVyxHQVZYO1FBV0EsUUFBQSxFQUFXLEdBWFg7UUFZQSxRQUFBLEVBQVcsRUFaWDtPQVBEO0tBcEREO0lBeUVBLFdBQUEsRUFDQztNQUFBLENBQUEsRUFBRywrQkFBSDtNQUtBLENBQUEsRUFBRyx3REFMSDtNQU1BLENBQUEsRUFDQztRQUFBLE9BQUEsRUFBVSxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQUFwQjtRQUdBLE9BQUEsRUFBVSxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQUhwQjtRQUlBLE9BQUEsRUFBVSxFQUFBLEdBQUcsSUFBSSxDQUFDLEVBQVIsR0FBVyxDQUpyQjtRQUtBLE9BQUEsRUFBVSxFQUFBLEdBQUcsSUFBSSxDQUFDLEVBQVIsR0FBVyxDQUxyQjtRQU1BLE9BQUEsRUFBVSxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQU5wQjtRQU9BLE9BQUEsRUFBVSxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQVBwQjtRQVNBLE9BQUEsRUFBVSxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQVRwQjtRQVVBLFFBQUEsRUFBVyxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQVZyQjtRQVdBLFFBQUEsRUFBVyxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQVhyQjtRQVlBLFFBQUEsRUFBVyxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQVAsR0FBVSxDQVpyQjtPQVBEO0tBMUVEO0dBeG9CRDtFQXV1QkEsV0FBQSxFQUVDO0lBQUEsR0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFJLDJiQUFKO01BZ0JBLENBQUEsRUFBRyxtZEFoQkg7TUFzQ0EsQ0FBQSxFQUNDO1FBQUEsYUFBQSxFQUFnQixDQUFDLFNBQUQsRUFBWSxRQUFaLEVBQXNCLE1BQXRCLENBQWhCO1FBQ0EsWUFBQSxFQUFlLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsTUFBbkIsRUFBMEIsTUFBMUIsQ0FEZjtRQUVBLFlBQUEsRUFBZSxDQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sRUFBUCxDQUZmO1FBR0EsV0FBQSxFQUFjLENBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxFQUFQLEVBQVUsQ0FBVixDQUhkO1FBSUEsZ0JBQUEsRUFBbUIsRUFKbkI7UUFLQSxlQUFBLEVBQWtCLEVBTGxCO1FBTUEsYUFBQSxFQUFnQixDQU5oQjtRQU9BLFlBQUEsRUFBZSxDQVBmO1FBUUEsb0JBQUEsRUFBdUIsRUFSdkI7UUFTQSxtQkFBQSxFQUFzQixHQVR0QjtPQXZDRDtLQUREO0lBbURBLE9BQUEsRUFDQztNQUFBLENBQUEsRUFBRSw4UEFBRjtNQWNBLENBQUEsRUFBRSwyTUFkRjtNQThCQSxDQUFBLEVBQ0M7UUFBQSxNQUFBLEVBQVMsV0FBVDtRQUNBLGtCQUFBLEVBQXFCLFdBRHJCO1FBRUEsY0FBQSxFQUFpQixXQUZqQjtRQUdBLGVBQUEsRUFBa0IsWUFIbEI7UUFJQSxlQUFBLEVBQWtCLFdBSmxCO1FBS0EsMEJBQUEsRUFBNkIsV0FMN0I7UUFNQSwwQkFBQSxFQUE2QixXQU43QjtRQU9BLE1BQUEsRUFBUyxZQVBUO1FBUUEsa0JBQUEsRUFBcUIsWUFSckI7UUFTQSxjQUFBLEVBQWlCLFlBVGpCO1FBVUEsZUFBQSxFQUFrQixhQVZsQjtRQVdBLGVBQUEsRUFBa0IsWUFYbEI7UUFZQSwwQkFBQSxFQUE2QixZQVo3QjtRQWFBLDBCQUFBLEVBQTZCLFlBYjdCO1FBY0Esd0JBQUEsRUFBMkIsWUFkM0I7UUFlQSwwQ0FBQSxFQUE2QyxZQWY3QztPQS9CRDtLQXBERDtJQW9HQSxNQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsMHJCQUFGO01Bd0JBLENBQUEsRUFBRSw4Z0NBeEJGO01BcUVBLENBQUEsRUFDQztRQUFBLGNBQUEsRUFBaUIsQ0FBakI7UUFDQSxtQkFBQSxFQUFzQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUR0QjtRQUVBLGdCQUFBLEVBQW1CLENBRm5CO1FBR0EsaUJBQUEsRUFBb0IsQ0FIcEI7UUFJQSxxQkFBQSxFQUF3QixDQUFDLEVBQUQsRUFBSSxFQUFKLENBSnhCO1FBS0EsdUJBQUEsRUFBMEIsQ0FBQyxFQUFELENBTDFCO1FBTUEsb0JBQUEsRUFBdUIsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsQ0FOdkI7UUFPQSwwQkFBQSxFQUE2QixvQkFQN0I7UUFRQSxRQUFBLEVBQVcsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FSWDtRQVNBLFVBQUEsRUFBYSxLQVRiO1FBVUEsaUJBQUEsRUFBb0IsS0FWcEI7UUFXQSxpQkFBQSxFQUFvQixLQVhwQjtRQVlBLGlCQUFBLEVBQW9CLE1BWnBCO1FBYUEsd0JBQUEsRUFBMkIsTUFiM0I7UUFjQSxpQkFBQSxFQUFvQixzQkFkcEI7UUFlQSxVQUFBLEVBQWEsaUNBZmI7UUFnQkEsaUJBQUEsRUFBbUIsS0FoQm5CO1FBaUJBLGlCQUFBLEVBQW9CLFFBakJwQjtRQWtCQSxpQkFBQSxFQUFvQixPQWxCcEI7UUFtQkEsVUFBQSxFQUFZLHlDQW5CWjtPQXRFRDtLQXJHRDtJQWdNQSxPQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsd09BQUg7TUFVQSxDQUFBLEVBQUcsdVBBQUEsR0FhSSxJQUFDLENBQUEsQ0FiTCxHQWFPLHlCQWJQLEdBY0ksSUFBQyxDQUFBLENBZEwsR0FjTyx1R0FkUCxHQW1CSSxJQUFDLENBQUEsQ0FuQkwsR0FtQk8sMEJBbkJQLEdBb0JJLElBQUMsQ0FBQSxDQXBCTCxHQW9CTyxrTkE5QlY7TUE2Q0EsQ0FBQSxFQUNDO1FBQUEsMEJBQUEsRUFBNEIsSUFBNUI7UUFDQSwyQkFBQSxFQUE4QixNQUQ5QjtRQUVBLDBCQUFBLEVBQTZCLElBRjdCO1FBR0EseUJBQUEsRUFBNEIsR0FINUI7UUFJQSx5QkFBQSxFQUE0QixHQUo1QjtRQUtBLDBCQUFBLEVBQTZCLE1BTDdCO1FBTUEsMEJBQUEsRUFBNkIsS0FON0I7UUFPQSx5QkFBQSxFQUE0QixHQVA1QjtRQVFBLHlCQUFBLEVBQTRCLEtBUjVCO1FBU0EseUJBQUEsRUFBNEIsTUFUNUI7UUFVQSxnREFBQSxFQUFtRCxLQVZuRDtRQVdBLGdEQUFBLEVBQW1ELEtBWG5EO09BOUNEO0tBak1EO0lBNFBBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRyw2a0JBQUg7TUF1QkEsQ0FBQSxFQUFHLGdtREF2Qkg7TUF3RUEsQ0FBQSxFQUNDO1FBQUEsb0JBQUEsRUFBdUIsS0FBdkI7UUFDQSw0QkFBQSxFQUErQixJQUQvQjtRQUVBLDRCQUFBLEVBQStCLEtBRi9CO1FBR0EsdUJBQUEsRUFBMEIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBSDFCO1FBSUEsd0JBQUEsRUFBMkIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUozQjtRQUtBLGdDQUFBLEVBQW1DLENBQUMsTUFBRCxFQUFRLElBQVIsRUFBYSxLQUFiLENBTG5DO1FBTUEsaURBQUEsRUFBb0QsQ0FBQyxJQUFELEVBQU0sS0FBTixFQUFZLE1BQVosQ0FOcEQ7UUFRQSw0Q0FBQSxFQUE4QyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLEVBQXJCLENBUjlDO1FBU0EsNENBQUEsRUFBOEMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsRUFBVCxDQVQ5QztRQVVBLDRDQUFBLEVBQThDLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FWOUM7UUFXQSw0Q0FBQSxFQUE4QyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssRUFBTCxFQUFRLENBQVIsRUFBVSxDQUFWLEVBQVksQ0FBWixFQUFjLENBQWQsRUFBZ0IsQ0FBaEIsRUFBa0IsQ0FBbEIsRUFBb0IsQ0FBcEIsRUFBc0IsQ0FBdEIsQ0FYOUM7UUFZQSw0Q0FBQSxFQUE4QyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLENBWjlDO1FBYUEsNENBQUEsRUFBOEMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsRUFBVCxFQUFZLENBQVosRUFBYyxDQUFkLENBYjlDO1FBY0EsNENBQUEsRUFBOEMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxFQUFiLENBZDlDO1FBZUEsNENBQUEsRUFBOEMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsRUFBVCxFQUFZLENBQVosRUFBYyxDQUFkLEVBQWdCLENBQWhCLEVBQWtCLENBQWxCLENBZjlDO1FBZ0JBLDRDQUFBLEVBQThDLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxFQUFMLEVBQVEsQ0FBUixFQUFVLENBQVYsRUFBWSxDQUFaLEVBQWMsQ0FBZCxFQUFnQixDQUFoQixFQUFrQixDQUFsQixFQUFvQixDQUFwQixFQUFzQixDQUF0QixDQWhCOUM7UUFrQkEseUVBQUEsRUFBMkUsQ0FsQjNFO1FBbUJBLHlFQUFBLEVBQTJFLENBQUMsQ0FuQjVFO1FBb0JBLHlFQUFBLEVBQTJFLENBQUMsQ0FwQjVFO1FBcUJBLHlFQUFBLEVBQTJFLENBckIzRTtRQXNCQSx5RUFBQSxFQUEyRSxDQXRCM0U7UUF1QkEseUVBQUEsRUFBMkUsQ0F2QjNFO1FBd0JBLHlFQUFBLEVBQTJFLENBQUMsQ0F4QjVFO1FBeUJBLHlFQUFBLEVBQTJFLENBekIzRTtRQTBCQSx5RUFBQSxFQUEyRSxDQTFCM0U7T0F6RUQ7S0E3UEQ7SUFrV0EsT0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLGtGQUFBLEdBQzZFLDBYQURoRjtNQXFCQSxDQUFBLEVBQUcsa3dDQXJCSDtNQW1GQSxDQUFBLEVBQ0M7UUFBQSxPQUFBLEVBQVUsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBVjtRQUNBLE9BQUEsRUFBVSxDQUFDLENBQUQsRUFBRyxDQUFILENBRFY7UUFFQSxVQUFBLEVBQWEsYUFGYjtRQUdBLFVBQUEsRUFBYSxLQUhiO1FBSUEsaUJBQUEsRUFBb0IsYUFKcEI7UUFLQSxpQkFBQSxFQUFvQixzQkFMcEI7UUFNQSxZQUFBLEVBQWUsRUFOZjtRQU9BLGdCQUFBLEVBQW1CLENBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxFQUFQLEVBQVUsRUFBVixFQUFhLENBQWIsQ0FQbkI7UUFRQSxnQkFBQSxFQUFtQixDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEVBQVosQ0FSbkI7UUFTQSxjQUFBLEVBQWlCLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FUakI7UUFVQSxlQUFBLEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQVZsQjtRQVdBLGtCQUFBLEVBQXFCLHdCQVhyQjtRQVlBLG9CQUFBLEVBQXVCLENBWnZCO1FBYUEsa0JBQUEsRUFBcUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQWJyQjtRQWNBLGtCQUFBLEVBQXFCLENBQUMsRUFBRCxFQUFJLENBQUosRUFBTSxDQUFDLENBQVAsQ0FkckI7UUFlQSxrQkFBQSxFQUFxQixDQUFDLENBQUMsQ0FBRixFQUFJLENBQUMsRUFBTCxFQUFRLENBQUMsQ0FBVCxDQWZyQjtRQWdCQSxrQkFBQSxFQUFxQixDQUFDLENBQUMsRUFBRixFQUFLLENBQUwsRUFBTyxFQUFQLEVBQVUsQ0FBVixFQUFZLENBQUMsQ0FBYixDQWhCckI7T0FwRkQ7S0FuV0Q7R0F6dUJEO0VBbXJDQSxjQUFBLEVBRUM7SUFBQSxJQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcscUlBQUg7TUFPQSxDQUFBLEVBQUcsNkVBUEg7TUFVQSxDQUFBLEVBQ0M7UUFBQSxjQUFBLEVBQWlCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQUFqQjtRQUNBLGVBQUEsRUFBa0IsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLENBQVAsRUFBUyxDQUFULENBRGxCO1FBRUEsY0FBQSxFQUFpQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FGakI7T0FYRDtLQUREO0lBZ0JBLEtBQUEsRUFDQztNQUFBLENBQUEsRUFBRyxtRUFBSDtNQUtBLENBQUEsRUFBRyxnSUFMSDtNQVdBLENBQUEsRUFDQztRQUFBLGlCQUFBLEVBQW9CLEtBQXBCO1FBQ0EsZUFBQSxFQUFrQixJQURsQjtRQUVBLGlCQUFBLEVBQW9CLEtBRnBCO1FBR0EsbUJBQUEsRUFBc0IsRUFIdEI7UUFJQSxtQkFBQSxFQUFzQixDQUFDLEVBQUQsRUFBSSxFQUFKLENBSnRCO1FBTUEsaUJBQUEsRUFBb0IsRUFOcEI7UUFPQSwrREFBQSxFQUFrRSxHQVBsRTtPQVpEO0tBakJEO0lBc0NBLGdCQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsb0tBQUY7TUFPQSxDQUFBLEVBQUUscU5BUEY7TUFnQkEsQ0FBQSxFQUNDO1FBQUEsVUFBQSxFQUFhLFFBQWI7UUFDQSxhQUFBLEVBQWdCLFFBRGhCO1FBRUEsV0FBQSxFQUFjLFFBRmQ7UUFHQSxXQUFBLEVBQWMsUUFIZDtRQUlBLFdBQUEsRUFBYyxRQUpkO1FBS0EsU0FBQSxFQUFZLENBTFo7UUFNQSxTQUFBLEVBQVksQ0FOWjtRQU9BLFFBQUEsRUFBVyxJQVBYO1FBUUEsWUFBQSxFQUFlLEtBUmY7UUFTQSxhQUFBLEVBQWdCLElBVGhCO1FBVUEsVUFBQSxFQUFhLElBVmI7UUFXQSxjQUFBLEVBQWlCLElBWGpCO1FBWUEsY0FBQSxFQUFpQixLQVpqQjtRQWFBLGVBQUEsRUFBa0IsQ0FBQyxDQWJuQjtRQWNBLG1CQUFBLEVBQXNCLENBQUMsQ0FkdkI7UUFlQSxvQkFBQSxFQUF1QixDQUFDLENBZnhCO1FBZ0JBLG9CQUFBLEVBQXVCLENBaEJ2QjtRQWlCQSxtQkFBQSxFQUFzQixDQWpCdEI7UUFrQkEsOEJBQUEsRUFBaUMsQ0FsQmpDO1FBbUJBLCtCQUFBLEVBQWtDLENBQUMsQ0FuQm5DO1FBb0JBLCtCQUFBLEVBQWtDLENBQUMsQ0FwQm5DO1FBcUJBLCtCQUFBLEVBQWtDLENBQUMsQ0FyQm5DO1FBc0JBLDBIQUFBLEVBQTZILENBQUMsQ0F0QjlIO1FBdUJBLDBIQUFBLEVBQTZILENBdkI3SDtRQXdCQSwwSEFBQSxFQUE2SCxDQXhCN0g7T0FqQkQ7S0F2Q0Q7SUFrRkEsTUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLHVPQUFIO01BZUEsQ0FBQSxFQUFHLHNEQWZIO01BbUJBLENBQUEsRUFDQztRQUFBLG1DQUFBLEVBQXNDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBdEM7UUFDQSxlQUFBLEVBQWtCO1VBQUM7WUFBQyxJQUFBLEVBQUssTUFBTjtZQUFhLEdBQUEsRUFBSSxNQUFqQjtXQUFELEVBQTBCO1lBQUMsSUFBQSxFQUFLLE9BQU47WUFBYyxHQUFBLEVBQUksTUFBbEI7V0FBMUI7U0FEbEI7UUFFQSxlQUFBLEVBQWtCO1VBQUM7WUFBQyxJQUFBLEVBQUssUUFBTjtZQUFlLEdBQUEsRUFBSSxNQUFuQjtXQUFELEVBQTRCO1lBQUMsSUFBQSxFQUFLLFNBQU47WUFBZ0IsR0FBQSxFQUFJLE1BQXBCO1dBQTVCO1NBRmxCO1FBR0EsZ0JBQUEsRUFBbUI7VUFBQztZQUFDLElBQUEsRUFBSyxRQUFOO1lBQWUsR0FBQSxFQUFJLE9BQW5CO1dBQUQ7U0FIbkI7UUFJQSxlQUFBLEVBQWtCO1VBQUM7WUFBQyxJQUFBLEVBQUssUUFBTjtZQUFlLEdBQUEsRUFBSSxNQUFuQjtXQUFEO1NBSmxCO1FBS0EsbUJBQUEsRUFBc0IsRUFMdEI7T0FwQkQ7S0FuRkQ7SUE4R0EsYUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLG1PQUFIO01BZUEsQ0FBQSxFQUFHLHlDQWZIO01Ba0JBLENBQUEsRUFDQztRQUFBLHlCQUFBLEVBQTRCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLEVBQVQsQ0FBNUI7UUFDQSxXQUFBLEVBQWMsQ0FBQyxRQUFELEVBQVUsTUFBVixFQUFpQixPQUFqQixFQUF5QixRQUF6QixFQUFrQyxRQUFsQyxFQUEyQyxTQUEzQyxDQURkO09BbkJEO0tBL0dEO0lBcUlBLE1BQUEsRUFDQztNQUFBLENBQUEsRUFBRyx1UEFBSDtNQWtCQSxDQUFBLEVBQUcsa0ZBbEJIO01BcUJBLENBQUEsRUFDQztRQUFBLGlEQUFBLEVBQW9ELEVBQXBEO1FBQ0EsbURBQUEsRUFBc0QsR0FEdEQ7UUFFQSxXQUFBLEVBQWMsR0FGZDtRQUdBLGNBQUEsRUFBaUIsR0FIakI7T0F0QkQ7S0F0SUQ7SUFpS0EsTUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLDhHQUFIO01BT0EsQ0FBQSxFQUFHLHdDQVBIO01BVUEsQ0FBQSxFQUNDO1FBQUEsNEJBQUEsRUFBK0IsQ0FBQyxNQUFELEVBQVEsT0FBUixFQUFnQixRQUFoQixFQUF5QixRQUF6QixFQUFrQyxRQUFsQyxFQUEyQyxTQUEzQyxDQUEvQjtRQUNBLGNBQUEsRUFBaUIsQ0FBQyxRQUFELEVBQVUsUUFBVixFQUFtQixTQUFuQixFQUE2QixNQUE3QixFQUFvQyxPQUFwQyxFQUE0QyxRQUE1QyxDQURqQjtPQVhEO0tBbEtEO0lBZ0xBLE9BQUEsRUFDQztNQUFBLENBQUEsRUFBRyw4R0FBSDtNQU9BLENBQUEsRUFBRywwQ0FQSDtNQVVBLENBQUEsRUFDQztRQUFBLCtCQUFBLEVBQWtDO1VBQUMsR0FBQSxFQUFJLENBQUMsTUFBRCxDQUFMO1VBQWMsR0FBQSxFQUFJLENBQUMsT0FBRCxDQUFsQjtVQUE0QixHQUFBLEVBQUksQ0FBQyxRQUFELEVBQVUsUUFBVixFQUFtQixRQUFuQixDQUFoQztVQUE2RCxHQUFBLEVBQUksQ0FBQyxTQUFELENBQWpFO1NBQWxDO1FBQ0EsZ0NBQUEsRUFBbUM7VUFBQyxHQUFBLEVBQUksQ0FBQyxRQUFELEVBQVUsT0FBVixDQUFMO1VBQXdCLEdBQUEsRUFBSSxDQUFDLE1BQUQsQ0FBNUI7VUFBcUMsR0FBQSxFQUFJLENBQUMsUUFBRCxFQUFVLFNBQVYsQ0FBekM7VUFBOEQsR0FBQSxFQUFJLENBQUMsUUFBRCxDQUFsRTtTQURuQztPQVhEO0tBakxEO0lBK0xBLEtBQUEsRUFDQztNQUFBLENBQUEsRUFBRywyREFBSDtNQUtBLENBQUEsRUFBRyxtRkFMSDtNQVFBLENBQUEsRUFDQztRQUFBLGtEQUFBLEVBQXFEO1VBQUMsR0FBQSxFQUFLLEVBQU47VUFBVSxLQUFBLEVBQU8sRUFBakI7VUFBcUIsS0FBQSxFQUFPLEVBQTVCO1NBQXJEO1FBQ0Esc0RBQUEsRUFBeUQ7VUFBQyxHQUFBLEVBQUssRUFBTjtVQUFVLEtBQUEsRUFBTyxFQUFqQjtVQUFxQixLQUFBLEVBQU8sRUFBNUI7U0FEekQ7UUFFQSw0QkFBQSxFQUErQjtVQUFDLENBQUEsRUFBRSxHQUFIO1VBQVEsQ0FBQSxFQUFFLEdBQVY7U0FGL0I7UUFHQSw0QkFBQSxFQUErQjtVQUFDLElBQUEsRUFBTyxHQUFSO1NBSC9CO1FBSUEsNERBQUEsRUFBK0Q7VUFBQyxPQUFBLEVBQVEsUUFBVDtVQUFtQixJQUFBLEVBQUssWUFBeEI7U0FKL0Q7UUFLQSwwQ0FBQSxFQUE2QztVQUFDLElBQUEsRUFBTyxXQUFSO1NBTDdDO1FBTUEsNkRBQUEsRUFBZ0U7VUFBQyxDQUFBLEVBQUksY0FBTDtTQU5oRTtPQVREO0tBaE1EO0dBcnJDRCIsInNvdXJjZXNDb250ZW50IjpbIiMgYSA6IGZhY2l0LCBtaWdodCBiZSBhbnkgbGFuZ3VhZ2UuIE5vdCB1c2VkIGJ5IHA1RG9qby5cclxuIyBiIDogY29tbWVudCBsaW5lLiBMT0MgYW5kIGtleXdvcmQgY2x1ZXNcclxuIyBjIDogY2FsbCBpbiBDb2ZmZWVzY3JpcHQgc3ludGF4XHJcblxyXG5kYXRhID0gXHJcblxyXG5cdFwiTnloZXRlclwiIDpcclxuXHRcdFwiTnloZXRlclwiIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBOWUhFVEVSXHJcbiMgMjAxNy0wMy0wMSBBMzogTGlzdG9yLCBWw6R4ZWxjeWtlbCwgS2Fsa3lsYXRvclxyXG4jICAgICAgICAgICAgQTU6IFBhbGluZHJvbSwgUsO2dmFyc3Byw6VrXHJcbiMgICAgICAgICAgICBBNzogQmlnbnVtLCBQb2tlcmhhbmRcclxuIyAgICAgICAgICAgIEE4OiBMaXN0IHJlY3Vyc2lvblxyXG5cclxuIyBLbGlja2EgbnUgcMOlIEEwIVxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXHJcblx0XHJcblx0XCJBMDogT25lIFBhcmFtZXRlclwiIDogXHJcblx0XHRPcGVyYXRvcjEgOiAgXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIEbDtnJzw7ZrIGF0dCBza2FwYSBmdW5rdGlvbmVuIGYuXHJcblx0XHRcdCMgZigyKSBza2EgYmxpIDIuIGYoMykgc2thIGJsaSAzLlxyXG5cdFx0XHQjIERlbiBmw7Zyc3RhIGtvbHVtbmVuIChndWwpIGlubmVow6VsbGVyIElOREFUQS5cclxuXHRcdFx0IyBEZW4gYW5kcmEga29sdW1uZW4gKGdyw7ZuKSBpbm5laMOlbGxlciBVVERBVEEgZHUgc2thIMOldGVyc2thcGEuXHJcblx0XHRcdCMgRGVuIHRyZWRqZSBrb2x1bW5lbiAocsO2ZCBlbGxlciBncsO2bikgaW5uZWjDpWxsZXIgVVREQVRBIHNrYXBhZCBhdiBkaW4ga29kLlxyXG5cdFx0XHRcclxuXHRcdFx0IyBTZSB0aWxsIGF0dCBnw7ZyYSBkZSBSw5ZEQSBjZWxsZXJuYSBHUsOWTkEhIEfDpSB0aWxsIHNpc3RhIHJhZGVuIG1lZCBQZ0RuLlxyXG5cdFx0XHRcclxuXHRcdFx0IyDDhG5kcmEgbm9sbGFuIHRpbGwgZW4gdHbDpWEuIE51IGJsaXIgZW5iYXJ0IGRlbiBmw7Zyc3RhIFLDlkRBIGNlbGxlbiBHUsOWTi5cclxuXHRcdFx0IyDDhG5kcmEgdHbDpWFuIHRpbGwgZW4gdHJlYS4gIE51IGJsaXIgZW5iYXJ0IGRlbiBhbmRyYSBSw5ZEQSBjZWxsZW4gR1LDlk4uXHJcblx0XHRcdCMgw4RuZHJhIHRyZWFuIHRpbGwgZXR0IHguICAgIE51IGJsaXIgYsOlZGEgZGUgUsOWREEgY2VsbGVybmEgR1LDlk5BIVxyXG5cdFx0XHRcclxuXHRcdFx0IyBHw6UgdGlsbCBuw6RzdGEgw7Z2bmluZyBnZW5vbSBhdHQga2xpY2thIHDDpSBPcGVyYXRvcjIuXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiB4XCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJmIDJcIiA6IDJcclxuXHRcdFx0XHRcImYgM1wiIDogMyBcclxuXHJcblx0XHRPcGVyYXRvcjI6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBWw6RsaiBlbiBhdiBkZXNzYSBvcGVyYXRvcmVyOiArIC0gKiAvICVcclxuXHRcdFx0IyBmKDcpID09IDhcclxuXHRcdFx0IyBmKDgpID09IDlcclxuXHRcdFx0IyBmKHgpID09ID9cclxuXHRcdFx0IyBTanUgc2thIGJsaSDDpXR0YSBvY2ggw6V0dGEgc2thIGJsaSBuaW8uIFZhZCBza2EgZiBza2lja2EgdXQ/XHJcblx0XHRcdFxyXG5cdFx0XHRmID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiB4KzFcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcIjMrMlwiIDogNVxyXG5cdFx0XHRcdFwiMy0yXCIgOiAxXHJcblx0XHRcdFx0XCIzKjJcIiA6IDZcclxuXHRcdFx0XHRcIjYvMlwiIDogM1xyXG5cdFx0XHRcdFwiNSUyXCIgOiAxXHJcblx0XHRcdFx0XCI2JTJcIiA6IDBcclxuXHRcdFx0XHRcImYgN1wiIDogOFxyXG5cdFx0XHRcdFwiZiA4XCIgOiA5IFxyXG5cclxuXHRcdE9wZXJhdG9yMzogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImYgPSAoeCkgLT4gMip4XCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJmIDVcIiA6IDEwXHJcblx0XHRcdFx0XCJmIDZcIiA6IDEyIFxyXG5cclxuXHRcdE9wZXJhdG9yNDogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImYgPSAoeCkgLT4geCp4XCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJmIDVcIiA6IDI1XHJcblx0XHRcdFx0XCJmIDZcIiA6IDM2XHJcblxyXG5cdFx0T3BlcmF0b3I1OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiAteFwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdFwiZiAtNFwiIDogNFxyXG5cdFx0XHRcdFwiZiAzXCIgOiAtM1xyXG5cclxuXHRcdE9wZXJhdG9yNjogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjICsgLSAqIC8gJVxyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImYgPSAoeCkgLT4geC0yXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJmIDdcIiA6IDVcclxuXHRcdFx0XHRcImYgMTdcIiA6IDE1XHJcblxyXG5cdFx0T3BlcmF0b3I3OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiB4LzJcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcImYgOFwiIDogNFxyXG5cdFx0XHRcdFwiZiA2XCIgOiAzXHJcblxyXG5cdFx0T3BlcmF0b3I4OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRmID0gKHgpIC0+IDBcdFx0XHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImYgPSAoeCkgLT4geCUyXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJmIDdcIiA6IDFcclxuXHRcdFx0XHRcImYgOFwiIDogMFxyXG5cdFx0XHRcdFwiZiAxMFwiIDogMFxyXG5cdFx0XHRcdFwiZiAxMVwiIDogMVxyXG5cclxuXHRcdE9wZXJhdG9yOTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjID09IDwgPiAhPVxyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiBudWxsXHRcdFx0XHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImYgPSAoeCkgLT4geCA9PSAyXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIjEgPT0gMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA9PSAyXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMSAhPSAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMSAhPSAyXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxIDwgMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgPCAyXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxID4gMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcIjEgPiAyXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiMSA8PSAxXCIgOiB0cnVlXHJcblx0XHRcdFx0XCIxIDw9IDJcIiA6IHRydWVcclxuXHRcdFx0XHRcIjEgPj0gMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMSA+PSAyXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiZiAxXCIgOiBmYWxzZVxyXG5cdFx0XHRcdFwiZiAyXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJmIDNcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJmIDRcIiA6IGZhbHNlXHJcblxyXG5cdFx0T3BlcmF0b3IxMDogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjID09IDwgPiAhPVxyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiBudWxsXHRcdFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJmID0gKHgpIC0+IHggPiAyXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImYgMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcImYgMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcImYgM1wiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZiA0XCIgOiB0cnVlXHJcblxyXG5cdFx0T3BlcmF0b3IxMTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjID09IDwgPiAhPVxyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiBudWxsXHRcdFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJmID0gKHgpIC0+IHggPiAyXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImYgMVwiIDogZmFsc2VcclxuXHRcdFx0XHRcImYgMlwiIDogZmFsc2VcclxuXHRcdFx0XHRcImYgM1wiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZiA0XCIgOiB0cnVlXHJcblxyXG5cdFx0T3BlcmF0b3IxMjogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjID09IDwgPiAhPVxyXG5cclxuXHRcdFx0ZiA9ICh4KSAtPiBudWxsXHRcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiZiA9ICh4KSAtPiB4ICE9IDJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiZiAxXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJmIDJcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJmIDNcIiA6IHRydWVcclxuXHRcdFx0XHRcImYgNFwiIDogdHJ1ZVxyXG5cclxuXHRcIkExOiBUd28gUGFyYW1ldGVyc1wiIDogXHJcblx0XHJcblx0XHRPcGVyYXRvcjE6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICVcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImcgPSAoYSxiKSAtPiBhKmJcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcImcgMyw0XCIgOiAxMlxyXG5cdFx0XHRcdFwiZyA0LDZcIiA6IDI0XHJcblxyXG5cdFx0T3BlcmF0b3IyOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYStiXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJnIDMsNFwiIDogN1xyXG5cdFx0XHRcdFwiZyA0LDZcIiA6IDEwXHJcblxyXG5cdFx0T3BlcmF0b3IzOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlXHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYi1hXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0XCJnIDMsNFwiIDogMVxyXG5cdFx0XHRcdFwiZyA0LDZcIiA6IDJcclxuXHJcblx0XHRPcGVyYXRvcjQ6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICVcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImcgPSAoYSxiKSAtPiBhL2JcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcImcgOCw0XCIgOiAyXHJcblx0XHRcdFx0XCJnIDEyLDNcIiA6IDRcclxuXHJcblx0XHRPcGVyYXRvcjU6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICVcclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImcgPSAoYSxiKSAtPiBhJWJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiZyA4LDRcIiA6IDBcclxuXHRcdFx0XHRcImcgOSw0XCIgOiAxXHJcblx0XHRcdFx0XCJnIDEwLDRcIiA6IDJcclxuXHRcdFx0XHRcImcgMTEsNFwiIDogM1xyXG5cdFxyXG5cdFx0T3BlcmF0b3I2OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgKyAtICogLyAlID09XHJcblxyXG5cdFx0XHRnID0gKGEsYikgLT4gbnVsbFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJnID0gKGEsYikgLT4gYSA9PSBiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgMCwwXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJnIDEsMVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyA3LDRcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJnIDYsNFwiIDogZmFsc2VcclxuXHJcblx0XHRPcGVyYXRvcjc6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICUgPT1cclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPiBudWxsXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImcgPSAoYSxiKSAtPiBhIC0gYiA9PSAxXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgNyw2XCIgOiB0cnVlXHJcblx0XHRcdFx0XCJnIDUsNFwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyA3LDRcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJnIDYsNFwiIDogZmFsc2VcclxuXHJcblx0XHRPcGVyYXRvcjg6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyArIC0gKiAvICUgPT1cclxuXHJcblx0XHRcdGcgPSAoYSxiKSAtPiBudWxsXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcImcgPSAoYSxiKSAtPiBhICsgYiA9PSA3XCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImcgNywwXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJnIDUsMlwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiZyA3LDRcIiA6IGZhbHNlXHJcblx0XHRcdFx0XCJnIDYsNFwiIDogZmFsc2VcclxuXHJcblx0J0EyOiByYW5nZSBsZXJwIGZvcicgOlxyXG5cclxuXHRcdHJhbmdlOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzozIHJhbmdlXHJcblxyXG5mID0gKG4pIC0+IFtdXHJcbmcgPSAoYSxiKSAtPiBbXVxyXG5oID0gKGEsYixuKSAtPiBbXVxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZiA9IChuKSAtPiByYW5nZSBuXHJcbmcgPSAoYSxiKSAtPiByYW5nZSBhLGJcclxuZyA9IChhLGIsbikgLT4gcmFuZ2UgYSxiLG5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0XCJyYW5nZSAzXCIgOiBbMCwxLDJdXHJcblx0XHRcdFx0XCJyYW5nZSAxLDRcIiA6IFsxLDIsM11cclxuXHRcdFx0XHRcInJhbmdlIDEsOSwyXCIgOiBbMSwzLDUsN11cclxuXHRcdFx0XHRcImYgNVwiIDogWzAsMSwyLDMsNF1cclxuXHRcdFx0XHRcImYgNlwiIDogWzAsMSwyLDMsNCw1XVxyXG5cdFx0XHRcdFwiZyAxLDVcIiA6IFsxLDIsMyw0XVxyXG5cdFx0XHRcdFwiZyAyLDRcIiA6IFsyLDNdXHJcblx0XHRcdFx0XCJnIC0yLDBcIiA6IFstMiwtMV1cclxuXHRcdFx0XHRcImggMCwxMCwxXCIgOiBbMCwxLDIsMyw0LDUsNiw3LDgsOV1cclxuXHRcdFx0XHRcImggMCwxMCwyXCIgOiBbMCwyLDQsNiw4XVxyXG5cdFx0XHRcdFwiaCAwLC0xMCwtMVwiIDogWzAsLTEsLTIsLTMsLTQsLTUsLTYsLTcsLTgsLTldXHJcblxyXG5cdFx0XCJsZXJwXCI6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjEgbGVycFxyXG4jIEbDtnJzw7ZrIGzDtnNhIHVwcGdpZnRlbiBiw6VkZSBtZWQgb2NoIHV0YW4gbGVycFxyXG5cclxuZiA9IChhLGIsaSkgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZiA9IChhLGIsaSkgLT4gbGVycCBhLGIsaVxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwwXCIgOiA4XHJcblx0XHRcdFx0XCJsZXJwIDgsMTIsMVwiIDogMTJcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwwLjVcIiA6IDEwXHJcblx0XHRcdFx0XCJsZXJwIDgsMTIsLTFcIiA6IDRcclxuXHRcdFx0XHRcImxlcnAgOCwxMiwyXCIgOiAxNlxyXG5cdFx0XHRcdFwiZiAxMCwyMCwwXCIgOiAxMFxyXG5cdFx0XHRcdFwiZiAxMCwyMCwxXCIgOiAyMFxyXG5cdFx0XHRcdFwiZiAxMCwyMCwyXCIgOiAzMFxyXG5cdFx0XHRcdFwiZiAxMCwyMCwwLjVcIiA6IDE1XHJcblx0XHRcdFx0XCJmIDEwLDIwLC0xXCIgOiAwXHJcblxyXG5cdFx0XCJmb3JcIjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MSBmb3IgaW4gcmFuZ2UgbGVycFxyXG4jIEbDtnJzw7ZrIGzDtnNhIHVwcGdpZnRlbiBiw6VkZSBtZWQgb2NoIHV0YW4gbGVycFxyXG5cclxuZiA9IChhLGIsbikgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmYgPSAoYSxiLG4pIC0+IGxlcnAgYSxiLGkgZm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIihpKmkgZm9yIGkgaW4gcmFuZ2UgNSlcIiA6IFswLDEsNCw5LDE2XVx0XHRcdFx0XHJcblx0XHRcdFx0XCJmIDAsMCw1XCIgOiBbMCwwLDAsMCwwXVxyXG5cdFx0XHRcdFwiZiAxLDIsNVwiIDogWzEsMiwzLDQsNV1cclxuXHRcdFx0XHRcImYgNSw0LDVcIiA6IFs1LDQsMywyLDFdXHJcblx0XHRcdFx0XCJmIC0xLC0yLDVcIiA6IFstMSwtMiwtMywtNCwtNV1cclxuXHRcdFx0XHRcImYgNSwyNSwxMFwiIDogWzUsMjUsNDUsNjUsODUsMTA1LDEyNSwxNDUsMTY1LDE4NV1cclxuXHRcdFx0XHRcImYgLTAuMSwwLjAsM1wiIDogWy0wLjEsMC4wLDAuMV1cclxuXHJcblx0XCJBMzogWyBdXCIgOlxyXG5cclxuXHRcdEludHJvZHVrdGlvbjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTYgaWYgPCB0aGVuIGVsc2VcclxuIyBTb3J0ZXJhIFVUQU4gYXR0IGFudsOkbmRhIGxvb3BhclxyXG4jIER1IGbDpXIgaW50ZSBoZWxsZXIgYW52w6RuZGEgbsOlZ29uIHB1bmt0XHJcblxyXG5zb3J0MiA9IChhLGIpIC0+IFthLGJdXHJcbnNvcnQzID0gKGEsYixjKSAtPiBbYSxiLGNdXHJcbnNvcnQ0ID0gKGEsYixjLGQpIC0+IFthLGIsYyxkXVxyXG5zb3J0NSA9IChhLGIsYyxkLGUpIC0+IFthLGIsYyxkLGVdXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuc29ydDIgPSAoYSxiKSAtPiBpZiBhPmIgdGhlbiBbYixhXSBlbHNlIFthLGJdXHJcblxyXG5zb3J0MyA9IChhLGIsYykgLT5cclxuXHRbYSxiXSA9IHNvcnQyIGEsYlxyXG5cdFtiLGNdID0gc29ydDIgYixjXHJcblx0W2EsYl0gPSBzb3J0MiBhLGJcclxuXHRbYSxiLGNdXHJcblxyXG5zb3J0NCA9IChhLGIsYyxkKSAtPlxyXG5cdFthLGIsY10gPSBzb3J0MyBhLGIsY1xyXG5cdFtiLGMsZF0gPSBzb3J0MyBiLGMsZFxyXG5cdFthLGJdID0gc29ydDIgYSxiXHJcblx0W2EsYixjLGRdXHJcblxyXG5zb3J0NSA9IChhLGIsYyxkLGUpIC0+XHJcblx0W2EsYixjLGRdID0gc29ydDQgYSxiLGMsZFxyXG5cdFtiLGMsZCxlXSA9IHNvcnQ0IGIsYyxkLGVcclxuXHRbYSxiXSA9IHNvcnQyIGEsYlxyXG5cdFthLGIsYyxkLGVdXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiaWYgMSA8IDIgdGhlbiBbMSwyXSBlbHNlIFsyLDFdXCIgOiBbMSwyXVxyXG5cdFx0XHRcdFwic29ydDIgMyw0XCIgOiBbMyw0XVxyXG5cdFx0XHRcdFwic29ydDIgNCwzXCIgOiBbMyw0XVxyXG5cclxuXHRcdFx0XHRcInNvcnQzIDMsNCw1XCIgOiBbMyw0LDVdXHJcblx0XHRcdFx0XCJzb3J0MyAzLDUsNFwiIDogWzMsNCw1XVxyXG5cdFx0XHRcdFwic29ydDMgNCwzLDVcIiA6IFszLDQsNV1cclxuXHRcdFx0XHRcInNvcnQzIDQsNSwzXCIgOiBbMyw0LDVdXHJcblx0XHRcdFx0XCJzb3J0MyA1LDMsNFwiIDogWzMsNCw1XVxyXG5cdFx0XHRcdFwic29ydDMgNSw0LDNcIiA6IFszLDQsNV1cclxuXHJcblx0XHRcdFx0XCJzb3J0NCAzLDQsNSw2XCIgOiBbMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnQ0IDMsNCw2LDVcIiA6IFszLDQsNSw2XVxyXG5cdFx0XHRcdFwic29ydDQgMyw1LDQsNlwiIDogWzMsNCw1LDZdXHJcblx0XHRcdFx0XCJzb3J0NCAzLDUsNiw0XCIgOiBbMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnQ0IDMsNiw0LDVcIiA6IFszLDQsNSw2XVxyXG5cdFx0XHRcdFwic29ydDQgMyw2LDUsNFwiIDogWzMsNCw1LDZdXHJcblxyXG5cdFx0XHRcdFwic29ydDQgNCwzLDUsNlwiIDogWzMsNCw1LDZdXHJcblx0XHRcdFx0XCJzb3J0NCA0LDMsNiw1XCIgOiBbMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnQ0IDQsNSwzLDZcIiA6IFszLDQsNSw2XVxyXG5cdFx0XHRcdFwic29ydDQgNCw1LDYsM1wiIDogWzMsNCw1LDZdXHJcblx0XHRcdFx0XCJzb3J0NCA0LDYsMyw1XCIgOiBbMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnQ0IDQsNiw1LDNcIiA6IFszLDQsNSw2XVxyXG5cclxuXHRcdFx0XHRcInNvcnQ0IDUsMyw0LDZcIiA6IFszLDQsNSw2XVxyXG5cdFx0XHRcdFwic29ydDQgNSwzLDYsNFwiIDogWzMsNCw1LDZdXHJcblx0XHRcdFx0XCJzb3J0NCA1LDQsMyw2XCIgOiBbMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnQ0IDUsNCw2LDNcIiA6IFszLDQsNSw2XVxyXG5cdFx0XHRcdFwic29ydDQgNSw2LDMsNFwiIDogWzMsNCw1LDZdXHJcblx0XHRcdFx0XCJzb3J0NCA1LDYsNCwzXCIgOiBbMyw0LDUsNl1cclxuXHJcblx0XHRcdFx0XCJzb3J0NCA2LDMsNCw1XCIgOiBbMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnQ0IDYsMyw1LDRcIiA6IFszLDQsNSw2XVxyXG5cdFx0XHRcdFwic29ydDQgNiw0LDMsNVwiIDogWzMsNCw1LDZdXHJcblx0XHRcdFx0XCJzb3J0NCA2LDQsNSwzXCIgOiBbMyw0LDUsNl1cclxuXHRcdFx0XHRcInNvcnQ0IDYsNSwzLDRcIiA6IFszLDQsNSw2XVxyXG5cdFx0XHRcdFwic29ydDQgNiw1LDQsM1wiIDogWzMsNCw1LDZdXHJcblxyXG5cdFx0XHRcdFwic29ydDUgNSw0LDMsMiwxXCIgOiBbMSwyLDMsNCw1XVxyXG5cdFx0XHRcdFwic29ydDUgMyw1LDIsNCwxXCIgOiBbMSwyLDMsNCw1XVxyXG5cdFx0XHRcdFwic29ydDUgNSwyLDMsNCwxXCIgOiBbMSwyLDMsNCw1XVxyXG5cclxuXHRcdExpc3RvciA6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjExIGxlbmd0aCBwdXNoIGNvbmNhdCBwb3Agc29ydCAuLiBbXVxyXG5cclxuYW50YWwgPSAoYSkgLT4gMFxyXG5mZXRjaCA9IChhLGkpIC0+IDAgXHJcbmtvbmthdGVuZXJhID0gKGEsYikgLT4gW10gXHJcbnNvcnRlcmEgPSAoYSkgLT4gW11cclxuZsO2cnN0YSA9IChhLG4pIC0+IFtdXHJcbm1pdHRpID0gKGEsaSxqKSAtPiBbXVxyXG5zaXN0YSA9IChhLG4pIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5hbnRhbCA9IChhKSAtPiBhLmxlbmd0aFxyXG5mZXRjaCA9IChhLGkpIC0+IGFbaV1cclxua29ua2F0ZW5lcmEgPSAoYSxiKSAtPiBhLmNvbmNhdCBiXHJcbnNvcnRlcmEgPSAoYSkgLT4gYS5zb3J0KClcclxuZsO2cnN0YSA9IChhLG4pIC0+IGFbLi5uLTFdXHJcbm1pdHRpID0gKGEsaSxqKSAtPiBhW2kuLmpdXHJcbnNpc3RhID0gKGEsbikgLT4gYVstbi4uXVxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIlsxLDJdLmNvbmNhdCBbMyw0XVwiIDogWzEsMiwzLDRdXHJcblx0XHRcdFx0XCJbMiwzLDQsNV0ubGVuZ3RoXCIgOiA0XHJcblx0XHRcdFx0XCJbMTEsMjIsMzMsNDRdWzJdXCIgOiAzM1xyXG5cdFx0XHRcdFwiWzExLDIyLDMzLDQ0XVsuLjJdXCIgOiBbMTEsMjIsMzNdXHJcblx0XHRcdFx0XCJbMTEsMjIsMzMsNDRdWzEuLl1cIiA6IFsyMiwzMyw0NF1cclxuXHRcdFx0XHRcIlsxMSwyMiwzMyw0NF1bMS4uMl1cIiA6IFsyMiwzM11cclxuXHRcdFx0XHRcIls0LDIsMywxXS5zb3J0KClcIiA6IFsxLDIsMyw0XVxyXG5cdFx0XHRcdFwiWzQsMiwzLDFdLnNvcnQoKS5yZXZlcnNlKClcIiA6IFs0LDMsMiwxXVxyXG5cdFx0XHRcdFwiYW50YWwgWzEsMiwzXVwiIDogM1xyXG5cdFx0XHRcdFwiYW50YWwgWzUsNCwxLDIsOSwzLDddXCIgOiA3XHJcblx0XHRcdFx0XCJmZXRjaCBbNCw1LDZdLDBcIiA6IDRcclxuXHRcdFx0XHRcImZldGNoIFs0LDUsNl0sMlwiIDogNlxyXG5cdFx0XHRcdFwia29ua2F0ZW5lcmEgWzEsMiwzXSxbNCw1LDZdXCIgOiBbMSwyLDMsNCw1LDZdXHJcblx0XHRcdFx0XCJzb3J0ZXJhIFs1LDQsMSwyLDksMyw3XVwiIDogWzEsMiwzLDQsNSw3LDldXHJcblx0XHRcdFx0XCJmw7Zyc3RhIFsxMSwxMiwxMywxNCwxNV0sM1wiIDogWzExLDEyLDEzXVxyXG5cdFx0XHRcdFwibWl0dGkgWzExLDEyLDEzLDE0LDE1XSwxLDJcIiA6IFsxMiwxM11cclxuXHRcdFx0XHRcInNpc3RhIFsxMSwxMiwxMywxNCwxNV0sNFwiIDogWzEyLDEzLDE0LDE1XVxyXG5cclxuXHRcdFbDpHhlbGN5a2VsIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjQgW10gZm9yIGluIHB1c2ggc29ydCAtIC9cclxuIyBEaW4gdsOkeGVsY3lrZWwgaGFyIHN0b3JhIG9jaCBzbcOlIGt1Z2doanVsLiBJIHZpbGtlbiBpIG9yZG5pbmcgbGlnZ2VyIHbDpHhsYXJuYT8gXHJcblxyXG5nZWFyID0gKGJpZywgc21hbGwpIC0+IFtdXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuZ2VhciA9IChiaWcsIHNtYWxsKSAtPlxyXG5cdHJlcyA9IFtdXHJcblx0cmVzLnB1c2ggW01hdGgucm91bmQoYi9zICogMTAwKS8xMDAsYixzXSBmb3IgcyBpbiBzbWFsbCBmb3IgYiBpbiBiaWdcclxuXHRyZXMuc29ydCgpIFxyXG5cIlwiXCJcdFxyXG5cdFx0XHRjOlx0XHJcblx0XHRcdFx0XCJNYXRoLnJvdW5kKDMuMTQxNSlcIiA6IDNcclxuXHRcdFx0XHRcIk1hdGgucm91bmQoMy4xNDE1ICogMTApLzEwXCIgOiAzLjFcclxuXHRcdFx0XHRcImdlYXIoWzQzLDUzXSxbMTMsMjFdKVwiIDogW1syLjA1LDQzLDIxXSxbMi41Miw1MywyMV0sWzMuMzEsNDMsMTNdLFs0LjA4LDUzLDEzXV1cclxuXHRcdFx0XHRcImdlYXIoWzQzLDUzXSxbMTMsMTUsMTcsMTksMjFdKVwiIDogW1syLjA1LDQzLDIxXSxbMi4yNiw0MywxOV0sWzIuNTIsNTMsMjFdLFsyLjUzLDQzLDE3XSxbMi43OSw1MywxOV0sWzIuODcsNDMsMTVdLFszLjEyLDUzLDE3XSxbMy4zMSw0MywxM10sWzMuNTMsNTMsMTVdLFs0LjA4LDUzLDEzXV1cclxuXHJcblx0XHRLYWxreWxhdG9yIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjcgW10gZm9yIGluIHNwbGl0ID09IHB1c2ggcG9wIGlmIGVsc2UgcGFyc2VJbnRcclxuXHJcbmNhbGMgPSAoY29tbWFuZCkgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmNhbGMgPSAoY29tbWFuZCkgLT5cclxuXHRzdGFjayA9IFtdXHJcblx0Zm9yIGNtZCBpbiBjb21tYW5kLnNwbGl0ICcgJ1xyXG5cdFx0aWYgY21kID09ICcrJyB0aGVuIHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKyBzdGFjay5wb3AoKVxyXG5cdFx0ZWxzZSBpZiBjbWQgPT0gJyonIHRoZW4gc3RhY2sucHVzaCBzdGFjay5wb3AoKSAqIHN0YWNrLnBvcCgpXHJcblx0XHRlbHNlIHN0YWNrLnB1c2ggcGFyc2VJbnQgY21kXHJcblx0c3RhY2sucG9wKClcdFx0XHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwiJ2EgYiBjJy5zcGxpdCAnICdcIiA6IFsnYScsJ2InLCdjJ11cclxuXHRcdFx0XHQnMSsyJyA6IDNcclxuXHRcdFx0XHRcIicxJysnMidcIiA6ICcxMidcclxuXHRcdFx0XHRcIjErJzInXCIgOiAnMTInXHJcblx0XHRcdFx0XCInMScrMlwiIDogJzEyJ1xyXG5cdFx0XHRcdFwicGFyc2VJbnQgJzMnXCIgOiAzXHJcblx0XHRcdFx0XCJwYXJzZUZsb2F0ICczLjE0J1wiIDogMy4xNFxyXG5cdFx0XHRcdFwiY2FsYyAnMidcIiA6IDJcclxuXHRcdFx0XHRcImNhbGMgJzIgMydcIiA6IDNcclxuXHRcdFx0XHRcImNhbGMgJzIgMyArJ1wiIDogNVxyXG5cdFx0XHRcdFwiY2FsYyAnMiAzIConXCIgOiA2XHJcblx0XHRcdFx0XCJjYWxjICcyIDMgNCAqICsnXCIgOiAxNFxyXG5cclxuXHRcIkE0OiB7IH1cIiA6XHJcblx0XHRcIkJveXMgYW5kIEdpcmxzXCIgOlxyXG5cdFx0XHRiIDogXCJcIlwiXHJcbiMgTE9DOjcge30gW10gZm9yIGluIGxlbmd0aCArIC9cclxuXHJcbmdpcmxzID0gW3tuYW1lOiAnU2FicmluYScsIGFnZTogMTJ9LCB7bmFtZTogJ0hlbGVuZScsIGFnZTogMTB9LCB7bmFtZTogJ0FubmEnLCBhZ2U6IDExfV1cclxuYm95cyA9IFt7bmFtZTogJ0RhdmlkJywgYWdlOiAxMH0sIHtuYW1lOiAnSGVucnknLCBhZ2U6IDExfSwge25hbWU6ICdOb2VsJywgYWdlOiAxNH0sIHtuYW1lOiAnTnVtYScsIGFnZTogM31dXHJcblxyXG5uYW1lcyA9IChraWRzKSAtPiBraWQubmFtZSBmb3Iga2lkIGluIGtpZHNcclxuYWdlcyA9IChraWRzKSAtPiBbXVxyXG5zdW0gPSAobnVtYmVycykgLT4gMFxyXG5hbnRhbCA9IChudW1iZXJzKSAtPiAwXHJcbmF2ZyA9IChudW1iZXJzKSAtPiAwXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5naXJscyA9IFt7bmFtZTogJ1NhYnJpbmEnLCBhZ2U6IDEyfSwge25hbWU6ICdIZWxlbmUnLCBhZ2U6IDEwfSwge25hbWU6ICdBbm5hJywgYWdlOiAxMX1dXHJcbmJveXMgPSBbe25hbWU6ICdEYXZpZCcsIGFnZTogMTB9LCB7bmFtZTogJ0hlbnJ5JywgYWdlOiAxMX0sIHtuYW1lOiAnTm9lbCcsIGFnZTogMTR9LCB7bmFtZTogJ051bWEnLCBhZ2U6IDN9XVxyXG5cclxubmFtZXMgPSAoa2lkcykgLT4ga2lkLm5hbWUgZm9yIGtpZCBpbiBraWRzXHJcblxyXG5hZ2VzID0gKGtpZHMpIC0+IGtpZC5hZ2UgZm9yIGtpZCBpbiBraWRzXHJcblxyXG5zdW0gPSAobnVtYmVycykgLT5cclxuXHRyZXMgPSAwXHJcblx0cmVzICs9IG4gZm9yIG4gaW4gbnVtYmVyc1xyXG5cdHJlc1xyXG5cclxuYW50YWwgPSAobnVtYmVycykgLT4gbnVtYmVycy5sZW5ndGggXHJcblx0XHJcbmF2ZyA9IChudW1iZXJzKSAtPiBzdW0obnVtYmVycykgLyBhbnRhbChudW1iZXJzKVxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIm5hbWVzIGdpcmxzXCIgOiBbJ1NhYnJpbmEnLCAnSGVsZW5lJywgJ0FubmEnXVxyXG5cdFx0XHRcdFwibmFtZXMgYm95c1wiIDogWydEYXZpZCcsICdIZW5yeScsICdOb2VsJywnTnVtYSddIFxyXG5cdFx0XHRcdFwiYWdlcyBnaXJsc1wiIDogWzEyLDEwLDExXVxyXG5cdFx0XHRcdFwiYWdlcyBib3lzXCIgOiBbMTAsMTEsMTQsM11cclxuXHRcdFx0XHRcInN1bSBhZ2VzIGdpcmxzXCIgOiAzM1xyXG5cdFx0XHRcdFwic3VtIGFnZXMgYm95c1wiIDogMzhcclxuXHRcdFx0XHRcImFudGFsIGdpcmxzXCIgOiAzXHJcblx0XHRcdFx0XCJhbnRhbCBib3lzXCIgOiA0XHJcblx0XHRcdFx0XCJhdmcgYWdlcyBnaXJsc1wiIDogMTFcclxuXHRcdFx0XHRcImF2ZyBhZ2VzIGJveXNcIiA6IDkuNVxyXG5cclxuXHQnQTU6IFwiIFwiJyA6XHJcblxyXG5cdFx0SW50cm9kdWt0aW9uOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzo4IGxlbmd0aCBbXSAuLiArIGluZGV4T2Ygc3BsaXQgam9pbiBmb3IgaW5cclxuIyBMT0MgYmV0eWRlciBMaW5lcyBPZiBDb2RlLCBkdnMgYW50YWwga29kcmFkZXIuXHJcbiMgw4V0dGEga29kcmFkZXIgw6RyIGxhZ29tIGbDtnIgZGV0dGEgcHJvYmxlbS5cclxuIyBGw6RycmUgaW5uZWLDpHIgc8OkbXJlIGzDpHNiYXJoZXQuXHJcbiMgSGFyIGR1IGZsZXIgYsO2ciBkdSBmdW5kZXJhIHDDpSBlbiBrb3J0YXJlIGzDtnNuaW5nLlxyXG5cclxuYW50YWwgPSAocykgLT4gMFxyXG50ZWNrZW4gPSAocyxpKSAtPiBcIlwiXHJcbm1pdHRpID0gKHMsaSxqKSAtPiBcIlwiXHJcbmtvbmthdGVuZXJhID0gKHMsdCkgLT4gXCJcIlxyXG5sZXRhID0gKHMsdCkgLT4gMFxyXG5zcGxpdHRyYSA9IChzLGF2Z3IpIC0+IFtdIFxyXG5ob3BzbGFnbmluZyA9IChhLGF2Z3I9JycpIC0+IFwiXCIgXHJcbmR1YmJsYSA9IChzKSAtPiBcIlwiXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5hbnRhbCA9IChzKSAtPiBzLmxlbmd0aFxyXG50ZWNrZW4gPSAocyxpKSAtPiBzW2ldXHJcbm1pdHRpID0gKHMsaSxqKSAtPiBzW2kuLmpdXHJcbmtvbmthdGVuZXJhID0gKHMsdCkgLT4gcyArIHRcclxubGV0YSA9IChzLHQpIC0+IHMuaW5kZXhPZiB0XHJcbnNwbGl0dHJhID0gKHMsYXZncikgLT4gcy5zcGxpdCBhdmdyXHJcbmhvcHNsYWduaW5nID0gKGEsYXZncj0nJykgLT4gYS5qb2luKGF2Z3IpXHJcbmR1YmJsYSA9IChzKSAtPiBob3BzbGFnbmluZyAodGVja2VuICsgdGVja2VuIGZvciB0ZWNrZW4gaW4gcylcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0J1wiSmF2YXNjcmlwdFwiLmxlbmd0aCcgOiAxMFxyXG5cdFx0XHRcdCdcIkphdmFzY3JpcHRcIi5pbmRleE9mIFwiYVwiJyA6IDFcclxuXHRcdFx0XHQnXCIxLDIsM1wiLnNwbGl0IFwiLFwiJyA6IFtcIjFcIixcIjJcIixcIjNcIl1cclxuXHRcdFx0XHQnW1wiMVwiLFwiMlwiLFwiM1wiXS5qb2luIFwiIFwiJyA6IFwiMSAyIDNcIlxyXG5cdFx0XHRcdCdhbnRhbCBcIkNvZmZlZVwiJyA6IDZcclxuXHRcdFx0XHQndGVja2VuIFwiQ29mZmVlXCIsMScgOiAnbydcclxuXHRcdFx0XHQnbWl0dGkgXCJDb2ZmZWVcIiwxLDMnIDogJ29mZidcclxuXHRcdFx0XHQnbWl0dGkgXCJDb2ZmZWVcIiwzLDUnIDogJ2ZlZSdcclxuXHRcdFx0XHQna29ua2F0ZW5lcmEgXCJDb2ZmZWVcIixcInNjcmlwdFwiJyA6ICdDb2ZmZWVzY3JpcHQnIFxyXG5cdFx0XHRcdCdsZXRhIFwiQ29mZmVlXCIsXCJlXCInIDogNFxyXG5cdFx0XHRcdCdsZXRhIFwiQ29mZmVlXCIsXCJ4XCInIDogLTFcclxuXHRcdFx0XHRcInNwbGl0dHJhICcyIDMgKycsJyAnXCIgOiBbJzInLCAnMycsICcrJ10gXHJcblx0XHRcdFx0XCJob3BzbGFnbmluZyBbJzInLCAnMycsICcrJ10sICd8J1wiIDogXCIyfDN8K1wiXHJcblx0XHRcdFx0J2R1YmJsYSBcInNjcmlwdFwiJyA6ICdzc2NjcnJpaXBwdHQnXHJcblxyXG5cdFx0UGFsaW5kcm9tIDpcclxuXHRcdFx0YiA6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxIGpvaW4gcmV2ZXJzZSBzcGxpdFxyXG5cdFx0XHQjIEV0dCBwYWxpbmRyb20gYmxpciBzYW1tYSBvcmQgb20gbWFuIHbDpG5kZXIgcMOlIGRldC5cclxuXHRcdFx0IyBPcmRldCBwYWxpbmRyb20gw6RyIGludGUgZXR0IHBhbGluZHJvbS5cclxuXHJcblx0XHRcdHBhbGluZHJvbSA9ICh3b3JkKSAtPiBudWxsXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxucGFsaW5kcm9tID0gKHdvcmQpIC0+IHdvcmQuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikgPT0gd29yZFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcInBhbGluZHJvbSAnYmFkcnVtJ1wiIDogZmFsc2VcclxuXHRcdFx0XHRcInBhbGluZHJvbSAna8O2aydcIiA6IHRydWVcclxuXHRcdFx0XHRcInBhbGluZHJvbSAna2FqYWsnXCIgOiB0cnVlXHJcblx0XHRcdFx0XCJwYWxpbmRyb20gJ2thbm90J1wiIDogZmFsc2VcclxuXHJcblx0XHRSw7Z2YXJzcHLDpWsgOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSBmb3IgaW4gaWYgdGhlbiBlbHNlICsgam9pbiAnJyAoKVxyXG5cclxuXHRcdFx0cnMgPSAod29yZCxleHRyYT0nbycpIC0+IFwiXCJcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5ycyA9ICh3b3JkLGV4dHJhPSdvJykgLT4gKChpZiBsZXR0ZXIgaW4gJ2FlaW91eSDDpcOkw7YnIHRoZW4gbGV0dGVyIGVsc2UgbGV0dGVyICsgZXh0cmEgKyBsZXR0ZXIpIGZvciBsZXR0ZXIgaW4gd29yZCkuam9pbihcIlwiKVxyXG5cIlwiXCJcclxuXHRcdFx0YzpcdFxyXG5cdFx0XHRcdFwicnMgJ2thbGFzIGZpbnQnXCIgOiAna29rYWxvbGFzb3MgZm9maW5vbnRvdCdcclxuXHRcdFx0XHRcInJzICdib2tzdGF2J1wiIDogJ2JvYm9rb2tzb3N0b3Rhdm92J1xyXG5cdFx0XHRcdFwicnMgJ2thbGFzIGZpbnQnLCdpJ1wiIDogJ2tpa2FsaWxhc2lzIGZpZmluaW50aXQnXHJcblx0XHRcdFx0XCJycyAnYm9rc3RhdicsJ2UnXCIgOiAnYmVib2tla3Nlc3RldGF2ZXYnXHJcblx0XHRcdFx0XCJycyAna2FsYXMgZmludCcsJ2EnXCIgOiAna2FrYWxhbGFzYXMgZmFmaW5hbnRhdCdcclxuXHJcblxyXG5cdFwiQTY6IEludGVycG9sYXRpb25cIiA6IFxyXG5cclxuXHRcdGxpbmVhcmVxdWF0aW9uMTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxICpcclxuXHJcblx0XHRcdGYgPSAoeCkgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJmID0gKHgpIC0+IDIgKiB4XCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwiZiAyXCIgOiA0XHJcblx0XHRcdFx0XCJmIDNcIiA6IDZcclxuXHJcblx0XHRsaW5lYXJlcXVhdGlvbjI6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6MSAqICtcclxuXHJcblx0XHRcdGYgPSAoeCkgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJmID0gKHgpIC0+IDMgKyAyICogeFwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdFwiZiAyXCIgOiA3XHJcblx0XHRcdFx0XCJmIDNcIiA6IDlcclxuXHJcblx0XHRsZXJwOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcblx0XHRcdCMgTE9DOjEgKiArIC1cclxuXHJcblx0XHRcdGxlcnAgPSAoeTEseTIseCkgLT4gMFxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJsZXJwID0gKHkxLHkyLHgpIC0+IHkxICsgKHkyLXkxKSAqIHhcIlxyXG5cdFx0XHRjOiAgXHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LC0xXCIgOiA0XHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LDBcIiA6IDEwXHJcblx0XHRcdFx0XCJsZXJwIDEwLDE2LDAuNVwiIDogMTNcclxuXHRcdFx0XHRcImxlcnAgMTAsMTYsMVwiIDogMTZcclxuXHRcdFx0XHRcImxlcnAgMTAsMTYsMlwiIDogMjJcclxuXHRcdFxyXG5cdFx0bWFwOiAgXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxICogKyAtIC9cclxuXHJcblx0XHRcdG1hcCA9ICh4LHgxLHgyLHkxLHkyKSAtPiAwXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIm1hcCA9ICh4LHgxLHgyLHkxLHkyKSAtPiB5MSArICh5Mi15MSkgKiAoeC14MSkvKHgyLXgxKVwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcIm1hcCAwLDEsMywyMCw0MFwiIDogMTBcclxuXHRcdFx0XHRcIm1hcCAxLDEsMywyMCw0MFwiIDogMjBcclxuXHRcdFx0XHRcIm1hcCAyLDEsMywyMCw0MFwiIDogMzBcclxuXHRcdFx0XHRcIm1hcCAzLDEsMywyMCw0MFwiIDogNDBcclxuXHRcdFx0XHRcIm1hcCA3NSw1MCwxMDAsMCwxXCIgOiAwLjVcclxuXHRcdFx0XHRcIm1hcCAxNiwwLDQwLDAsMjAwXCIgOiA4MFxyXG5cclxuXHRcdEhvdXIyRGVncmVlOiAgXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxIG1hcFxyXG5cclxuXHRcdFx0aDJkID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiaDJkID0gKHgpIC0+IG1hcCgxNS14LDAsMTIsMCwzNjApICUgMzYwXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwiaDJkIDBcIiA6IDkwXHJcblx0XHRcdFx0XCJoMmQgMVwiIDogNjBcclxuXHRcdFx0XHRcImgyZCAyXCIgOiAzMFxyXG5cdFx0XHRcdFwiaDJkIDNcIiA6IDBcclxuXHRcdFx0XHRcImgyZCA0XCIgOiAzMzBcclxuXHRcdFx0XHRcImgyZCA1XCIgOiAzMDBcclxuXHRcdFx0XHRcImgyZCA2XCIgOiAyNzBcclxuXHRcdFx0XHRcImgyZCA3XCIgOiAyNDBcclxuXHRcdFx0XHRcImgyZCA4XCIgOiAyMTBcclxuXHRcdFx0XHRcImgyZCA5XCIgOiAxODBcclxuXHRcdFx0XHRcImgyZCAxMFwiIDogMTUwXHJcblx0XHRcdFx0XCJoMmQgMTFcIiA6IDEyMFxyXG5cdFx0XHRcdFwiaDJkIDEyXCIgOiA5MFxyXG5cclxuXHRcdEhvdXIyUmFkaWFuOiAgXHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoxIG1hcFxyXG5cclxuXHRcdFx0aDJyID0gKHgpIC0+IDBcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiaDJyID0gKHgpIC0+IChtYXAgMTUteCwwLDEyLDAsMipNYXRoLlBJKSAlICgyKk1hdGguUEkpXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwiaDJyIDBcIiA6IDMqTWF0aC5QSS82XHJcblx0XHRcdFx0I1wiaDJyIDFcIiA6IDIqTWF0aC5QSS82ICBkZWNpbWFsIHByb2JsZW1cclxuXHRcdFx0XHQjXCJoMnIgMlwiIDogMSpNYXRoLlBJLzYgIGRlY2ltYWwgcHJvYmxlbVxyXG5cdFx0XHRcdFwiaDJyIDNcIiA6IDAqTWF0aC5QSS82XHJcblx0XHRcdFx0XCJoMnIgNFwiIDogMTEqTWF0aC5QSS82XHJcblx0XHRcdFx0XCJoMnIgNVwiIDogMTAqTWF0aC5QSS82XHJcblx0XHRcdFx0XCJoMnIgNlwiIDogOSpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciA3XCIgOiA4Kk1hdGguUEkvNlxyXG5cdFx0XHRcdCNcImgyciA4XCIgOiA3Kk1hdGguUEkvNiAgZGVjaW1hbCBwcm9ibGVtXHJcblx0XHRcdFx0XCJoMnIgOVwiIDogNipNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciAxMFwiIDogNSpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciAxMVwiIDogNCpNYXRoLlBJLzZcclxuXHRcdFx0XHRcImgyciAxMlwiIDogMypNYXRoLlBJLzZcclxuXHJcblx0XCJBNzogY2xhc3NcIiA6XHJcblxyXG5cdFx0S2lkIDpcclxuXHRcdFx0YiA6IFwiXCJcIlxyXG4jIExPQzo4IGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBAIFtdIGZvciBpbiBsZW5ndGggKyAvXHJcbiMgSW5uYW4gZHUgbMO2c2VyIGRlbm5hIHVwcGdpZnQ6IEJlIGF0dCBmw6Ugc2UgQm91bmNpbmcgQmFsbHMhXHJcblxyXG5jbGFzcyBLaWRcclxuXHRjb25zdHJ1Y3RvciA6IChuYW1lLGFnZSkgLT5cclxuXHJcbmdpcmxzID0gW25ldyBLaWQoJ1NhYnJpbmEnLDEyKSwgbmV3IEtpZCgnSGVsZW5lJywxMCksIG5ldyBLaWQoJ0FubmEnLDExKV1cclxuYm95cyA9IFtuZXcgS2lkKCdEYXZpZCcsMTApLCBuZXcgS2lkKCdIZW5yeScsMTEpLCBuZXcgS2lkKCdOb2VsJywxNCksIG5ldyBLaWQoJ051bWEnLDMpXVxyXG5uYW1lcyA9IChraWRzKSAtPiBbXVxyXG5hZ2VzID0gKGtpZHMpIC0+IFtdXHJcbnN1bSA9IChudW1iZXJzKSAtPiAwXHJcbmFudGFsID0gKG51bWJlcnMpIC0+IDBcclxuYXZlcmFnZSA9IChudW1iZXJzKSAtPiAwXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcblxyXG5jbGFzcyBLaWRcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSxAYWdlKSAtPlxyXG5cdFxyXG5naXJscyA9IFtuZXcgS2lkKCdTYWJyaW5hJywxMiksIG5ldyBLaWQoJ0hlbGVuZScsMTApLCBuZXcgS2lkKCdBbm5hJywxMSldXHJcbmJveXMgPSBbbmV3IEtpZCgnRGF2aWQnLDEwKSwgbmV3IEtpZCgnSGVucnknLDExKSwgbmV3IEtpZCgnTm9lbCcsMTQpLCBuZXcgS2lkKCdOdW1hJywzKV1cclxuXHJcbm5hbWVzID0gKGtpZHMpIC0+IGtpZC5uYW1lIGZvciBraWQgaW4ga2lkc1xyXG5cdFxyXG5hZ2VzID0gKGtpZHMpIC0+IGtpZC5hZ2UgZm9yIGtpZCBpbiBraWRzXHJcblxyXG5zdW0gPSAobnVtYmVycykgLT5cclxuXHRyZXMgPSAwXHJcblx0cmVzICs9IG4gZm9yIG4gaW4gbnVtYmVyc1xyXG5cdHJlc1xyXG5cclxuYW50YWwgPSAobnVtYmVycykgLT4gbnVtYmVycy5sZW5ndGggXHJcblx0XHJcbmF2ZXJhZ2UgPSAobnVtYmVycykgLT4gc3VtKG51bWJlcnMpIC8gYW50YWwobnVtYmVycylcclxuXCJcIlwiXHJcblxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwibmFtZXMgZ2lybHNcIiA6IFsnU2FicmluYScsICdIZWxlbmUnLCAnQW5uYSddXHJcblx0XHRcdFx0XCJuYW1lcyBib3lzXCIgOiBbJ0RhdmlkJywgJ0hlbnJ5JywgJ05vZWwnLCdOdW1hJ10gXHJcblx0XHRcdFx0XCJhZ2VzIGdpcmxzXCIgOiBbMTIsMTAsMTFdXHJcblx0XHRcdFx0XCJhZ2VzIGJveXNcIiA6IFsxMCwxMSwxNCwzXVxyXG5cdFx0XHRcdFwic3VtIGFnZXMgZ2lybHNcIiA6IDMzXHJcblx0XHRcdFx0XCJzdW0gYWdlcyBib3lzXCIgOiAzOFxyXG5cdFx0XHRcdFwiYW50YWwgZ2lybHNcIiA6IDNcclxuXHRcdFx0XHRcImFudGFsIGJveXNcIiA6IDRcclxuXHRcdFx0XHRcImF2ZXJhZ2UgYWdlcyBnaXJsc1wiIDogMTFcclxuXHRcdFx0XHRcImF2ZXJhZ2UgYWdlcyBib3lzXCIgOiA5LjVcclxuXHJcblx0XHRTaW1wbGV4IDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTQgY2xhc3MgY29uc3RydWN0b3IgbmV3IFtdIEBcdCsgLSAqXHJcbiMgVGlwczogU3BlbGEgcDVDb21wbGV4IGlubmFuIGR1IHDDpWLDtnJqYXIgZGVubmEgw7Z2bmluZy5cdFxyXG5cclxuY2xhc3MgU2ltcGxleFxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSkgLT5cclxuXHR0cmFuc2xhdGUgOiAtPiBAXHJcblx0c2NhbGUgOiAtPiBAXHJcblx0cm90YXRlIDogLT4gQFxyXG5cdG1pcnJvciA6IC0+IEBcclxuXHJcbmEgPSBuZXcgU2ltcGxleCAxLDNcclxuYiA9IG5ldyBTaW1wbGV4IC0yLDRcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmNsYXNzIFNpbXBsZXhcclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSkgLT5cclxuXHR0cmFuc2xhdGUgOiAtPiBcclxuXHRcdEB4ICs9IDFcclxuXHRcdEBcclxuXHRzY2FsZSA6IC0+IFxyXG5cdFx0W0B4LEB5XSA9IFsyKkB4LDIqQHldIFxyXG5cdFx0QFxyXG5cdHJvdGF0ZSA6IC0+IFxyXG5cdFx0W0B4LEB5XSA9IFstQHksQHhdXHJcblx0XHRAXHJcblx0bWlycm9yIDogLT5cclxuXHRcdFtAeCxAeV0gPSBbQHksQHhdXHJcblx0XHRAXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdFwicHAgYVwiIDogXCJ7eDoxLHk6M31cIlxyXG5cdFx0XHRcdFwicHAgYS50cmFuc2xhdGUoKVwiIDogXCJ7eDoyLHk6M31cIlxyXG5cdFx0XHRcdFwicHAgYS5zY2FsZSgpXCIgOiBcInt4OjIseTo2fVwiXHJcblx0XHRcdFx0XCJwcCBhLnJvdGF0ZSgpXCIgOiBcInt4Oi0zLHk6MX1cIlxyXG5cdFx0XHRcdFwicHAgYS5taXJyb3IoKVwiIDogXCJ7eDozLHk6MX1cIlxyXG5cdFx0XHRcdFwicHAgYS50cmFuc2xhdGUoKS5zY2FsZSgpXCIgOiBcInt4OjQseTo2fVwiXHJcblx0XHRcdFx0XCJwcCBhLnNjYWxlKCkudHJhbnNsYXRlKClcIiA6IFwie3g6Myx5OjZ9XCJcclxuXHRcdFx0XHRcInBwIGJcIiA6IFwie3g6LTIseTo0fVwiXHJcblx0XHRcdFx0XCJwcCBiLnRyYW5zbGF0ZSgpXCIgOiBcInt4Oi0xLHk6NH1cIlxyXG5cdFx0XHRcdFwicHAgYi5zY2FsZSgpXCIgOiBcInt4Oi00LHk6OH1cIlxyXG5cdFx0XHRcdFwicHAgYi5yb3RhdGUoKVwiIDogXCJ7eDotNCx5Oi0yfVwiXHJcblx0XHRcdFx0XCJwcCBiLm1pcnJvcigpXCIgOiBcInt4OjQseTotMn1cIlxyXG5cdFx0XHRcdFwicHAgYi50cmFuc2xhdGUoKS5zY2FsZSgpXCIgOiBcInt4Oi0yLHk6OH1cIlxyXG5cdFx0XHRcdFwicHAgYi5zY2FsZSgpLnRyYW5zbGF0ZSgpXCIgOiBcInt4Oi0zLHk6OH1cIlxyXG5cdFx0XHRcdFwicHAgYi5taXJyb3IoKS5taXJyb3IoKVwiIDogXCJ7eDotMix5OjR9XCJcclxuXHRcdFx0XHRcInBwIGIucm90YXRlKCkucm90YXRlKCkucm90YXRlKCkucm90YXRlKClcIiA6IFwie3g6LTIseTo0fVwiXHJcblxyXG5cdFx0QmlnbnVtIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MjIgY2xhc3MgY29uc3RydWN0b3IgbmV3IEAgcGFyc2VJbnQgcmV2ZXJzZSBsZW5ndGggcHVzaCBmbG9vciBzbGljZSB1bnNoaWZ0IGpvaW4gZm9yIGlmXHJcbiMgTWVkIEJpZ251bSBrYW4gbWFuIHLDpGtuYSBleGFrdCBtZWQgdGFsIG1lZCB0dXNlbnRhbHMgc2lmZm9yLlxyXG4jIER1IHByb2dyYW1tZXJhciBww6Ugc2FtbWEgc8OkdHQgc29tIG9tIGR1IHLDpGtuYXIgbWVkIHBhcHBlciBvY2ggcGVubmEuXHJcbiMgTXVsdGlwbGlrYXRpb25lbiBhbnbDpG5kZXIgc2lnIGF2IGFkZGl0aW9uZW4gc2FtdCBpbnNraWZ0YW5kZSBhdiBub2xsIGbDtnIgdmFyamUgc2lmZnJhLlxyXG5cclxuY2xhc3MgQmlnbnVtXHJcblx0Y29uc3RydWN0b3IgOiAocykgLT4gQGxpc3Q9W11cclxuXHR0b19zIDogKCkgLT4gXCJcIlxyXG5cdGFkZCA6IChvdGhlcikgLT4gQFxyXG5cdG11bCA6IChvdGhlcikgLT4gQFxyXG5cclxuYSA9IG5ldyBCaWdudW0gXCIxMjNcIlxyXG5iID0gbmV3IEJpZ251bSBcIjhcIlxyXG5jID0gbmV3IEJpZ251bSBcIjk5OVwiXHJcbmQgPSBuZXcgQmlnbnVtIFwiNDU2XCJcclxuZSA9IG5ldyBCaWdudW0gXCIxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiXHJcbmYgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmcgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmggPSBuZXcgQmlnbnVtIFwiMlwiXHJcblxyXG5nID0gZy5hZGQgZyBmb3IgaSBpbiByYW5nZSAxMDBcclxuaCA9IGgubXVsIGggZm9yIGkgaW4gcmFuZ2UgN1xyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuXHJcbiMgb2JzZXJ2ZXJhIGF0dCByZXZlcnNlKCkgdsOkbmRlciBQw4UgcGxhdHMuXHJcbiMgY2xvbmEgZMOkcmbDtnIgbWVkIHNsaWNlKCkgaSB0IGV4IHRvX3NcclxuI3JldmVyc2VyYSA9IChhcnIpIC0+IGFyci5zbGljZSgpLnJldmVyc2UoKSBcclxuXHJcbmNsYXNzIEJpZ251bVxyXG5cdGNvbnN0cnVjdG9yIDogKHMpIC0+XHJcblx0XHRAbGlzdCA9IChwYXJzZUludChjaCkgZm9yIGNoIGluIHMpXHJcblx0XHRAbGlzdC5yZXZlcnNlKClcclxuXHJcblx0dG9fcyA6ICgpIC0+IEBsaXN0LnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIilcclxuXHJcblx0YWRkIDogKG90aGVyKSAtPlxyXG5cdFx0aWYgQGxpc3QubGVuZ3RoIDwgb3RoZXIubGlzdC5sZW5ndGggdGhlbiByZXR1cm4gb3RoZXIuYWRkIEAgXHJcblx0XHRjYXJyeSA9IDBcclxuXHRcdHJlcyA9IG5ldyBCaWdudW0gXCJcIlxyXG5cdFx0Zm9yIGQxLCBwb3MgaW4gQGxpc3RcclxuXHRcdFx0ZCA9IGQxICsgKG90aGVyLmxpc3RbcG9zXSB8fCAwKSArIGNhcnJ5XHJcblx0XHRcdHJlcy5saXN0LnB1c2ggZCAlIDEwXHJcblx0XHRcdGNhcnJ5ID0gTWF0aC5mbG9vciBkIC8gMTBcclxuXHRcdGlmIGNhcnJ5IHRoZW4gcmVzLmxpc3QucHVzaCAxXHJcblx0XHRyZXNcclxuXHJcblx0bXVsIDogKG90aGVyKSAtPlxyXG5cdFx0cmVzID0gbmV3IEJpZ251bSBcIlwiXHJcblx0XHRmb3IgZGlnaXQsZCBpbiBvdGhlci5saXN0LnNsaWNlKCkucmV2ZXJzZSgpXHJcblx0XHRcdGZvciBpIGluIHJhbmdlIGRpZ2l0XHJcblx0XHRcdFx0cmVzID0gcmVzLmFkZCBAXHJcblx0XHRcdGlmIGQgPCBvdGhlci5saXN0Lmxlbmd0aC0xIHRoZW4gcmVzLmxpc3QudW5zaGlmdCAwXHJcblx0XHRyZXNcclxuXHRcclxuYSA9IG5ldyBCaWdudW0gXCIxMjNcIlxyXG5iID0gbmV3IEJpZ251bSBcIjhcIlxyXG5jID0gbmV3IEJpZ251bSBcIjk5OVwiXHJcbmQgPSBuZXcgQmlnbnVtIFwiNDU2XCJcclxuZSA9IG5ldyBCaWdudW0gXCIxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiXHJcbmYgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmcgPSBuZXcgQmlnbnVtIFwiMVwiXHJcbmggPSBuZXcgQmlnbnVtIFwiMlwiXHJcblxyXG5nID0gZy5hZGQgZyBmb3IgaSBpbiByYW5nZSAxMDBcclxuaCA9IGgubXVsIGggZm9yIGkgaW4gcmFuZ2UgN1xyXG5cdFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcInBhcnNlSW50ICcxJ1wiIDogMVxyXG5cdFx0XHRcdFwiWzEsMiwzXS5yZXZlcnNlKClcIiA6IFszLDIsMV1cclxuXHRcdFx0XHRcIlsxLDIsM10ubGVuZ3RoXCIgOiAzXHJcblx0XHRcdFx0XCJNYXRoLmZsb29yIDMuMTRcIiA6IDNcclxuXHRcdFx0XHRcIlsxMSwyMiwzM10uc2xpY2UoMSlcIiA6IFsyMiwzM11cclxuXHRcdFx0XHRcIlsxMSwyMiwzM10uc2xpY2UoMSwyKVwiIDogWzIyXVxyXG5cdFx0XHRcdFwiWzExLDIyLDMzXS5zbGljZSgpXCIgOiBbMTEsMjIsMzNdXHJcblx0XHRcdFx0XCIxMjM0NTY3ODkwMTIzNDU2Nzg5MCArIDFcIiA6IDEyMzQ1Njc4OTAxMjM0NTY3MDAwXHJcblx0XHRcdFx0XCJhLmxpc3RcIiA6IFszLDIsMV1cclxuXHRcdFx0XHRcImEudG9fcygpXCIgOiBcIjEyM1wiXHJcblx0XHRcdFx0XCJhLmFkZChiKS50b19zKClcIiA6IFwiMTMxXCJcclxuXHRcdFx0XHRcImIuYWRkKGEpLnRvX3MoKVwiIDogXCIxMzFcIlxyXG5cdFx0XHRcdFwiYS5hZGQoYykudG9fcygpXCIgOiBcIjExMjJcIlxyXG5cdFx0XHRcdFwiYS5hZGQoYikuYWRkKGMpLnRvX3MoKVwiIDogXCIxMTMwXCJcclxuXHRcdFx0XHRcImUuYWRkKGYpLnRvX3MoKVwiIDogXCIxMjM0NTY3ODkwMTIzNDU2Nzg5MVwiIFxyXG5cdFx0XHRcdFwiZy50b19zKClcIiA6IFwiMTI2NzY1MDYwMDIyODIyOTQwMTQ5NjcwMzIwNTM3NlwiXHJcblx0XHRcdFx0XCJhLm11bChiKS50b19zKClcIiA6XCI5ODRcIlxyXG5cdFx0XHRcdFwiYS5tdWwoYykudG9fcygpXCIgOiBcIjEyMjg3N1wiXHJcblx0XHRcdFx0XCJhLm11bChkKS50b19zKClcIiA6IFwiNTYwODhcIlxyXG5cdFx0XHRcdFwiaC50b19zKClcIiA6XCIzNDAyODIzNjY5MjA5Mzg0NjM0NjMzNzQ2MDc0MzE3NjgyMTE0NTZcIlx0XHRcdFxyXG5cclxuXHRcdENvbXBsZXg6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MzEgY2xhc3MgY29uc3RydWN0b3IgbmV3IEAgLT4gaWYgKyAqID09ID4gPCBcclxuIyBCw7ZyamEgbWVkIGF0dCBmw6UgYm9ydCBvbsO2ZGlnYSBub2xsb3Igb2NoIGV0dG9yIGkgdG9fcyFcclxuXHJcbmNsYXNzIENvbXBsZXhcclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSkgLT5cclxuXHR0b19zIDogLT4gQHggKyBcIiBcIiArIEB5ICsgXCJpXCJcclxuXHRhZGQgOiAob3RoZXIpIC0+IEBcclxuXHRtdWwgOiAob3RoZXIpIC0+IEBcclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jbGFzcyBDb21wbGV4XHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHkpIC0+XHJcblx0YWRkIDogKG90aGVyKSAtPlxyXG5cdFx0bmV3IENvbXBsZXggQHgrb3RoZXIueCwgQHkrb3RoZXIueVxyXG5cdG11bCA6IChvdGhlcikgLT5cclxuXHRcdGEgPSBAeFxyXG5cdFx0YiA9IEB5XHJcblx0XHRjID0gb3RoZXIueFxyXG5cdFx0ZCA9IG90aGVyLnlcclxuXHRcdG5ldyBDb21wbGV4IGEqYy1iKmQsIGIqYythKmRcclxuXHR0b19zIDogLT5cclxuXHRcdHN4ID0gXCJcIiBpZiBAeCA9PSAwXHJcblx0XHRzeCA9IFwiI3tAeH1cIiBpZiBAeCA+IDBcclxuXHRcdHN4ID0gXCIje0B4fVwiIGlmIEB4IDwgMFxyXG5cclxuXHRcdHN5ID0gXCJcIiBpZiBAeSA9PSAwXHJcblx0XHRzeSA9IFwiLWlcIiBpZiBAeSA9PSAtMVxyXG5cdFx0c3kgPSBcImlcIiBpZiBAeSA9PSAxXHJcblx0XHRzeSA9IFwiI3tAeX1pXCIgaWYgQHkgPiAxXHJcblx0XHRzeSA9IFwiI3tAeX1pXCIgaWYgQHkgPCAtMVxyXG5cclxuXHRcdGlmIHN4IT1cIlwiIGFuZCBzeSE9XCJcIlxyXG5cdFx0XHRpZiBAeSA8IDBcclxuXHRcdFx0XHRzID0gc3grc3lcclxuXHRcdFx0ZWxzZSBpZiBAeT09MFxyXG5cdFx0XHRcdHMgPSBzeFxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cyA9IHN4ICsgXCIrXCIgKyBzeVxyXG5cdFx0ZWxzZSBpZiBAeD09MCBhbmQgQHk9PTBcclxuXHRcdFx0cyA9IFwiMFwiXHJcblx0XHRlbHNlIFxyXG5cdFx0XHRzID0gc3ggKyBzeVxyXG5cdFx0c1xyXG5cdFx0XHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoLTEsMCkudG9fcygpXCIgOlwiLTFcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoLTEsLTEpLnRvX3MoKVwiIDogXCItMS1pXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDAsLTEpLnRvX3MoKVwiIDogXCItaVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgwLDApLnRvX3MoKVwiIDogXCIwXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDAsMSkudG9fcygpXCIgOiBcImlcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMSwtMikudG9fcygpXCIgOiBcIjEtMmlcIlxyXG5cdFx0XHRcdFwibmV3IENvbXBsZXgoMSwtMSkudG9fcygpXCIgOiBcIjEtaVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDApLnRvX3MoKVwiIDogXCIxXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDEsMSkudG9fcygpXCIgOiBcIjEraVwiXHJcblx0XHRcdFx0XCJuZXcgQ29tcGxleCgxLDIpLnRvX3MoKVwiIDogXCIxKzJpXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDEsMikuYWRkKG5ldyBDb21wbGV4KDEsLTEpKS50b19zKClcIiA6IFwiMitpXCJcclxuXHRcdFx0XHRcIm5ldyBDb21wbGV4KDEsMikubXVsKG5ldyBDb21wbGV4KDEsLTEpKS50b19zKClcIiA6IFwiMytpXCJcclxuXHJcblx0XHRQb2tlckhhbmQgOlxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6NDEgY2xhc3MgY29uc3RydWN0b3IgbmV3IF8uc29ydEJ5IF8uZmxhdHRlbiBfLmlzRXF1YWwgXy53aXRob3V0ICBcclxuIyAgICAgICAgc3BsaXQgZm9yIGluIHJhbmdlIGluZGV4T2YgcHVzaCB1bnNoaWZ0IHJldmVyc2UgYW5kIG5vdCBpZiB0aGVuIGtleXMgbGVuZ3RoXHJcblxyXG4jIGh0dHBzOi8vc3Yud2lraXBlZGlhLm9yZy93aWtpL1Bva2VyaGFuZFxyXG5cclxuIyA5XHRGw6RyZ3N0ZWdlIChzdHJhaWdodCBmbHVzaClcclxuIyA4XHRGeXJ0YWwgKGZvdXIgb2YgYSBraW5kKVxyXG4jIDdcdEvDpWsgKGZ1bGwgaG91c2UpXHJcbiMgNlx0RsOkcmcgKGZsdXNoKVxyXG4jIDVcdFN0ZWdlIChzdHJhaWdodClcclxuIyA0XHRUcmlzcyAodGhyZWUgb2YgYSBraW5kKVxyXG4jIDNcdFR2w6UgcGFyICh0d28gcGFpcnMpXHJcbiMgMlx0UGFyIChwYWlyKVxyXG4jIDFcdEjDtmd0IGtvcnQgKGhpZ2ggY2FyZClcclxuXHJcbiMgSW5nZW4gZsOkcmcgw6RyIGLDpHR0cmUgw6RuIG7DpWdvbiBhbm5hbiBmw6RyZy4gVmlzc2EgaMOkbmRlciDDpHIgdsOkcmRhIGxpa2EgbXlja2V0LlxyXG5cclxuY2xhc3MgSGFuZFxyXG5cdGNvbnN0cnVjdG9yIDogKHMpIC0+IEBzZXBhcmF0b3IgPSBbXVxyXG5cdGNvbXBhcmUgOiAob3RoZXIpIC0+IC0yXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmNsYXNzIEhhbmRcclxuXHRjb25zdHJ1Y3RvciA6IChzKSAtPlxyXG5cdFx0QGNvbG9yY291bnQgPSB7fSBcclxuXHRcdEB2YWx1ZWNvdW50ID0gWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXVxyXG5cdFx0QHZhbHVlID0gW11cclxuXHRcdEBzZXBhcmF0b3IgPSBbXVxyXG5cdFx0Zm9yIGNhcmQgaW4gcy5zcGxpdCBcIiBcIlxyXG5cdFx0XHRAY29sb3Jjb3VudFtjYXJkWzAuLjFdXSA9IHRydWVcclxuXHRcdFx0aVZhbHVlID0gXCIgIDIzNDU2Nzg5VEpRS0FcIi5pbmRleE9mIGNhcmRbMl1cclxuXHRcdFx0QHZhbHVlY291bnRbaVZhbHVlXSArPSAxXHRcclxuXHRcdFx0QHZhbHVlLnB1c2ggaVZhbHVlXHRcclxuXHRcdGZvciB2LGkgaW4gQHZhbHVlY291bnQgXHJcblx0XHRcdGlmIHYgPiAwIHRoZW4gQHNlcGFyYXRvci5wdXNoIFt2LGldXHJcblx0XHRAdmFsdWVjb3VudCA9IEBzb3J0ZXJhIF8ud2l0aG91dCBAdmFsdWVjb3VudCwgMCBcclxuXHRcdEB2YWx1ZSA9IEBzb3J0ZXJhIEB2YWx1ZVxyXG5cdFx0QHNlcGFyYXRvciA9IF8uc29ydEJ5IEBzZXBhcmF0b3IsIChsaXN0KSAtPiAtMTAwMCpsaXN0WzBdLWxpc3RbMV0gIyBwZ2EgYXR0IGpzIHNvcnRlcmFyIGxpc3RvciBhbGZhYmV0aXNrdC4gdCBleCBbMTFdIDwgWzJdLlxyXG5cdFx0QHNlcGFyYXRvciA9IF8uZmxhdHRlbiBAc2VwYXJhdG9yXHJcblxyXG5cdFx0IyBTcGVjaWFsYmVoYW5kbGluZyBhdiBBNTQzMiBlZnRlcnNvbSBlc3NldCByw6RrbmFzIHNvbSAxNC5cclxuXHRcdGlmIF8uaXNFcXVhbCBAc2VwYXJhdG9yLFsxLCAxNCwgMSwgNSwgMSwgNCwgMSwgMywgMSwgIDJdXHJcblx0XHRcdEBzZXBhcmF0b3IgPSAgICAgICAgICBbMSwgIDUsIDEsIDQsIDEsIDMsIDEsIDIsIDEsIDE0XVxyXG5cdFx0QHNlcGFyYXRvci51bnNoaWZ0IEBjYWxjKClcclxuXHJcblx0Y29tcGFyZSA6IChvdGhlcikgLT4gXHJcblx0XHRmb3IgaSBpbiByYW5nZSBAc2VwYXJhdG9yLmxlbmd0aFxyXG5cdFx0XHRpZiBAc2VwYXJhdG9yW2ldID4gb3RoZXIuc2VwYXJhdG9yW2ldIHRoZW4gcmV0dXJuIC0xXHJcblx0XHRcdGlmIEBzZXBhcmF0b3JbaV0gPCBvdGhlci5zZXBhcmF0b3JbaV0gdGhlbiByZXR1cm4gMVxyXG5cdFx0MFx0XHJcblxyXG5cdGNhbGMgOiAtPlxyXG5cdFx0aWYgQHN0ZWdlKCkgYW5kIEBmbHVzaCgpIHRoZW4gcmV0dXJuIDlcclxuXHRcdGlmIF8uaXNFcXVhbChAdmFsdWVjb3VudCxbMSw0XSkgdGhlbiByZXR1cm4gOFxyXG5cdFx0aWYgXy5pc0VxdWFsKEB2YWx1ZWNvdW50LFsyLDNdKSB0aGVuIHJldHVybiA3XHJcblx0XHRpZiBAZmx1c2goKSB0aGVuIHJldHVybiA2XHJcblx0XHRpZiBAc3RlZ2UoKSB0aGVuIHJldHVybiA1XHJcblx0XHRpZiBfLmlzRXF1YWwoQHZhbHVlY291bnQsWzEsMSwzXSkgdGhlbiByZXR1cm4gNFxyXG5cdFx0aWYgXy5pc0VxdWFsKEB2YWx1ZWNvdW50LFsxLDIsMl0pIHRoZW4gcmV0dXJuIDNcclxuXHRcdGlmIF8uaXNFcXVhbChAdmFsdWVjb3VudCxbMSwxLDEsMl0pIHRoZW4gcmV0dXJuIDJcclxuXHRcdDFcclxuXHJcblx0c29ydGVyYSA6IChhcnIpIC0+IF8uc29ydEJ5IGFyciBcclxuXHRmbHVzaCA6IC0+IE9iamVjdC5rZXlzKEBjb2xvcmNvdW50KS5sZW5ndGg9PTFcclxuXHRzdGVnZSA6IC0+XHJcblx0XHRpZiBub3QgXy5pc0VxdWFsKEB2YWx1ZWNvdW50LCBbMSwxLDEsMSwxXSkgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdGlmIEB2YWx1ZVswXSArIDQgPT0gQHZhbHVlWzRdIHRoZW4gcmV0dXJuIHRydWVcclxuXHRcdF8uaXNFcXVhbCBAdmFsdWUsIFsyLDMsNCw1LDE0XVxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0J1sxLDIsM10gPT0gWzEsMiwzXScgOiBmYWxzZVxyXG5cdFx0XHRcdCdfLmlzRXF1YWwgWzEsMiwzXSwgWzEsMiwzXScgOiB0cnVlXHJcblx0XHRcdFx0J18uaXNFcXVhbCBbMSwyLDNdLCBbMSwyLDRdJyA6IGZhbHNlXHJcblx0XHRcdFx0J18uZmxhdHRlbiBbMSxbMiwxXSwzXScgOiBbMSwyLDEsM11cclxuXHRcdFx0XHQnXy53aXRob3V0IFsxLDIsMSwzXSwgMScgOiBbMiwzXVxyXG5cdFx0XHRcdCdfLnNvcnRCeSBbXCJwZXJcIiwgXCJhbm5hXCIsIFwiYm9cIl0nIDogW1wiYW5uYVwiLFwiYm9cIixcInBlclwiXVxyXG5cdFx0XHRcdCdfLnNvcnRCeSBbXCJwZXJcIiwgXCJhbm5hXCIsIFwiYm9cIl0sICh3KSAtPiB3Lmxlbmd0aCcgOiBbXCJib1wiLFwicGVyXCIsXCJhbm5hXCJdXHJcblxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJzcEEgc3AyIHNwMyBzcDQgc3A1XCIpLnNlcGFyYXRvcic6IFs5LDEsNSwxLDQsMSwzLDEsMiwxLDE0XSBcclxuXHRcdFx0XHQnKG5ldyBIYW5kIFwicnU3IHNwNyBoajcga2w3IHNwSlwiKS5zZXBhcmF0b3InOiBbOCw0LDcsMSwxMV1cclxuXHRcdFx0XHQnKG5ldyBIYW5kIFwicnU4IHNwOCBoajgga2w5IHNwOVwiKS5zZXBhcmF0b3InOiBbNywzLDgsMiw5XVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJydTcgcnUzIHJ1NSBydTkgcnVLXCIpLnNlcGFyYXRvcic6IFs2LDEsMTMsMSw5LDEsNywxLDUsMSwzXVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJydTcgaGo4IHJ1OSBoajUgcnU2XCIpLnNlcGFyYXRvcic6IFs1LDEsOSwxLDgsMSw3LDEsNiwxLDVdXHJcblx0XHRcdFx0JyhuZXcgSGFuZCBcInJ1NyBoajggcnU4IGtsOCBydUpcIikuc2VwYXJhdG9yJzogWzQsMyw4LDEsMTEsMSw3XVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJydTcgaGo3IHJ1OCBrbDggcnVKXCIpLnNlcGFyYXRvcic6IFszLDIsOCwyLDcsMSwxMV1cclxuXHRcdFx0XHQnKG5ldyBIYW5kIFwic3A3IGhqMyBydTMga2w0IHNwQVwiKS5zZXBhcmF0b3InOiBbMiwyLDMsMSwxNCwxLDcsMSw0XVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJzcDcgaGozIHJ1MiBrbDQgc3BBXCIpLnNlcGFyYXRvcic6IFsxLDEsMTQsMSw3LDEsNCwxLDMsMSwyXVxyXG5cclxuXHRcdFx0XHQnKG5ldyBIYW5kIFwic3BBIHNwMiBzcDMgc3A0IHNwNVwiKS5jb21wYXJlIG5ldyBIYW5kIFwicnVBIHJ1MiBydTMgcnU0IHJ1NVwiJzogMFxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJydTcgc3A3IGhqNyBrbDcgc3BKXCIpLmNvbXBhcmUgbmV3IEhhbmQgXCJydTYgc3A1IGhqNiBrbDYgc3BRXCInOiAtMVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJydTggc3A4IGhqOCBrbDkgc3A5XCIpLmNvbXBhcmUgbmV3IEhhbmQgXCJydTYgc3A2IGhqNiBydTkgaGo5XCInOiAtMVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJydTcgcnUzIHJ1NSBydTkgcnVLXCIpLmNvbXBhcmUgbmV3IEhhbmQgXCJoajcgaGozIGhqNSBoajkgaGpLXCInOiAwXHJcblx0XHRcdFx0JyhuZXcgSGFuZCBcInJ1NyBoajggcnU5IGhqNSBydTZcIikuY29tcGFyZSBuZXcgSGFuZCBcImhqNyBydTgga2w5IGhqVCBzcDZcIic6IDFcclxuXHRcdFx0XHQnKG5ldyBIYW5kIFwicnU3IGhqOCBydTgga2w4IHJ1SlwiKS5jb21wYXJlIG5ldyBIYW5kIFwia2w3IGhqOSBydTkga2w5IHJ1UVwiJzogMVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJydTcgaGo3IHJ1OCBrbDggcnVKXCIpLmNvbXBhcmUgbmV3IEhhbmQgXCJzcDcga2w3IHNwOCBoajggcnVUXCInOiAtMVxyXG5cdFx0XHRcdCcobmV3IEhhbmQgXCJoajcga2wzIHNwMyBrbDQgaGpBXCIpLmNvbXBhcmUgbmV3IEhhbmQgXCJzcDcgaGozIHJ1MyBrbEsgc3BBXCInOiAxXHJcblx0XHRcdFx0JyhuZXcgSGFuZCBcInNwNyBoajMgcnUyIGtsNCBzcEFcIikuY29tcGFyZSBuZXcgSGFuZCBcImhqNyBydTMgcnU1IHNwNCBoakFcIic6IDFcclxuXHJcblx0XHRQb2x5bm9tIDpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjUyIGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBbXSBAIG9yIGZvciBpbiByYW5nZSBsZW5ndGggKiogcHVzaCByZXZlcnNlIGpvaW4gI3t9XHJcbiMgVXBwZ2lmdGVuIGlubmVow6VsbGVyIG1hdGVtYXRpayBww6UgZ3ltbmFzaWVuaXbDpS5cclxuXHJcbmNsYXNzIFBvbHlub21cclxuXHRjb25zdHJ1Y3RvciA6IChsc3QpIC0+IEBsc3Q9W11cclxuXHR0b19zIDogLT4gXCJcIlxyXG5cdGFkZCA6IChvdGhlcikgLT4gQFxyXG5cdG11bCA6IChvdGhlcikgLT4gQFxyXG5cdHBvd2VyIDogKG4pIC0+IEBcclxuXHR2YWx1ZSA6ICh4KSAtPiAwXHJcblx0ZGlmZiA6IC0+IEBcclxuXHRpbnRlZyA6IC0+IEBcclxuXHRjb21wb3NlIDogKG90aGVyKVx0LT4gQFxyXG5cclxuYSA9IG5ldyBQb2x5bm9tIFs1LDQsM11cclxuYiA9IG5ldyBQb2x5bm9tIFs0LDNdXHJcbmMgPSBuZXcgUG9seW5vbSBbMCwwLDFdXHJcbmQgPSBuZXcgUG9seW5vbSBbMywyXVxyXG5lID0gbmV3IFBvbHlub20gWzUsMCwtMV1cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jbGFzcyBQb2x5bm9tXHJcblx0Y29uc3RydWN0b3IgOiAoQGxzdCkgLT5cclxuXHJcblx0YWRkIDogKG90aGVyKSAtPlxyXG5cdFx0aCA9IFtdXHJcblx0XHRoW2ldID0gKGhbaV0gb3IgMCkgKyB2YWx1ZSBmb3IgdmFsdWUsaSBpbiBAbHN0XHJcblx0XHRoW2ldID0gKGhbaV0gb3IgMCkgKyB2YWx1ZSBmb3IgdmFsdWUsaSBpbiBvdGhlci5sc3RcclxuXHRcdG5ldyBQb2x5bm9tIGhcclxuXHJcblx0bXVsIDogKG90aGVyKSAtPlxyXG5cdFx0aCA9ICgwIGZvciBpIGluIHJhbmdlIEBsc3QubGVuZ3RoICsgb3RoZXIubHN0Lmxlbmd0aCAtIDEpXHJcblx0XHRmb3IgdmFsdWUxLGkxIGluIEBsc3RcclxuXHRcdFx0Zm9yIHZhbHVlMixpMiBpbiBvdGhlci5sc3RcclxuXHRcdFx0XHRpID0gaTEraTJcclxuXHRcdFx0XHRoW2ldID0gKGhbaV0gb3IgMCkgKyB2YWx1ZTEgKiB2YWx1ZTJcclxuXHRcdG5ldyBQb2x5bm9tIGhcclxuXHJcblx0cG93ZXIgOiAobikgLT5cclxuXHRcdHJlcyA9IG5ldyBQb2x5bm9tIFsxXVxyXG5cdFx0cmVzID0gcmVzLm11bCBAIGZvciBpIGluIHJhbmdlIG5cclxuXHRcdHJlc1xyXG5cclxuXHRjb21wb3NlIDogKG90aGVyKVx0LT5cclxuXHRcdHJlcyA9IG5ldyBQb2x5bm9tIFtdXHJcblx0XHRmb3IgdmFsdWUsaSBpbiBAbHN0XHJcblx0XHRcdHJlcyA9IHJlcy5hZGQgKG5ldyBQb2x5bm9tIFt2YWx1ZV0pLm11bCBvdGhlci5wb3dlciBpXHJcblx0XHRyZXNcclxuXHJcblx0dmFsdWUgOiAoeCkgLT5cclxuXHRcdHJlcyA9IDBcclxuXHRcdHJlcyArPSB2YWx1ZSAqIHggKiogaSBmb3IgdmFsdWUsaSBpbiBAbHN0XHJcblx0XHRyZXNcclxuXHJcblx0ZGlmZiA6IC0+XHJcblx0XHRsc3QgPSBbXVxyXG5cdFx0Zm9yIHZhbHVlLGkgaW4gQGxzdFxyXG5cdFx0XHRpZiBpICE9IDAgdGhlbiBsc3RbaS0xXSA9IGkqdmFsdWVcclxuXHRcdG5ldyBQb2x5bm9tIGxzdFxyXG5cclxuXHRpbnRlZyA6IC0+XHJcblx0XHRsc3QgPSBbMF1cclxuXHRcdGZvciB2YWx1ZSxpIGluIEBsc3RcclxuXHRcdFx0aSArPSAxXHJcblx0XHRcdGxzdFtpXSA9IHZhbHVlL2lcclxuXHRcdG5ldyBQb2x5bm9tIGxzdFxyXG5cclxuXHR0b19zIDogLT5cclxuXHRcdGFyciA9IFtdXHJcblx0XHRmb3IgaXRlbSxpIGluIEBsc3RcclxuXHRcdFx0aWYgaXRlbSA9PSAwIHRoZW4gY29udGludWVcclxuXHRcdFx0aWYgaXRlbSA9PSAxIFxyXG5cdFx0XHRcdGlmIGk9PTAgdGhlbiBhcnIucHVzaCBcIjFcIlxyXG5cdFx0XHRcdGVsc2UgaWYgaT09MSB0aGVuIGFyci5wdXNoIFwieFwiXHJcblx0XHRcdFx0ZWxzZSBhcnIucHVzaCBcInheXCIgKyBpXHJcblx0XHRcdGVsc2VcdFx0XHRcdFxyXG5cdFx0XHRcdGlmIGk9PTAgdGhlbiBhcnIucHVzaCBpdGVtXHJcblx0XHRcdFx0ZWxzZSBpZiBpPT0xIHRoZW4gYXJyLnB1c2ggaXRlbSArIFwiKnhcIlxyXG5cdFx0XHRcdGVsc2UgYXJyLnB1c2ggaXRlbSArIFwiKnheXCIgKyBpXHJcblx0XHRhcnIucmV2ZXJzZSgpXHJcblx0XHRhcnIuam9pbiBcIitcIlxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcImEubHN0XCIgOiBbNSw0LDNdXHJcblx0XHRcdFx0XCJiLmxzdFwiIDogWzQsM11cclxuXHRcdFx0XHRcImEudG9fcygpXCIgOiBcIjMqeF4yKzQqeCs1XCJcclxuXHRcdFx0XHRcImMudG9fcygpXCIgOiBcInheMlwiXHJcblx0XHRcdFx0XCJhLmFkZChiKS50b19zKClcIiA6IFwiMyp4XjIrNyp4KzlcIlxyXG5cdFx0XHRcdFwiYS5tdWwoYikudG9fcygpXCIgOiBcIjkqeF4zKzI0KnheMiszMSp4KzIwXCJcclxuXHRcdFx0XHRcImEudmFsdWUoMilcIiA6IDI1XHJcblx0XHRcdFx0XCJhLnBvd2VyKDIpLmxzdFwiIDogWzI1LDQwLDQ2LDI0LDldXHJcblx0XHRcdFx0XCJiLnBvd2VyKDMpLmxzdFwiIDogWzY0LDE0NCwxMDgsMjddIFxyXG5cdFx0XHRcdFwiYS5kaWZmKCkubHN0XCIgOiBbNCw2XVxyXG5cdFx0XHRcdFwiYS5pbnRlZygpLmxzdFwiIDogWzAsNSwyLDFdXHJcblx0XHRcdFx0XCJjLmludGVnKCkudG9fcygpXCIgOiBcIjAuMzMzMzMzMzMzMzMzMzMzMyp4XjNcIlxyXG5cdFx0XHRcdFwiYy5pbnRlZygpLnZhbHVlKDMpXCIgOiA5XHJcblx0XHRcdFx0XCJkLmNvbXBvc2UoZCkubHN0XCIgOiBbOSw0XSBcclxuXHRcdFx0XHRcImQuY29tcG9zZShlKS5sc3RcIiA6IFsxMywwLC0yXSBcclxuXHRcdFx0XHRcImUuY29tcG9zZShkKS5sc3RcIiA6IFstNCwtMTIsLTRdXHJcblx0XHRcdFx0XCJlLmNvbXBvc2UoZSkubHN0XCIgOiBbLTIwLDAsMTAsMCwtMV1cclxuXHJcblxyXG5cdFwiQTg6IEFkdmFuY2VkXCIgOlxyXG5cclxuXHRcdHBhdGg6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBjb25jYXQgaWYgdGhlbiBlbHNlXHJcblxyXG50cmVlID0gezM6MCwgNDo4LCA1OjMsIDY6MywgMTA6NSwgNzo1LCAxMjo2LCA4OjYsIDIwOjEwLCA5OjcsIDI0OjEyLCAxNDoxMn1cclxuXHJcbnBhdGggPSAodHJlZSx4KSAtPiBbXVxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnBhdGggPSAodHJlZSx4KSAtPiBpZiB4PT0wIHRoZW4gcmV0dXJuIFtdIGVsc2UgW3hdLmNvbmNhdCBwYXRoIHRyZWUsdHJlZVt4XVxyXG5cIlwiXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwicGF0aCB0cmVlLCA0XCIgOiBbNCw4LDYsM11cclxuXHRcdFx0XHRcInBhdGggdHJlZSwgMjBcIiA6IFsyMCwxMCw1LDNdXHJcblx0XHRcdFx0XCJwYXRoIHRyZWUsIDlcIiA6IFs5LDcsNSwzXVxyXG5cclxuXHRcdHN1bW1hOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjQgXy5pc0VxdWFsIF8uaXNOdW1iZXIgXy5oZWFkIF8udGFpbFxyXG5cclxuc3VtbWEgPSAodHJlZSkgLT4gMFxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnN1bW1hID0gKHRyZWUpIC0+IFxyXG5cdHJldHVybiAwIGlmIF8uaXNFcXVhbCB0cmVlLFtdXHJcblx0cmV0dXJuIHRyZWUgaWYgXy5pc051bWJlciB0cmVlIFxyXG5cdHN1bW1hKF8uaGVhZCB0cmVlKSArIHN1bW1hIF8udGFpbCB0cmVlIFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRcIl8uaXNOdW1iZXIgJzEyJ1wiIDogZmFsc2UgXHJcblx0XHRcdFx0XCJfLmlzTnVtYmVyIDEyXCIgOiB0cnVlIFxyXG5cdFx0XHRcdFwiXy5pc051bWJlciBbMTJdXCIgOiBmYWxzZSBcclxuXHRcdFx0XHRcIl8uaGVhZCBbMTEsMjIsMzNdXCIgOiAxMVxyXG5cdFx0XHRcdFwiXy50YWlsIFsxMSwyMiwzM11cIiA6IFsyMiwzM11cclxuXHJcblx0XHRcdFx0XCJzdW1tYSBbMSwyLDMsNF1cIiA6IDEwXHJcblx0XHRcdFx0XCJzdW1tYSBbMywgWzUsNl0sIFs3LDgsMTAsMTJdLCBbNCw5LDE0LFsyMCwyNF1dLCBbWzEyLDEzXSwxNF1dXCIgOiAxNjFcclxuXHJcblx0XHRcImxpc3QgcmVjdXJzaW9uXCIgOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzo3IHR5cGVvZiBpZiB0aGVuIGVsc2UgZm9yIGluIHJhbmdlIG1pbiBsZW5ndGhcclxuIyBMw6RnZyBtw6Rya2UgdGlsbCBqYXZhc2NyaXB0cyBmZWxha3RpZ2EgaGFudGVyaW5nIGF2IHRhbCB2aWQgasOkbWbDtnJlbHNlIGF2IGxpc3Rvci5cclxuXHJcbmNvbXBhcmUgPSAoYSxiKSAtPiAtMlxyXG5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmNvbXBhcmUgPSAoYSxiKSAtPlxyXG5cdGlmIHR5cGVvZiBhICE9IFwib2JqZWN0XCIgXHJcblx0XHRpZiBhID4gYiB0aGVuIHJldHVybiAtMSBlbHNlIGlmIGEgPCBiIHRoZW4gcmV0dXJuIDEgZWxzZSByZXR1cm4gMFxyXG5cdGZvciBpIGluIHJhbmdlIG1pbiBhLmxlbmd0aCxiLmxlbmd0aFxyXG5cdFx0YyA9IGNvbXBhcmUgYVtpXSxiW2ldXHJcblx0XHRpZiBjICE9IDAgdGhlbiByZXR1cm4gY1xyXG5cdDBcclxuXCJcIlwiXHJcblx0XHRcdGM6XHRcclxuXHRcdFx0XHRcInR5cGVvZiAxXCIgOiBcIm51bWJlclwiXHJcblx0XHRcdFx0XCJ0eXBlb2YgMy4xNFwiIDogXCJudW1iZXJcIlxyXG5cdFx0XHRcdCd0eXBlb2YgXCJcIicgOiBcInN0cmluZ1wiXHJcblx0XHRcdFx0XCJ0eXBlb2YgW11cIiA6IFwib2JqZWN0XCJcclxuXHRcdFx0XHRcInR5cGVvZiB7fVwiIDogXCJvYmplY3RcIlxyXG5cdFx0XHRcdFwibWluIDEsMlwiIDogMVxyXG5cdFx0XHRcdFwibWluIDIsMVwiIDogMVxyXG5cdFx0XHRcdFwiMTEgPiAyXCIgOiB0cnVlXHRcdFxyXG5cdFx0XHRcdFwiWzExXSA+IFsyXVwiIDogZmFsc2UgXHJcblx0XHRcdFx0XCJbMTFdID4gWzEwXVwiIDogdHJ1ZVxyXG5cdFx0XHRcdFwiMTEgPT0gMTFcIiA6IHRydWUgXHJcblx0XHRcdFx0J1wiMTFcIiA9PSBcIjExXCInIDogdHJ1ZSBcclxuXHRcdFx0XHRcIlsxMV0gPT0gWzExXVwiIDogZmFsc2UgXHJcblx0XHRcdFx0XCJjb21wYXJlIDExLCAyXCIgOiAtMVxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMTFdLCBbMl1cIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxMV0sIFsxMF1cIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxMV0sIFsxMV1cIiA6IDBcclxuXHRcdFx0XHRcImNvbXBhcmUgWzJdLCBbMTFdXCIgOiAxXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxLFsyLDNdXSwgWzEsWzIsM11dXCIgOiAwXHJcblx0XHRcdFx0XCJjb21wYXJlIFsxMCxbMiwzXV0sIFsxLFsyLDNdXVwiIDogLTFcclxuXHRcdFx0XHRcImNvbXBhcmUgWzEsWzIwLDNdXSwgWzEsWzIsM11dXCIgOiAtMVxyXG5cdFx0XHRcdFwiY29tcGFyZSBbMSxbMiwzMF1dLCBbMSxbMiwzXV1cIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFszLCBbNSw2XSwgWzcsOCwxMCwxMl0sIFs0LDksMTQsWzIwLDI0XV0sIFtbMTIsMTNdLDE0XV0sIFszLCBbNSw2XSwgWzcsOCwxMCwxMl0sIFs0LDksMTQsWzIwLDIzXV0sIFtbMTIsMTNdLDE0XV1cIiA6IC0xXHJcblx0XHRcdFx0XCJjb21wYXJlIFszLCBbNSw2XSwgWzcsOCwxMCwxMl0sIFs0LDksMTQsWzIwLDI0XV0sIFtbMTIsMTNdLDE0XV0sIFszLCBbNSw2XSwgWzcsOCwxMCwxMl0sIFs0LDksMTQsWzIwLDI0XV0sIFtbMTIsMTNdLDE0XV1cIiA6IDBcclxuXHRcdFx0XHRcImNvbXBhcmUgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjRdXSwgW1sxMiwxM10sMTRdXSwgWzMsIFs1LDZdLCBbNyw4LDEwLDEyXSwgWzQsOSwxNCxbMjAsMjVdXSwgW1sxMiwxM10sMTRdXVwiIDogMVxyXG5cclxuXHRcdGZpbHRlcjogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIGZpbHRlclxyXG5cclxuZGp1ciA9IFtcclxuXHR7bmFtbjonRmx1ZmZ5JyxhcnQ6J2thbmluJ31cclxuXHR7bmFtbjonS2FybycsYXJ0OidodW5kJ31cclxuXHR7bmFtbjonUm9ja3knLGFydDonaHVuZCd9XHJcblx0e25hbW46J0FsYmVydCcsYXJ0OidmaXNrJ31cclxuXHR7bmFtbjonVHJpeGllJyxhcnQ6J2thdHQnfVxyXG5cdHtuYW1uOidIZXJiZXJ0JyxhcnQ6J2Zpc2snfVxyXG5dXHJcblxyXG5nID0gKGRqdXIsIGFydCkgLT4gW11cclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuZyA9IChkanVyLCBhcnQpIC0+IGRqdXIuZmlsdGVyIChkKSAtPiBkLmFydCA9PSBhcnRcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRjOiAgXHJcblx0XHRcdFx0XCJbMSwtMiwwLDMsLTRdLmZpbHRlciAoeCkgLT4geCA+IDBcIiA6IFsxLDNdXHJcblx0XHRcdFx0XCJnIGRqdXIsJ2h1bmQnXCIgOiBbe25hbW46J0thcm8nLGFydDonaHVuZCd9LHtuYW1uOidSb2NreScsYXJ0OidodW5kJ31dXHJcblx0XHRcdFx0XCJnIGRqdXIsJ2Zpc2snXCIgOiBbe25hbW46J0FsYmVydCcsYXJ0OidmaXNrJ30se25hbW46J0hlcmJlcnQnLGFydDonZmlzayd9XVxyXG5cdFx0XHRcdFwiZyBkanVyLCdrYW5pbidcIiA6IFt7bmFtbjonRmx1ZmZ5JyxhcnQ6J2thbmluJ31dXHJcblx0XHRcdFx0XCJnIGRqdXIsJ2thdHQnXCIgOiBbe25hbW46J1RyaXhpZScsYXJ0OidrYXR0J31dXHJcblx0XHRcdFx0XCJnIGRqdXIsJ3BhcGVnb2phJ1wiIDogW11cclxuXHJcblx0XHRjb21wcmVoZW5zaW9uOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgZm9yIFxyXG5cclxuZGp1ciA9IFtcclxuXHR7bmFtbjonRmx1ZmZ5JyxhcnQ6J2thbmluJ31cclxuXHR7bmFtbjonS2FybycsYXJ0OidodW5kJ31cclxuXHR7bmFtbjonUm9ja3knLGFydDonaHVuZCd9XHJcblx0e25hbW46J0FsYmVydCcsYXJ0OidmaXNrJ31cclxuXHR7bmFtbjonVHJpeGllJyxhcnQ6J2thdHQnfVxyXG5cdHtuYW1uOidIZXJiZXJ0JyxhcnQ6J2Zpc2snfVxyXG5dXHJcblxyXG5uYW1uID0gKGRqdXIpIC0+IFtdXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbm5hbW4gPSAoZGp1cikgLT4gKGQubmFtbiBmb3IgZCBpbiBkanVyKVxyXG5cIlwiXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwiKDIqKmkgZm9yIGkgaW4gcmFuZ2UgNSlcIiA6IFsxLDIsNCw4LDE2XVxyXG5cdFx0XHRcdFwibmFtbiBkanVyXCIgOiBbJ0ZsdWZmeScsJ0thcm8nLCdSb2NreScsJ0FsYmVydCcsJ1RyaXhpZScsJ0hlcmJlcnQnXVxyXG5cclxuXHRcdHJlZHVjZTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIHJlZHVjZVxyXG5cclxuaWNhID0gW1xyXG5cdHtwcmlzOiAxMjMsIGFudGFsOjF9XHJcblx0e3ByaXM6IDM0LCBhbnRhbDoyfVxyXG5cdHtwcmlzOiA3OCwgYW50YWw6NH1cclxuXHR7cHJpczogOTYsIGFudGFsOjV9XHJcbl1cclxua29uc3VtID0gW1xyXG5cdHtwcmlzOiAxMDAsIGFudGFsOjF9XHJcblx0e3ByaXM6IDMwLCBhbnRhbDoxfVxyXG5cdHtwcmlzOiA3MCwgYW50YWw6MX1cclxuXHR7cHJpczogOTAsIGFudGFsOjF9XHJcbl1cclxuXHJcbnN1bW1hID0gKHZhcm9yKSAtPiAwXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc3VtbWEgPSAodmFyb3IpIC0+IHZhcm9yLnJlZHVjZSAoKHN1bSwgdmFyYSkgLT4gc3VtICsgdmFyYS5wcmlzICogdmFyYS5hbnRhbCksIDBcclxuXCJcIlwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcImljYS5yZWR1Y2UgKChzdW0sIHZhcmEpIC0+IHN1bSArIHZhcmEuYW50YWwpLCAwXCIgOiAxMlxyXG5cdFx0XHRcdFwia29uc3VtLnJlZHVjZSAoKHN1bSwgdmFyYSkgLT4gc3VtICsgdmFyYS5wcmlzKSwgMFwiIDogMjkwXHJcblx0XHRcdFx0XCJzdW1tYSBpY2FcIiA6IDk4M1xyXG5cdFx0XHRcdFwic3VtbWEga29uc3VtXCIgOiAyOTBcclxuXHJcblx0XHRzb3J0Qnk6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBfLnNvcnRCeVxyXG5cclxuZGp1ciA9IFsnRmx1ZmZ5JywnS2FybycsJ1JvY2t5JywnQWxiZXJ0JywnVHJpeGllJywnSGVyYmVydCddXHJcblxyXG5zb3J0ZXJhID0gKGRqdXIsZikgLT4gW11cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5zb3J0ZXJhID0gKGRqdXIsZikgLT4gXy5zb3J0QnkgZGp1ciwgZlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzogIFxyXG5cdFx0XHRcdFwic29ydGVyYSBkanVyLChkKS0+ZC5sZW5ndGhcIiA6IFtcIkthcm9cIixcIlJvY2t5XCIsXCJGbHVmZnlcIixcIkFsYmVydFwiLFwiVHJpeGllXCIsXCJIZXJiZXJ0XCJdXHJcblx0XHRcdFx0XCJzb3J0ZXJhIGRqdXJcIiA6IFtcIkFsYmVydFwiLFwiRmx1ZmZ5XCIsXCJIZXJiZXJ0XCIsXCJLYXJvXCIsXCJSb2NreVwiLFwiVHJpeGllXCJdXHJcblxyXG5cdFx0Z3JvdXBCeTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIGdyb3VwQnlcclxuXHJcbmRqdXIgPSBbJ0ZsdWZmeScsJ0thcm8nLCdSb2NreScsJ0FsYmVydCcsJ1RyaXhpZScsJ0hlcmJlcnQnXVxyXG5cclxuZ3J1cHBlcmEgPSAoZGp1cixmKSAtPiB7fVxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmdydXBwZXJhID0gKGRqdXIsZikgLT4gXy5ncm91cEJ5IGRqdXIsIGZcclxuXCJcIlwiXHJcblx0XHRcdGM6ICBcclxuXHRcdFx0XHRcImdydXBwZXJhIGRqdXIsKGQpIC0+IGQubGVuZ3RoXCIgOiB7XCI0XCI6W1wiS2Fyb1wiXSxcIjVcIjpbXCJSb2NreVwiXSxcIjZcIjpbXCJGbHVmZnlcIixcIkFsYmVydFwiLFwiVHJpeGllXCJdLFwiN1wiOltcIkhlcmJlcnRcIl19XHJcblx0XHRcdFx0XCJncnVwcGVyYSBkanVyLChkKSAtPiBfLmxhc3QoZClcIiA6IHtcInlcIjpbXCJGbHVmZnlcIixcIlJvY2t5XCJdLFwib1wiOltcIkthcm9cIl0sXCJ0XCI6W1wiQWxiZXJ0XCIsXCJIZXJiZXJ0XCJdLFwiZVwiOltcIlRyaXhpZVwiXX1cclxuXHJcblx0XHRzcGxpdDogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxIHNwbGl0IGZvciBpbiBfLm9iamVjdFxyXG5cclxucGFyYW1ldHJhciA9ICh1cmwpIC0+IHt9XHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxucGFyYW1ldHJhciA9ICh1cmwpIC0+IF8ub2JqZWN0KGYuc3BsaXQgJz0nIGZvciBmIGluIHVybC5zcGxpdCgnPycpWzFdLnNwbGl0KCcmJykpXHJcblwiXCJcIlxyXG5cdFx0XHRjOiAgXHJcblx0XHRcdFx0XCJfLm9iamVjdCBbJ21vZScsICdsYXJyeScsICdjdXJseSddLCBbMzAsIDQwLCA1MF1cIiA6IHttb2U6IDMwLCBsYXJyeTogNDAsIGN1cmx5OiA1MH1cclxuXHRcdFx0XHRcIl8ub2JqZWN0IFtbJ21vZScsIDMwXSwgWydsYXJyeScsIDQwXSwgWydjdXJseScsIDUwXV1cIiA6IHttb2U6IDMwLCBsYXJyeTogNDAsIGN1cmx5OiA1MH1cclxuXHRcdFx0XHRcInBhcmFtZXRyYXIgJ2RuLnNlP3g9MCZ5PTEnXCIgOiB7eDonMCcsIHk6JzEnfVxyXG5cdFx0XHRcdFwicGFyYW1ldHJhciAnc3ZkLnNlP3BhZ2U9NydcIiA6IHtwYWdlIDogJzcnfVxyXG5cdFx0XHRcdFwicGFyYW1ldHJhciAnYWZ0b25ibGFkZXQuc2U/YXJ0aWNsZT0xMjM0NTYmZGF0ZT0yMDE2LTEyLTAxJ1wiIDoge2FydGljbGU6JzEyMzQ1NicsIGRhdGU6JzIwMTYtMTItMDEnfVxyXG5cdFx0XHRcdFwicGFyYW1ldHJhciAnZXhwcmVzc2VuLnNlP2NpdHk9U3RvY2tob2xtJ1wiIDoge2NpdHkgOiAnU3RvY2tob2xtJ31cclxuXHRcdFx0XHRcInBhcmFtZXRyYXIgJ2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9zZWFyY2g/cT1jb2ZmZWVzY3JpcHQnXCIgOiB7cSA6ICdjb2ZmZWVzY3JpcHQnfVxyXG4iXX0=
//# sourceURL=C:\github\p5Assert\data.coffee