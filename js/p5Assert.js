"use strict";

// Generated by CoffeeScript 2.0.3
var axiomAppend, axiomClear, changeLayout, chapter, d, dd, exercise, fillSelect, linkAppend, linksClear, msg, myCodeMirror, pp, resizeTimer, runAll, runDelayed, sel1, sel1change, sel2, sel2change, setLinks, setMsg, setup, tableAppend, tableClear, timeout;

myCodeMirror = null;

sel1 = null;

sel2 = null;

chapter = "";

exercise = "";

msg = null;

timeout = null;

pp = function pp(obj) {
  return JSON.stringify(obj).replace(/"/g, '');
};

setMsg = function setMsg(txt) {
  msg.val(txt);
  return msg.css('background-color', txt === '' ? '#FFFFFF' : '#FF0000');
};

fillSelect = function fillSelect(sel, dict) {
  var key, results1;
  sel.empty();
  results1 = [];
  for (key in dict) {
    results1.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results1;
};

sel1change = function sel1change(sel) {
  chapter = sel.value;
  fillSelect(sel2, data[chapter]);
  exercise = _.keys(data[chapter])[0];
  return sel2.val(exercise).change();
};

sel2change = function sel2change(sel) {
  var b;
  exercise = sel.value;
  b = data[chapter][exercise]["b"];
  setLinks();
  myCodeMirror.setValue(b);
  runAll();
  return myCodeMirror.focus();
};

setLinks = function setLinks() {
  var link, ref, results1, text;
  linksClear();
  linkAppend(links, "https://github.com/ChristerNilsson/p5Assert/blob/master/README.md", "Help");
  linkAppend(links, "https://p5js.org/reference", "p5");
  linkAppend(links, "http://coffeescript.org", "Coffeescript");
  linkAppend(links, "https://www.w3schools.com/js", "Javascript");
  linkAppend(links, "https://github.com/ChristerNilsson/Nilsson/blob/master/README.md", "Nilsson");
  linkAppend(links, "http://underscorejs.org/", "_");
  ref = data[chapter][exercise]["e"];
  results1 = [];
  for (text in ref) {
    link = ref[text];
    results1.push(linkAppend(links, link, text));
  }
  return results1;
};

tableClear = function tableClear() {
  return $("#tabell tr").remove();
};

axiomClear = function axiomClear() {
  return $("#axioms tr").remove();
};

linksClear = function linksClear() {
  return $("#links tr").remove();
};

tableAppend = function tableAppend(t, call, expected, actual, show) {
  // exakt tre kolumner
  var cell1, cell2, cell3, row, sp;
  sp = "&nbsp;";
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell1.style.backgroundColor = '#FFFF00';
  cell2 = row.insertCell(-1);
  cell2.style.backgroundColor = '#00FF00';
  cell3 = row.insertCell(-1);
  cell3.style.backgroundColor = _.isEqual(expected, actual) ? '#00FF00' : '#FF0000';
  if (show) {
    cell1.innerHTML = sp + call + sp;
    cell2.innerHTML = sp + JSON.stringify(expected) + sp;
    return cell3.innerHTML = sp + JSON.stringify(actual) + sp;
  } else {
    cell1.innerHTML = sp + "?" + sp;
    cell2.innerHTML = sp + "?" + sp;
    return cell3.innerHTML = sp + "?" + sp;
  }
};

axiomAppend = function axiomAppend(t, call, expected, actual) {
  // exakt tv√• kolumner
  var cell1, cell2, row, sp;
  sp = "&nbsp;";
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell1.innerHTML = sp + call + sp;
  cell1.style.backgroundColor = '#FFFF00';
  cell2 = row.insertCell(-1);
  cell2.innerHTML = sp + JSON.stringify(expected) + sp;
  return cell2.style.backgroundColor = '#00FF00'; // if _.isEqual(expected, actual) then '#00FF00' else '#FF0000'
};

d = function d(s) {
  return "'" + s + "'";
};

dd = function dd(s) {
  return '"' + s + '"';
};

linkAppend = function linkAppend(t, link, text) {
  // exakt en kolumn
  var cell1, row, s;
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  s = '<a href=' + d(link);
  s += ' target=' + d('_blank');
  s += ' onmouseover=' + d('this.style.color=' + dd('yellow') + ';');
  s += ' onmouseout=' + d('this.style.color=' + dd('black') + ';');
  s += '>';
  s += text;
  s += '</a>';
  return cell1.innerHTML = s;
};

changeLayout = function changeLayout() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 215 - 15);
  $("#msg").width(w - 220 - 15);
  return runDelayed();
};

resizeTimer = 0;

$(window).resize(function () {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function setup() {
  msg = $('#msg');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  return fillSelect(sel1, data);
};

window.onload = function () {
  var ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(ta, {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", runDelayed);
  chapter = _.keys(data)[0];
  sel1.val(chapter).change();
  exercise = _.keys(data[chapter])[0];
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

runDelayed = function runDelayed() {
  if (timeout) {
    clearTimeout(timeout);
  }
  return timeout = setTimeout(runAll, 200);
};

runAll = function runAll() {
  var b, call, calls, cdict, code, ddict, e, error, fdict, h, i, j, k, l, len, len1, len2, offset1, offset2, ref, ref1, ref2, results, results1;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  cdict = data[chapter][exercise]["c"];
  fdict = data[chapter][exercise]["f"];
  ddict = data[chapter][exercise]["d"];
  calls = [];
  calls = calls.concat(function () {
    var results1;
    results1 = [];
    for (call in cdict) {
      results1.push('(' + call + ')');
    }
    return results1;
  }());
  calls = calls.concat(function () {
    var results1;
    results1 = [];
    for (call in fdict) {
      results1.push('(' + call + ')');
    }
    return results1;
  }());
  calls = calls.concat(function () {
    var results1;
    results1 = [];
    for (call in ddict) {
      results1.push('(' + call + ')');
    }
    return results1;
  }());
  error = "";
  try {
    code = transpile(b);
    try {
      results = eval(transpile(b + "\nreturn [" + calls + "]"));
    } catch (error1) {
      e = error1;
      error = e.stack.split('\n')[0];
    }
  } catch (error1) {
    e = error1;
    error = e.name + ": " + e.message;
  }
  tableClear();
  axiomClear();
  setMsg(error);
  if (error === "") {
    offset1 = 0;
    offset2 = 0;
    if (cdict) {
      ref = _.keys(cdict);
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        call = ref[i];
        tableAppend(tabell, call, cdict[call], results[i], true);
      }
      offset1 = _.keys(cdict).length;
    }
    if (fdict) {
      // secret
      ref1 = _.keys(fdict);
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        call = ref1[i];
        tableAppend(tabell, call, fdict[call], results[offset1 + i], false);
      }
      offset2 = offset1 + _.keys(fdict).length;
    }
    h = $('#tabell').height();
    document.getElementById('axioms').style.top = 450 + h + "px";
    if (ddict) {
      ref2 = _.keys(ddict);
      results1 = [];
      for (i = l = 0, len2 = ref2.length; l < len2; i = ++l) {
        call = ref2[i];
        results1.push(axiomAppend(axioms, call, ddict[call], results[offset2 + i]));
      }
      return results1;
    }
  }
};
//# sourceMappingURL=p5Assert.js.map
