// Generated by CoffeeScript 1.11.1
var changeLayout, chapter, exercise, fillSelect, myCodeMirror, resizeTimer, runAll, sel1, sel1change, sel2, sel2change, setup, table, tableAppend, tableClear;

myCodeMirror = 0;

sel1 = 0;

sel2 = 0;

table = 0;

chapter = "";

exercise = "";

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1change = function(sel) {
  chapter = sel.value;
  fillSelect(sel2, data[chapter]);
  exercise = _.keys(data[chapter])[0];
  return sel2.val(exercise).change();
};

sel2change = function(sel) {
  var b;
  exercise = sel.value;
  b = data[chapter][exercise]["b"];
  myCodeMirror.setValue(b);
  runAll();
  return myCodeMirror.focus();
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(call, expected, actual) {
  var cell1, cell2, cell3, row;
  row = tabell.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell3 = row.insertCell(-1);
  cell1.innerHTML = call;
  cell2.innerHTML = JSON.stringify(expected);
  cell3.innerHTML = actual === void 0 ? "error" : JSON.stringify(actual);
  cell1.style.backgroundColor = '#FFFF00';
  cell2.style.backgroundColor = '#00FF00';
  try {
    chai.assert.deepEqual(expected, actual);
    return cell3.style.backgroundColor = '#00FF00';
  } catch (error) {
    return cell3.style.backgroundColor = '#FF0000';
  }
};

changeLayout = function() {
  var w;
  w = $(window).width();
  return $(".CodeMirror").width(w - 215);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  table = $('#tabell');
  return fillSelect(sel1, data);
};

window.onload = function() {
  var help, ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(ta, {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", runAll);
  help = createA('https://github.com/ChristerNilsson/p5Assert/blob/master/README.md', 'help', '_blank');
  help.position(10, 430);
  chapter = _.keys(data)[0];
  sel1.val(chapter).change();
  exercise = _.keys(data[chapter])[0];
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

runAll = function() {
  var b, call, code, dict, e, expectedResult, result, results;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  tableClear();
  dict = data[chapter][exercise]["c"];
  results = [];
  for (call in dict) {
    expectedResult = dict[call];
    try {
      code = transpile(b + "\nreturn " + call);
      try {
        eval("result = " + code);
      } catch (error) {
        e = error;
        result = e.stack.split('\n')[0];
      }
    } catch (error) {
      e = error;
      result = e.name + ": " + e.message;
    }
    results.push(tableAppend(call, expectedResult, result));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Assert\p5Assert.coffee