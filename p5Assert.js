// Generated by CoffeeScript 1.11.1
var changeLayout, chapter, exercise, fillSelect, msg, myCodeMirror, resizeTimer, run, run0, sel1, sel1change, sel2, sel2change, setMsg, setup, table, tableAppend, tableClear;

myCodeMirror = 0;

msg = 0;

sel1 = 0;

sel2 = 0;

table = 0;

chapter = "";

exercise = "";

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1change = function(sel) {
  chapter = sel.value;
  exercise = "";
  return fillSelect(sel2, data[chapter]);
};

sel2change = function(sel) {
  var b;
  exercise = sel.value;
  b = data[chapter][exercise]["b"];
  myCodeMirror.setValue(b);
  run0();
  return myCodeMirror.focus();
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(call, expected, actual) {
  var cell1, cell2, cell3, row;
  row = tabell.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell3 = row.insertCell(-1);
  cell1.innerHTML = call;
  cell2.innerHTML = JSON.stringify(expected);
  return cell3.innerHTML = JSON.stringify(actual);
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 215);
  return $("#msg").width(w - 220);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  msg = $('#msg');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  table = $('#tabell');
  return fillSelect(sel1, data);
};

window.onload = function() {
  var help, ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(ta, {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", run0);
  help = createA('https://github.com/ChristerNilsson/p5Assert/blob/master/README.md', 'help', '_blank');
  help.position(10, 430);
  chapter = 'Assert1';
  sel1.val(chapter).change();
  exercise = 'Operator1';
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

setMsg = function(txt) {
  msg.val(txt);
  if (txt === '') {
    return msg.css('background-color', '#FFFFFF');
  } else {
    return msg.css('background-color', '#FF0000');
  }
};

run0 = function() {
  var b, call, dict, expectedResult, results;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  tableClear();
  dict = data[chapter][exercise]["c"];
  results = [];
  for (call in dict) {
    expectedResult = dict[call];
    run(0, "result = " + transpile(b + "\nreturn " + call));
    if (result === void 0) {
      results.push(tableAppend(call, expectedResult, ""));
    } else {
      results.push(tableAppend(call, expectedResult, result));
    }
  }
  return results;
};

run = function(n, code) {
  var err;
  try {
    setMsg('');
    return eval(code);
  } catch (error) {
    err = error;
    return setMsg(err.stack);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicDVBc3NlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwNUFzc2VydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsWUFBQSxHQUFlOztBQUNmLEdBQUEsR0FBTTs7QUFDTixJQUFBLEdBQUs7O0FBQ0wsSUFBQSxHQUFLOztBQUNMLEtBQUEsR0FBTTs7QUFDTixPQUFBLEdBQVE7O0FBQ1IsUUFBQSxHQUFTOztBQUVULFVBQUEsR0FBYSxTQUFDLEdBQUQsRUFBTSxJQUFOO0FBQ1gsTUFBQTtFQUFBLEdBQUcsQ0FBQyxLQUFKLENBQUE7QUFDQTtPQUFBLFdBQUE7aUJBQ0UsR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFBLENBQUUsVUFBRixDQUFhLENBQUMsSUFBZCxDQUFtQixPQUFuQixFQUE0QixHQUE1QixDQUFnQyxDQUFDLElBQWpDLENBQXNDLEdBQXRDLENBQVg7QUFERjs7QUFGVzs7QUFLYixVQUFBLEdBQWEsU0FBQyxHQUFEO0VBQ1gsT0FBQSxHQUFVLEdBQUcsQ0FBQztFQUNkLFFBQUEsR0FBVztTQUNYLFVBQUEsQ0FBVyxJQUFYLEVBQWlCLElBQUssQ0FBQSxPQUFBLENBQXRCO0FBSFc7O0FBS2IsVUFBQSxHQUFhLFNBQUMsR0FBRDtBQUNYLE1BQUE7RUFBQSxRQUFBLEdBQVcsR0FBRyxDQUFDO0VBQ2YsQ0FBQSxHQUFJLElBQUssQ0FBQSxPQUFBLENBQVMsQ0FBQSxRQUFBLENBQVUsQ0FBQSxHQUFBO0VBQzVCLFlBQVksQ0FBQyxRQUFiLENBQXNCLENBQXRCO0VBQ0EsSUFBQSxDQUFBO1NBQ0EsWUFBWSxDQUFDLEtBQWIsQ0FBQTtBQUxXOztBQU9iLFVBQUEsR0FBYSxTQUFBO1NBQ1gsQ0FBQSxDQUFFLFlBQUYsQ0FBZSxDQUFDLE1BQWhCLENBQUE7QUFEVzs7QUFHYixXQUFBLEdBQWMsU0FBQyxJQUFELEVBQU8sUUFBUCxFQUFpQixNQUFqQjtBQUNaLE1BQUE7RUFBQSxHQUFBLEdBQU0sTUFBTSxDQUFDLFNBQVAsQ0FBaUIsQ0FBQyxDQUFsQjtFQUNOLEtBQUEsR0FBUSxHQUFHLENBQUMsVUFBSixDQUFlLENBQUMsQ0FBaEI7RUFDUixLQUFBLEdBQVEsR0FBRyxDQUFDLFVBQUosQ0FBZSxDQUFDLENBQWhCO0VBQ1IsS0FBQSxHQUFRLEdBQUcsQ0FBQyxVQUFKLENBQWUsQ0FBQyxDQUFoQjtFQUNSLEtBQUssQ0FBQyxTQUFOLEdBQWtCO0VBQ2xCLEtBQUssQ0FBQyxTQUFOLEdBQWtCLElBQUksQ0FBQyxTQUFMLENBQWUsUUFBZjtTQUNsQixLQUFLLENBQUMsU0FBTixHQUFrQixJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWY7QUFQTjs7QUFTZCxZQUFBLEdBQWUsU0FBQTtBQUNiLE1BQUE7RUFBQSxDQUFBLEdBQUksQ0FBQSxDQUFFLE1BQUYsQ0FBUyxDQUFDLEtBQVYsQ0FBQTtFQUNKLENBQUEsQ0FBRSxhQUFGLENBQWdCLENBQUMsS0FBakIsQ0FBdUIsQ0FBQSxHQUFFLEdBQXpCO1NBQ0EsQ0FBQSxDQUFFLE1BQUYsQ0FBUyxDQUFDLEtBQVYsQ0FBZ0IsQ0FBQSxHQUFFLEdBQWxCO0FBSGE7O0FBS2YsV0FBQSxHQUFZOztBQUNaLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxNQUFWLENBQWlCLFNBQUE7RUFDZixZQUFBLENBQWEsV0FBYjtTQUNBLFdBQUEsR0FBYyxVQUFBLENBQVcsWUFBWCxFQUF5QixFQUF6QjtBQUZDLENBQWpCOztBQUlBLEtBQUEsR0FBUSxTQUFBO0VBQ04sR0FBQSxHQUFNLENBQUEsQ0FBRSxNQUFGO0VBQ04sSUFBQSxHQUFPLENBQUEsQ0FBRSxPQUFGO0VBQ1AsSUFBQSxHQUFPLENBQUEsQ0FBRSxPQUFGO0VBQ1AsS0FBQSxHQUFRLENBQUEsQ0FBRSxTQUFGO1NBQ1IsVUFBQSxDQUFXLElBQVgsRUFBaUIsSUFBakI7QUFMTTs7QUFPUixNQUFNLENBQUMsTUFBUCxHQUFnQixTQUFBO0FBQ2QsTUFBQTtFQUFBLEVBQUEsR0FBSyxRQUFRLENBQUMsY0FBVCxDQUF3QixNQUF4QjtFQUNMLFlBQUEsR0FBZSxVQUFVLENBQUMsWUFBWCxDQUF3QixFQUF4QixFQUNiO0lBQUEsV0FBQSxFQUFhLElBQWI7SUFDQSxJQUFBLEVBQU0sY0FETjtJQUVBLE1BQUEsRUFBUSxTQUZSO0lBR0EsS0FBQSxFQUFPLFNBSFA7SUFJQSxpQkFBQSxFQUFtQixJQUpuQjtJQUtBLGVBQUEsRUFBaUIsSUFMakI7SUFNQSxPQUFBLEVBQVMsQ0FOVDtJQU9BLGNBQUEsRUFBZ0IsSUFQaEI7R0FEYTtFQVVmLENBQUEsQ0FBRSxhQUFGLENBQWdCLENBQUMsR0FBakIsQ0FBcUIsV0FBckIsRUFBaUMsTUFBakM7RUFDQSxZQUFZLENBQUMsRUFBYixDQUFnQixRQUFoQixFQUEwQixJQUExQjtFQUVBLElBQUEsR0FBTyxPQUFBLENBQVEsbUVBQVIsRUFBNkUsTUFBN0UsRUFBcUYsUUFBckY7RUFDUCxJQUFJLENBQUMsUUFBTCxDQUFjLEVBQWQsRUFBaUIsR0FBakI7RUFFQSxPQUFBLEdBQVU7RUFDVixJQUFJLENBQUMsR0FBTCxDQUFTLE9BQVQsQ0FBaUIsQ0FBQyxNQUFsQixDQUFBO0VBQ0EsUUFBQSxHQUFXO0VBQ1gsSUFBSSxDQUFDLEdBQUwsQ0FBUyxRQUFULENBQWtCLENBQUMsTUFBbkIsQ0FBQTtFQUVBLFlBQVksQ0FBQyxLQUFiLENBQUE7RUFDQSxNQUFNLENBQUMsUUFBUCxDQUFnQixJQUFoQixFQUFxQixHQUFyQjtTQUNBLFlBQUEsQ0FBQTtBQXpCYzs7QUEyQmhCLE1BQUEsR0FBUyxTQUFDLEdBQUQ7RUFDUCxHQUFHLENBQUMsR0FBSixDQUFRLEdBQVI7RUFDQSxJQUFHLEdBQUEsS0FBTyxFQUFWO1dBQ0UsR0FBRyxDQUFDLEdBQUosQ0FBUSxrQkFBUixFQUE2QixTQUE3QixFQURGO0dBQUEsTUFBQTtXQUdFLEdBQUcsQ0FBQyxHQUFKLENBQVEsa0JBQVIsRUFBNkIsU0FBN0IsRUFIRjs7QUFGTzs7QUFPVCxJQUFBLEdBQU8sU0FBQTtBQUNMLE1BQUE7RUFBQSxDQUFBLEdBQUksWUFBWSxDQUFDLFFBQWIsQ0FBQTtFQUNKLElBQUssQ0FBQSxPQUFBLENBQVMsQ0FBQSxRQUFBLENBQVUsQ0FBQSxHQUFBLENBQXhCLEdBQStCO0VBRS9CLFVBQUEsQ0FBQTtFQUNBLElBQUEsR0FBTyxJQUFLLENBQUEsT0FBQSxDQUFTLENBQUEsUUFBQSxDQUFVLENBQUEsR0FBQTtBQUUvQjtPQUFBLFlBQUE7O0lBQ0UsR0FBQSxDQUFJLENBQUosRUFBTyxXQUFBLEdBQWMsU0FBQSxDQUFVLENBQUEsR0FBSSxXQUFKLEdBQWtCLElBQTVCLENBQXJCO0lBQ0EsSUFBRyxNQUFBLEtBQVUsTUFBYjttQkFDRSxXQUFBLENBQVksSUFBWixFQUFrQixjQUFsQixFQUFrQyxFQUFsQyxHQURGO0tBQUEsTUFBQTttQkFHRSxXQUFBLENBQVksSUFBWixFQUFrQixjQUFsQixFQUFrQyxNQUFsQyxHQUhGOztBQUZGOztBQVBLOztBQWNQLEdBQUEsR0FBTSxTQUFDLENBQUQsRUFBSSxJQUFKO0FBQ0osTUFBQTtBQUFBO0lBQ0UsTUFBQSxDQUFPLEVBQVA7V0FDQSxJQUFBLENBQUssSUFBTCxFQUZGO0dBQUEsYUFBQTtJQUdNO1dBQ0osTUFBQSxDQUFPLEdBQUcsQ0FBQyxLQUFYLEVBSkY7O0FBREkiLCJzb3VyY2VzQ29udGVudCI6WyJteUNvZGVNaXJyb3IgPSAwXHJcbm1zZyA9IDBcclxuc2VsMT0wXHJcbnNlbDI9MFxyXG50YWJsZT0wXHJcbmNoYXB0ZXI9XCJcIlxyXG5leGVyY2lzZT1cIlwiXHJcblxyXG5maWxsU2VsZWN0ID0gKHNlbCwgZGljdCkgLT5cclxuICBzZWwuZW1wdHkoKVxyXG4gIGZvciBrZXkgb2YgZGljdCBcclxuICAgIHNlbC5hcHBlbmQgJChcIjxvcHRpb24+XCIpLmF0dHIoJ3ZhbHVlJywga2V5KS50ZXh0KGtleSlcclxuXHJcbnNlbDFjaGFuZ2UgPSAoc2VsKSAtPlxyXG4gIGNoYXB0ZXIgPSBzZWwudmFsdWVcclxuICBleGVyY2lzZSA9IFwiXCJcclxuICBmaWxsU2VsZWN0IHNlbDIsIGRhdGFbY2hhcHRlcl1cclxuXHJcbnNlbDJjaGFuZ2UgPSAoc2VsKSAtPlxyXG4gIGV4ZXJjaXNlID0gc2VsLnZhbHVlXHJcbiAgYiA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiYlwiXVxyXG4gIG15Q29kZU1pcnJvci5zZXRWYWx1ZShiKVxyXG4gIHJ1bjAoKVxyXG4gIG15Q29kZU1pcnJvci5mb2N1cygpIFxyXG5cclxudGFibGVDbGVhciA9IC0+XHJcbiAgJChcIiN0YWJlbGwgdHJcIikucmVtb3ZlKClcclxuXHJcbnRhYmxlQXBwZW5kID0gKGNhbGwsIGV4cGVjdGVkLCBhY3R1YWwpIC0+XHJcbiAgcm93ID0gdGFiZWxsLmluc2VydFJvdyAtMVxyXG4gIGNlbGwxID0gcm93Lmluc2VydENlbGwgLTFcclxuICBjZWxsMiA9IHJvdy5pbnNlcnRDZWxsIC0xXHJcbiAgY2VsbDMgPSByb3cuaW5zZXJ0Q2VsbCAtMVxyXG4gIGNlbGwxLmlubmVySFRNTCA9IGNhbGxcclxuICBjZWxsMi5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeSBleHBlY3RlZFxyXG4gIGNlbGwzLmlubmVySFRNTCA9IEpTT04uc3RyaW5naWZ5IGFjdHVhbCAgICBcclxuXHJcbmNoYW5nZUxheW91dCA9IC0+XHJcbiAgdyA9ICQod2luZG93KS53aWR0aCgpXHJcbiAgJChcIi5Db2RlTWlycm9yXCIpLndpZHRoKHctMjE1KVxyXG4gICQoXCIjbXNnXCIpLndpZHRoKHctMjIwKVxyXG5cclxucmVzaXplVGltZXI9MFxyXG4kKHdpbmRvdykucmVzaXplICgpIC0+XHJcbiAgY2xlYXJUaW1lb3V0KHJlc2l6ZVRpbWVyKVxyXG4gIHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChjaGFuZ2VMYXlvdXQsIDEwKVxyXG5cclxuc2V0dXAgPSAtPlxyXG4gIG1zZyA9ICQoJyNtc2cnKVxyXG4gIHNlbDEgPSAkKCcjc2VsMScpXHJcbiAgc2VsMiA9ICQoJyNzZWwyJylcclxuICB0YWJsZSA9ICQoJyN0YWJlbGwnKVxyXG4gIGZpbGxTZWxlY3Qgc2VsMSwgZGF0YVxyXG5cclxud2luZG93Lm9ubG9hZCA9IC0+XHJcbiAgdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcImNvZGVcIlxyXG4gIG15Q29kZU1pcnJvciA9IENvZGVNaXJyb3IuZnJvbVRleHRBcmVhIHRhLCBcclxuICAgIGxpbmVOdW1iZXJzOiB0cnVlXHJcbiAgICBtb2RlOiBcImNvZmZlZXNjcmlwdFwiXHJcbiAgICBrZXlNYXA6IFwic3VibGltZVwiXHJcbiAgICB0aGVtZTogXCJkcmFjdWxhXCJcclxuICAgIGF1dG9DbG9zZUJyYWNrZXRzOiB0cnVlXHJcbiAgICBsaW5lV2lzZUNvcHlDdXQ6IHRydWVcclxuICAgIHRhYlNpemU6IDJcclxuICAgIGluZGVudFdpdGhUYWJzOiB0cnVlXHJcbiAgXHJcbiAgJChcIi5Db2RlTWlycm9yXCIpLmNzcyAnZm9udC1zaXplJyxcIjE2cHRcIlxyXG4gIG15Q29kZU1pcnJvci5vbiBcImNoYW5nZVwiLCBydW4wXHJcblxyXG4gIGhlbHAgPSBjcmVhdGVBKCdodHRwczovL2dpdGh1Yi5jb20vQ2hyaXN0ZXJOaWxzc29uL3A1QXNzZXJ0L2Jsb2IvbWFzdGVyL1JFQURNRS5tZCcsICdoZWxwJywgJ19ibGFuaycpXHJcbiAgaGVscC5wb3NpdGlvbiAxMCw0MzBcclxuICBcclxuICBjaGFwdGVyID0gJ0Fzc2VydDEnXHJcbiAgc2VsMS52YWwoY2hhcHRlcikuY2hhbmdlKClcclxuICBleGVyY2lzZSA9ICdPcGVyYXRvcjEnXHJcbiAgc2VsMi52YWwoZXhlcmNpc2UpLmNoYW5nZSgpXHJcbiAgXHJcbiAgbXlDb2RlTWlycm9yLmZvY3VzKClcclxuICB3aW5kb3cucmVzaXplVG8gMTAwMCw3NTBcclxuICBjaGFuZ2VMYXlvdXQoKVxyXG5cclxuc2V0TXNnID0gKHR4dCkgLT5cclxuICBtc2cudmFsIHR4dFxyXG4gIGlmIHR4dCA9PSAnJ1xyXG4gICAgbXNnLmNzcyAnYmFja2dyb3VuZC1jb2xvcicgLCAnI0ZGRkZGRidcclxuICBlbHNlIFxyXG4gICAgbXNnLmNzcyAnYmFja2dyb3VuZC1jb2xvcicgLCAnI0ZGMDAwMCdcclxuXHJcbnJ1bjAgPSAtPlxyXG4gIGIgPSBteUNvZGVNaXJyb3IuZ2V0VmFsdWUoKVxyXG4gIGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiYlwiXSA9IGJcclxuXHJcbiAgdGFibGVDbGVhcigpXHJcbiAgZGljdCA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiY1wiXSAgICBcclxuICAjcmVzdWx0ID0gdW5kZWZpbmVkXHJcbiAgZm9yIGNhbGwsZXhwZWN0ZWRSZXN1bHQgb2YgZGljdCBcclxuICAgIHJ1biAwLCBcInJlc3VsdCA9IFwiICsgdHJhbnNwaWxlKGIgKyBcIlxcbnJldHVybiBcIiArIGNhbGwpICAgIFxyXG4gICAgaWYgcmVzdWx0IGlzIHVuZGVmaW5lZCBcclxuICAgICAgdGFibGVBcHBlbmQgY2FsbCwgZXhwZWN0ZWRSZXN1bHQsIFwiXCJcclxuICAgIGVsc2VcclxuICAgICAgdGFibGVBcHBlbmQgY2FsbCwgZXhwZWN0ZWRSZXN1bHQsIHJlc3VsdFxyXG5cclxucnVuID0gKG4sIGNvZGUpIC0+XHJcbiAgdHJ5IFxyXG4gICAgc2V0TXNnICcnXHJcbiAgICBldmFsIGNvZGVcclxuICBjYXRjaCBlcnIgXHJcbiAgICBzZXRNc2cgZXJyLnN0YWNrXHJcbiAgIl19
//# sourceURL=C:\github\p5Assert\p5Assert.coffee