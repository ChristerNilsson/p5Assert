// Generated by CoffeeScript 1.11.1
var axiomAppend, axiomClear, changeLayout, chapter, d, dd, exercise, fillSelect, linkAppend, linksClear, msg, myCodeMirror, pp, resizeTimer, runAll, runDelayed, sel1, sel1change, sel2, sel2change, setLinks, setMsg, setup, tableAppend, tableClear, timeout;

myCodeMirror = null;

sel1 = null;

sel2 = null;

chapter = "";

exercise = "";

msg = null;

timeout = null;

pp = function(obj) {
  return (JSON.stringify(obj)).replace(/"/g, '');
};

setMsg = function(txt) {
  msg.val(txt);
  return msg.css('background-color', txt === '' ? '#FFFFFF' : '#FF0000');
};

fillSelect = function(sel, dict) {
  var key, results1;
  sel.empty();
  results1 = [];
  for (key in dict) {
    results1.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results1;
};

sel1change = function(sel) {
  chapter = sel.value;
  fillSelect(sel2, data[chapter]);
  exercise = _.keys(data[chapter])[0];
  return sel2.val(exercise).change();
};

sel2change = function(sel) {
  var b;
  exercise = sel.value;
  b = data[chapter][exercise]["b"];
  setLinks();
  myCodeMirror.setValue(b);
  runAll();
  return myCodeMirror.focus();
};

setLinks = function() {
  var link, ref, results1, text;
  linksClear();
  linkAppend(links, "https://github.com/ChristerNilsson/p5Assert/blob/master/README.md", "Help");
  linkAppend(links, "https://p5js.org/reference", "p5");
  linkAppend(links, "http://coffeescript.org", "Coffeescript");
  linkAppend(links, "https://www.w3schools.com/js", "Javascript");
  linkAppend(links, "https://github.com/ChristerNilsson/Nilsson/blob/master/README.md", "Nilsson");
  linkAppend(links, "http://underscorejs.org/", "_");
  ref = data[chapter][exercise]["e"];
  results1 = [];
  for (text in ref) {
    link = ref[text];
    results1.push(linkAppend(links, link, text));
  }
  return results1;
};

tableClear = function() {
  return $("#tabell tr").remove();
};

axiomClear = function() {
  return $("#axioms tr").remove();
};

linksClear = function() {
  return $("#links tr").remove();
};

tableAppend = function(t, call, expected, actual) {
  var cell1, cell2, cell3, row, sp;
  sp = "&nbsp;";
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell1.innerHTML = sp + call + sp;
  cell1.style.backgroundColor = '#FFFF00';
  cell2 = row.insertCell(-1);
  cell2.innerHTML = sp + JSON.stringify(expected) + sp;
  cell2.style.backgroundColor = '#00FF00';
  cell3 = row.insertCell(-1);
  cell3.innerHTML = sp + JSON.stringify(actual) + sp;
  return cell3.style.backgroundColor = _.isEqual(expected, actual) ? '#00FF00' : '#FF0000';
};

axiomAppend = function(t, call, expected, actual) {
  var cell1, cell2, row, sp;
  sp = "&nbsp;";
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell1.innerHTML = sp + call + sp;
  cell1.style.backgroundColor = '#FFFF00';
  cell2 = row.insertCell(-1);
  cell2.innerHTML = sp + JSON.stringify(actual) + sp;
  return cell2.style.backgroundColor = _.isEqual(expected, actual) ? '#00FF00' : '#FF0000';
};

d = function(s) {
  return "'" + s + "'";
};

dd = function(s) {
  return '"' + s + '"';
};

linkAppend = function(t, link, text) {
  var cell1, row, s;
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  s = '<a href=' + d(link);
  s += ' target=' + d('_blank');
  s += ' onmouseover=' + d('this.style.color=' + dd('yellow') + ';');
  s += ' onmouseout=' + d('this.style.color=' + dd('black') + ';');
  s += '>';
  s += text;
  s += '</a>';
  return cell1.innerHTML = s;
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 215 - 15);
  $("#msg").width(w - 220 - 15);
  return runDelayed();
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  msg = $('#msg');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  return fillSelect(sel1, data);
};

window.onload = function() {
  var ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(ta, {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", runDelayed);
  chapter = _.keys(data)[0];
  sel1.val(chapter).change();
  exercise = _.keys(data[chapter])[0];
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

runDelayed = function() {
  if (timeout) {
    clearTimeout(timeout);
  }
  return timeout = setTimeout(runAll, 200);
};

runAll = function() {
  var b, call, calls, cdict, code, ddict, e, error, h, i, j, k, len, len1, offset, ref, ref1, results1;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  cdict = data[chapter][exercise]["c"];
  ddict = data[chapter][exercise]["d"];
  calls = [];
  calls = calls.concat((function() {
    var results1;
    results1 = [];
    for (call in cdict) {
      results1.push('(' + call + ')');
    }
    return results1;
  })());
  calls = calls.concat((function() {
    var results1;
    results1 = [];
    for (call in ddict) {
      results1.push('(' + call + ')');
    }
    return results1;
  })());
  error = "";
  try {
    code = transpile(b);
    try {
      eval("results = " + transpile(b + "\nreturn [" + calls + "]"));
    } catch (error1) {
      e = error1;
      error = e.stack.split('\n')[0];
    }
  } catch (error1) {
    e = error1;
    error = e.name + ": " + e.message;
  }
  tableClear();
  axiomClear();
  setMsg(error);
  if (error === "") {
    if (cdict) {
      offset = _.keys(cdict).length;
      ref = _.keys(cdict);
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        call = ref[i];
        tableAppend(tabell, call, cdict[call], results[i]);
      }
    }
    h = $('#tabell').height();
    document.getElementById('axioms').style.top = (450 + h) + "px";
    if (ddict) {
      ref1 = _.keys(ddict);
      results1 = [];
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        call = ref1[i];
        results1.push(axiomAppend(axioms, call, ddict[call], results[offset + i]));
      }
      return results1;
    }
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Assert\p5Assert.coffee