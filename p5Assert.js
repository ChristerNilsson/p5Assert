// Generated by CoffeeScript 1.11.1
var changeLayout, chapter, exercise, fillSelect, myCodeMirror, pp, resizeTimer, runAll, sel1, sel1change, sel2, sel2change, setup, table, tableAppend, tableClear;

myCodeMirror = 0;

sel1 = 0;

sel2 = 0;

table = 0;

chapter = "";

exercise = "";

pp = function(obj) {
  return (JSON.stringify(obj)).replace(/"/g, '');
};

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1change = function(sel) {
  chapter = sel.value;
  fillSelect(sel2, data[chapter]);
  exercise = _.keys(data[chapter])[0];
  return sel2.val(exercise).change();
};

sel2change = function(sel) {
  var b;
  exercise = sel.value;
  b = data[chapter][exercise]["b"];
  myCodeMirror.setValue(b);
  runAll();
  return myCodeMirror.focus();
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(call, expected, actual) {
  var cell1, cell2, cell3, row;
  row = tabell.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell3 = row.insertCell(-1);
  cell1.innerHTML = call;
  cell2.innerHTML = JSON.stringify(expected);
  cell3.innerHTML = actual === void 0 ? "error" : JSON.stringify(actual);
  cell1.style.backgroundColor = '#FFFF00';
  cell2.style.backgroundColor = '#00FF00';
  try {
    chai.assert.deepEqual(expected, actual);
    return cell3.style.backgroundColor = '#00FF00';
  } catch (error) {
    return cell3.style.backgroundColor = '#FF0000';
  }
};

changeLayout = function() {
  var w;
  w = $(window).width();
  return $(".CodeMirror").width(w - 215);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  table = $('#tabell');
  return fillSelect(sel1, data);
};

window.onload = function() {
  var help, ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(ta, {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", runAll);
  help = createA('https://github.com/ChristerNilsson/p5Assert/blob/master/README.md', 'help', '_blank');
  help.position(10, 430);
  chapter = _.keys(data)[0];
  sel1.val(chapter).change();
  exercise = _.keys(data[chapter])[0];
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

runAll = function() {
  var b, call, code, dict, e, expectedResult, result, results;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  tableClear();
  dict = data[chapter][exercise]["c"];
  results = [];
  for (call in dict) {
    expectedResult = dict[call];
    try {
      code = transpile(b + "\nreturn " + call);
      try {
        eval("result = " + code);
      } catch (error) {
        e = error;
        result = e.stack.split('\n')[0];
      }
    } catch (error) {
      e = error;
      result = e.name + ": " + e.message;
    }
    results.push(tableAppend(call, expectedResult, result));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicDVBc3NlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwNUFzc2VydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsWUFBQSxHQUFlOztBQUNmLElBQUEsR0FBTzs7QUFDUCxJQUFBLEdBQU87O0FBQ1AsS0FBQSxHQUFROztBQUNSLE9BQUEsR0FBVTs7QUFDVixRQUFBLEdBQVc7O0FBRVgsRUFBQSxHQUFLLFNBQUMsR0FBRDtTQUFTLENBQUMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxHQUFmLENBQUQsQ0FBb0IsQ0FBQyxPQUFyQixDQUE2QixJQUE3QixFQUFtQyxFQUFuQztBQUFUOztBQUVMLFVBQUEsR0FBYSxTQUFDLEdBQUQsRUFBTSxJQUFOO0FBQ1gsTUFBQTtFQUFBLEdBQUcsQ0FBQyxLQUFKLENBQUE7QUFDQTtPQUFBLFdBQUE7aUJBQ0UsR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFBLENBQUUsVUFBRixDQUFhLENBQUMsSUFBZCxDQUFtQixPQUFuQixFQUE0QixHQUE1QixDQUFnQyxDQUFDLElBQWpDLENBQXNDLEdBQXRDLENBQVg7QUFERjs7QUFGVzs7QUFLYixVQUFBLEdBQWEsU0FBQyxHQUFEO0VBQ1gsT0FBQSxHQUFVLEdBQUcsQ0FBQztFQUNkLFVBQUEsQ0FBVyxJQUFYLEVBQWlCLElBQUssQ0FBQSxPQUFBLENBQXRCO0VBQ0EsUUFBQSxHQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sSUFBSyxDQUFBLE9BQUEsQ0FBWixDQUFzQixDQUFBLENBQUE7U0FDakMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxRQUFULENBQWtCLENBQUMsTUFBbkIsQ0FBQTtBQUpXOztBQU1iLFVBQUEsR0FBYSxTQUFDLEdBQUQ7QUFDWCxNQUFBO0VBQUEsUUFBQSxHQUFXLEdBQUcsQ0FBQztFQUNmLENBQUEsR0FBSSxJQUFLLENBQUEsT0FBQSxDQUFTLENBQUEsUUFBQSxDQUFVLENBQUEsR0FBQTtFQUM1QixZQUFZLENBQUMsUUFB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QWxCLENBQUE7RUFDQSxRQUFBLEdBQVcsQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFLLENBQUEsT0FBQSxDQUFaLENBQXNCLENBQUEsQ0FBQTtFQUNqQyxJQUFJLENBQUMsR0FBTCxDQUFTLFFBQVQsQ0FBa0IsQ0FBQyxNQUFuQixDQUFBO0VBRUEsWUFBWSxDQUFDLEtBQWIsQ0FBQTtFQUNBLE1BQU0sQ0FBQyxRQUFQLENBQWdCLElBQWhCLEVBQXFCLEdBQXJCO1NBQ0EsWUFBQSxDQUFBO0FBekJjOztBQTJCaEIsTUFBQSxHQUFTLFNBQUE7QUFDUCxNQUFBO0VBQUEsQ0FBQSxHQUFJLFlBQVksQ0FBQyxRQUFiLENBQUE7RUFDSixJQUFLLENBQUEsT0FBQSxDQUFTLENBQUEsUUFBQSxDQUFVLENBQUEsR0FBQSxDQUF4QixHQUErQjtFQUMvQixVQUFBLENBQUE7RUFDQSxJQUFBLEdBQU8sSUFBSyxDQUFBLE9BQUEsQ0FBUyxDQUFBLFFBQUEsQ0FBVSxDQUFBLEdBQUE7QUFDL0I7T0FBQSxZQUFBOztBQUNFO01BQ0UsSUFBQSxHQUFPLFNBQUEsQ0FBVSxDQUFBLEdBQUksV0FBSixHQUFrQixJQUE1QjtBQUNQO1FBQ0UsSUFBQSxDQUFLLFdBQUEsR0FBYyxJQUFuQixFQURGO09BQUEsYUFBQTtRQUVNO1FBQ0osTUFBQSxHQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBUixDQUFjLElBQWQsQ0FBb0IsQ0FBQSxDQUFBLEVBSC9CO09BRkY7S0FBQSxhQUFBO01BTU07TUFDSixNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQUYsR0FBUyxJQUFULEdBQWdCLENBQUMsQ0FBQyxRQVA3Qjs7aUJBUUEsV0FBQSxDQUFZLElBQVosRUFBa0IsY0FBbEIsRUFBa0MsTUFBbEM7QUFURjs7QUFMTyIsInNvdXJjZXNDb250ZW50IjpbIm15Q29kZU1pcnJvciA9IDBcclxuc2VsMSA9IDBcclxuc2VsMiA9IDBcclxudGFibGUgPSAwXHJcbmNoYXB0ZXIgPSBcIlwiXHJcbmV4ZXJjaXNlID0gXCJcIlxyXG5cclxucHAgPSAob2JqKSAtPiAoSlNPTi5zdHJpbmdpZnkgb2JqKS5yZXBsYWNlIC9cIi9nLCAnJ1xyXG5cclxuZmlsbFNlbGVjdCA9IChzZWwsIGRpY3QpIC0+XHJcbiAgc2VsLmVtcHR5KClcclxuICBmb3Iga2V5IG9mIGRpY3QgXHJcbiAgICBzZWwuYXBwZW5kICQoXCI8b3B0aW9uPlwiKS5hdHRyKCd2YWx1ZScsIGtleSkudGV4dChrZXkpXHJcblxyXG5zZWwxY2hhbmdlID0gKHNlbCkgLT5cclxuICBjaGFwdGVyID0gc2VsLnZhbHVlXHJcbiAgZmlsbFNlbGVjdCBzZWwyLCBkYXRhW2NoYXB0ZXJdXHJcbiAgZXhlcmNpc2UgPSBfLmtleXMoZGF0YVtjaGFwdGVyXSlbMF1cclxuICBzZWwyLnZhbChleGVyY2lzZSkuY2hhbmdlKClcclxuXHJcbnNlbDJjaGFuZ2UgPSAoc2VsKSAtPlxyXG4gIGV4ZXJjaXNlID0gc2VsLnZhbHVlXHJcbiAgYiA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiYlwiXVxyXG4gIG15Q29kZU1pcnJvci5zZXRWYWx1ZShiKVxyXG4gIHJ1bkFsbCgpXHJcbiAgbXlDb2RlTWlycm9yLmZvY3VzKCkgXHJcblxyXG50YWJsZUNsZWFyID0gLT5cclxuICAkKFwiI3RhYmVsbCB0clwiKS5yZW1vdmUoKVxyXG5cclxudGFibGVBcHBlbmQgPSAoY2FsbCwgZXhwZWN0ZWQsIGFjdHVhbCkgLT5cclxuICByb3cgPSB0YWJlbGwuaW5zZXJ0Um93IC0xXHJcbiAgY2VsbDEgPSByb3cuaW5zZXJ0Q2VsbCAtMVxyXG4gIGNlbGwyID0gcm93Lmluc2VydENlbGwgLTFcclxuICBjZWxsMyA9IHJvdy5pbnNlcnRDZWxsIC0xXHJcbiAgY2VsbDEuaW5uZXJIVE1MID0gY2FsbFxyXG4gIGNlbGwyLmlubmVySFRNTCA9IEpTT04uc3RyaW5naWZ5IGV4cGVjdGVkXHJcbiAgY2VsbDMuaW5uZXJIVE1MID0gaWYgYWN0dWFsID09IHVuZGVmaW5lZCB0aGVuIFwiZXJyb3JcIiBlbHNlIEpTT04uc3RyaW5naWZ5IGFjdHVhbFxyXG4gIGNlbGwxLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjRkZGRjAwJ1xyXG4gIGNlbGwyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDBGRjAwJ1xyXG4gIHRyeSBcclxuICAgIGNoYWkuYXNzZXJ0LmRlZXBFcXVhbCBleHBlY3RlZCwgYWN0dWFsXHJcbiAgICBjZWxsMy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwRkYwMCdcclxuICBjYXRjaCAgXHJcbiAgICBjZWxsMy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI0ZGMDAwMCdcclxuXHJcbmNoYW5nZUxheW91dCA9IC0+XHJcbiAgdyA9ICQod2luZG93KS53aWR0aCgpXHJcbiAgJChcIi5Db2RlTWlycm9yXCIpLndpZHRoKHctMjE1KVxyXG5cclxucmVzaXplVGltZXI9MFxyXG4kKHdpbmRvdykucmVzaXplICgpIC0+XHJcbiAgY2xlYXJUaW1lb3V0KHJlc2l6ZVRpbWVyKVxyXG4gIHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChjaGFuZ2VMYXlvdXQsIDEwKVxyXG5cclxuc2V0dXAgPSAtPlxyXG4gIHNlbDEgPSAkKCcjc2VsMScpXHJcbiAgc2VsMiA9ICQoJyNzZWwyJylcclxuICB0YWJsZSA9ICQoJyN0YWJlbGwnKVxyXG4gIGZpbGxTZWxlY3Qgc2VsMSwgZGF0YVxyXG5cclxud2luZG93Lm9ubG9hZCA9IC0+XHJcbiAgdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcImNvZGVcIlxyXG4gIG15Q29kZU1pcnJvciA9IENvZGVNaXJyb3IuZnJvbVRleHRBcmVhIHRhLCBcclxuICAgIGxpbmVOdW1iZXJzOiB0cnVlXHJcbiAgICBtb2RlOiBcImNvZmZlZXNjcmlwdFwiXHJcbiAgICBrZXlNYXA6IFwic3VibGltZVwiXHJcbiAgICB0aGVtZTogXCJkcmFjdWxhXCJcclxuICAgIGF1dG9DbG9zZUJyYWNrZXRzOiB0cnVlXHJcbiAgICBsaW5lV2lzZUNvcHlDdXQ6IHRydWVcclxuICAgIHRhYlNpemU6IDJcclxuICAgIGluZGVudFdpdGhUYWJzOiB0cnVlXHJcbiAgXHJcbiAgJChcIi5Db2RlTWlycm9yXCIpLmNzcyAnZm9udC1zaXplJyxcIjE2cHRcIlxyXG4gIG15Q29kZU1pcnJvci5vbiBcImNoYW5nZVwiLCBydW5BbGxcclxuXHJcbiAgaGVscCA9IGNyZWF0ZUEoJ2h0dHBzOi8vZ2l0aHViLmNvbS9DaHJpc3Rlck5pbHNzb24vcDVBc3NlcnQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kJywgJ2hlbHAnLCAnX2JsYW5rJylcclxuICBoZWxwLnBvc2l0aW9uIDEwLDQzMFxyXG4gIFxyXG4gIGNoYXB0ZXIgPSBfLmtleXMoZGF0YSlbMF1cclxuICBzZWwxLnZhbChjaGFwdGVyKS5jaGFuZ2UoKVxyXG4gIGV4ZXJjaXNlID0gXy5rZXlzKGRhdGFbY2hhcHRlcl0pWzBdXHJcbiAgc2VsMi52YWwoZXhlcmNpc2UpLmNoYW5nZSgpXHJcbiAgXHJcbiAgbXlDb2RlTWlycm9yLmZvY3VzKClcclxuICB3aW5kb3cucmVzaXplVG8gMTAwMCw3NTBcclxuICBjaGFuZ2VMYXlvdXQoKVxyXG5cclxucnVuQWxsID0gLT5cclxuICBiID0gbXlDb2RlTWlycm9yLmdldFZhbHVlKClcclxuICBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVtcImJcIl0gPSBiXHJcbiAgdGFibGVDbGVhcigpXHJcbiAgZGljdCA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiY1wiXSAgICBcclxuICBmb3IgY2FsbCxleHBlY3RlZFJlc3VsdCBvZiBkaWN0IFxyXG4gICAgdHJ5XHJcbiAgICAgIGNvZGUgPSB0cmFuc3BpbGUgYiArIFwiXFxucmV0dXJuIFwiICsgY2FsbFxyXG4gICAgICB0cnlcclxuICAgICAgICBldmFsIFwicmVzdWx0ID0gXCIgKyBjb2RlIFxyXG4gICAgICBjYXRjaCBlXHJcbiAgICAgICAgcmVzdWx0ID0gZS5zdGFjay5zcGxpdCgnXFxuJylbMF1cclxuICAgIGNhdGNoIGVcclxuICAgICAgcmVzdWx0ID0gZS5uYW1lICsgXCI6IFwiICsgZS5tZXNzYWdlXHJcbiAgICB0YWJsZUFwcGVuZCBjYWxsLCBleHBlY3RlZFJlc3VsdCwgcmVzdWx0Il19
//# sourceURL=C:\github\p5Assert\p5Assert.coffee