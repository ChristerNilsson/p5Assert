// Generated by CoffeeScript 1.11.1
var changeLayout, chapter, exercise, fillSelect, msg, myCodeMirror, pp, resizeTimer, runAll, sel1, sel1change, sel2, sel2change, setMsg, setup, table, tableAppend, tableClear;

myCodeMirror = 0;

sel1 = 0;

sel2 = 0;

table = 0;

chapter = "";

exercise = "";

msg = null;

pp = function(obj) {
  return (JSON.stringify(obj)).replace(/"/g, '');
};

setMsg = function(txt) {
  msg.val(txt);
  if (txt === '') {
    return msg.css('background-color', '#FFFFFF');
  } else {
    return msg.css('background-color', '#FF0000');
  }
};

fillSelect = function(sel, dict) {
  var key, results1;
  sel.empty();
  results1 = [];
  for (key in dict) {
    results1.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results1;
};

sel1change = function(sel) {
  chapter = sel.value;
  fillSelect(sel2, data[chapter]);
  exercise = _.keys(data[chapter])[0];
  return sel2.val(exercise).change();
};

sel2change = function(sel) {
  var b;
  exercise = sel.value;
  b = data[chapter][exercise]["b"];
  myCodeMirror.setValue(b);
  runAll();
  return myCodeMirror.focus();
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(call, expected, actual) {
  var cell1, cell2, cell3, row, sp;
  sp = "&nbsp;";
  row = tabell.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell3 = row.insertCell(-1);
  cell1.innerHTML = sp + call + sp;
  cell2.innerHTML = sp + JSON.stringify(expected) + sp;
  cell3.innerHTML = actual === void 0 ? sp + "error" + sp : sp + JSON.stringify(actual) + sp;
  cell1.style.backgroundColor = '#FFFF00';
  cell2.style.backgroundColor = '#00FF00';
  try {
    chai.assert.deepEqual(expected, actual);
    return cell3.style.backgroundColor = '#00FF00';
  } catch (error1) {
    return cell3.style.backgroundColor = '#FF0000';
  }
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 215 - 15);
  return $("#msg").width(w - 220 - 15);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  msg = $('#msg');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  table = $('#tabell');
  return fillSelect(sel1, data);
};

window.onload = function() {
  var help, ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(ta, {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", runAll);
  help = createA('https://github.com/ChristerNilsson/p5Assert/blob/master/README.md', 'Help', '_blank');
  help.position(10, 430);
  chapter = _.keys(data)[0];
  sel1.val(chapter).change();
  exercise = _.keys(data[chapter])[0];
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

runAll = function() {
  var b, call, calls, code, dict, e, error, expectedResult, i, results1;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  tableClear();
  dict = data[chapter][exercise]["c"];
  calls = [];
  for (call in dict) {
    expectedResult = dict[call];
    calls.push("(" + call + ")");
  }
  error = "";
  try {
    code = transpile(b + "\nreturn [" + calls + "]");
    try {
      eval("results = " + code);
    } catch (error1) {
      e = error1;
      error = e.stack.split('\n')[0];
    }
  } catch (error1) {
    e = error1;
    error = e.name + ": " + e.message;
  }
  setMsg(error);
  if (error === "") {
    i = 0;
    results1 = [];
    for (call in dict) {
      expectedResult = dict[call];
      tableAppend(call, expectedResult, results[i]);
      results1.push(i += 1);
    }
    return results1;
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Assert\p5Assert.coffee