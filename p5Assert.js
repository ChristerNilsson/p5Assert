// Generated by CoffeeScript 1.11.1
var changeLayout, chapter, exercise, fillSelect, myCodeMirror, resizeTimer, runAll, sel1, sel1change, sel2, sel2change, setup, table, tableAppend, tableClear;

myCodeMirror = 0;

sel1 = 0;

sel2 = 0;

table = 0;

chapter = "";

exercise = "";

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1change = function(sel) {
  chapter = sel.value;
  exercise = "";
  return fillSelect(sel2, data[chapter]);
};

sel2change = function(sel) {
  var b;
  exercise = sel.value;
  b = data[chapter][exercise]["b"];
  myCodeMirror.setValue(b);
  runAll();
  return myCodeMirror.focus();
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(call, expected, actual) {
  var cell1, cell2, cell3, row;
  row = tabell.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell3 = row.insertCell(-1);
  cell1.innerHTML = call;
  cell2.innerHTML = JSON.stringify(expected);
  cell3.innerHTML = actual === void 0 ? "error" : JSON.stringify(actual);
  try {
    chai.assert.deepEqual(expected, actual);
    return row.style.backgroundColor = '#00FF00';
  } catch (error) {
    return row.style.backgroundColor = '#FF0000';
  }
};

changeLayout = function() {
  var w;
  w = $(window).width();
  return $(".CodeMirror").width(w - 215);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  table = $('#tabell');
  return fillSelect(sel1, data);
};

window.onload = function() {
  var help, ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(ta, {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", runAll);
  help = createA('https://github.com/ChristerNilsson/p5Assert/blob/master/README.md', 'help', '_blank');
  help.position(10, 430);
  chapter = 'Assert1';
  sel1.val(chapter).change();
  exercise = 'Operator1';
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

runAll = function() {
  var b, call, code, dict, e, expectedResult, result, results;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  tableClear();
  dict = data[chapter][exercise]["c"];
  results = [];
  for (call in dict) {
    expectedResult = dict[call];
    try {
      code = transpile(b + "\nreturn " + call);
      try {
        eval("result = " + code);
      } catch (error) {
        e = error;
        result = e.stack.split('\n')[0];
      }
    } catch (error) {
      e = error;
      result = e.name + ": " + e.message;
    }
    results.push(tableAppend(call, expectedResult, result));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicDVBc3NlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwNUFzc2VydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsWUFBQSxHQUFlOztBQUNmLElBQUEsR0FBTzs7QUFDUCxJQUFBLEdBQU87O0FBQ1AsS0FBQSxHQUFROztBQUNSLE9BQUEsR0FBVTs7QUFDVixRQUFBLEdBQVc7O0FBRVgsVUFBQSxHQUFhLFNBQUMsR0FBRCxFQUFNLElBQU47QUFDWCxNQUFBO0VBQUEsR0FBRyxDQUFDLEtBQUosQ0FBQTtBQUNBO09BQUEsV0FBQTtpQkFDRSxHQUFHLENBQUMsTUFBSixDQUFXLENBQUEsQ0FBRSxVQUFGLENBQWEsQ0FBQyxJQUFkLENBQW1CLE9BQW5CLEVBQTRCLEdBQTVCLENBQWdDLENBQUMsSUFBakMsQ0FBc0MsR0FBdEMsQ0FBWDtBQURGOztBQUZXOztBQUtiLFVBQUEsR0FBYSxTQUFDLEdBQUQ7RUFDWCxPQUFBLEdBQVUsR0FBRyxDQUFDO0VBQ2QsUUFBQSxHQUFXO1NBQ1gsVUFBQSxDQUFXLElBQVgsRUFBaUIsSUFBSyxDQUFBLE9BQUEsQ0FBdEI7QUFIVzs7QUFLYixVQUFBLEdBQWEsU0FBQyxHQUFEO0FBQ1gsTUFBQTtFQUFBLFFBQUEsR0FBVyxHQUFHLENBQUM7RUFDZixDQUFBLEdBQUksSUFBSyxDQUFBLE9BQUEsQ0FBUyxDQUFBLFFBQUEsQ0FBVSxDQUFBLEdBQUE7RUFDNUIsWUFBWSxDQUFDLFFBQWIsQ0FBc0IsQ0FBdEI7RUFDQSxNQUFBLENBQUE7U0FDQSxZQUFZLENBQUMsS0FBYixDQUFBO0FBTFc7O0FBT2IsVUFBQSxHQUFhLFNBQUE7U0FDWCxDQUFBLENBQUUsWUFBRixDQUFlLENBQUMsTUFBaEIsQ0FBQTtBQURXOztBQUdiLFdBQUEsR0FBYyxTQUFDLElBQUQsRUFBTyxRQUFQLEVBQWlCLE1BQWpCO0FBQ1osTUFBQTtFQUFBLEdBQUEsR0FBTSxNQUFNLENBQUMsU0FBUCxDQUFpQixD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T0FBQSxDQUFTLENBQUEsUUFBQSxDQUFVLENBQUEsR0FBQTtBQUMvQjtPQUFBLFlBQUE7O0FBQ0U7TUFDRSxJQUFBLEdBQU8sU0FBQSxDQUFVLENBQUEsR0FBSSxXQUFKLEdBQWtCLElBQTVCO0FBQ1A7UUFDRSxJQUFBLENBQUssV0FBQSxHQUFjLElBQW5CLEVBREY7T0FBQSxhQUFBO1FBRU07UUFDSixNQUFBLEdBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFSLENBQWMsSUFBZCxDQUFvQixDQUFBLENBQUEsRUFIL0I7T0FGRjtLQUFBLGFBQUE7TUFNTTtNQUNKLE1BQUEsR0FBUyxDQUFDLENBQUMsSUFBRixHQUFTLElBQVQsR0FBZ0IsQ0FBQyxDQUFDLFFBUDdCOztpQkFRQSxXQUFBLENBQVksSUFBWixFQUFrQixjQUFsQixFQUFrQyxNQUFsQztBQVRGOztBQUxPIiwic291cmNlc0NvbnRlbnQiOlsibXlDb2RlTWlycm9yID0gMFxyXG5zZWwxID0gMFxyXG5zZWwyID0gMFxyXG50YWJsZSA9IDBcclxuY2hhcHRlciA9IFwiXCJcclxuZXhlcmNpc2UgPSBcIlwiXHJcblxyXG5maWxsU2VsZWN0ID0gKHNlbCwgZGljdCkgLT5cclxuICBzZWwuZW1wdHkoKVxyXG4gIGZvciBrZXkgb2YgZGljdCBcclxuICAgIHNlbC5hcHBlbmQgJChcIjxvcHRpb24+XCIpLmF0dHIoJ3ZhbHVlJywga2V5KS50ZXh0KGtleSlcclxuXHJcbnNlbDFjaGFuZ2UgPSAoc2VsKSAtPlxyXG4gIGNoYXB0ZXIgPSBzZWwudmFsdWVcclxuICBleGVyY2lzZSA9IFwiXCJcclxuICBmaWxsU2VsZWN0IHNlbDIsIGRhdGFbY2hhcHRlcl1cclxuXHJcbnNlbDJjaGFuZ2UgPSAoc2VsKSAtPlxyXG4gIGV4ZXJjaXNlID0gc2VsLnZhbHVlXHJcbiAgYiA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiYlwiXVxyXG4gIG15Q29kZU1pcnJvci5zZXRWYWx1ZShiKVxyXG4gIHJ1bkFsbCgpXHJcbiAgbXlDb2RlTWlycm9yLmZvY3VzKCkgXHJcblxyXG50YWJsZUNsZWFyID0gLT5cclxuICAkKFwiI3RhYmVsbCB0clwiKS5yZW1vdmUoKVxyXG5cclxudGFibGVBcHBlbmQgPSAoY2FsbCwgZXhwZWN0ZWQsIGFjdHVhbCkgLT5cclxuICByb3cgPSB0YWJlbGwuaW5zZXJ0Um93IC0xXHJcbiAgY2VsbDEgPSByb3cuaW5zZXJ0Q2VsbCAtMVxyXG4gIGNlbGwyID0gcm93Lmluc2VydENlbGwgLTFcclxuICBjZWxsMyA9IHJvdy5pbnNlcnRDZWxsIC0xXHJcbiAgY2VsbDEuaW5uZXJIVE1MID0gY2FsbFxyXG4gIGNlbGwyLmlubmVySFRNTCA9IEpTT04uc3RyaW5naWZ5IGV4cGVjdGVkXHJcbiAgY2VsbDMuaW5uZXJIVE1MID0gaWYgYWN0dWFsID09IHVuZGVmaW5lZCB0aGVuIFwiZXJyb3JcIiBlbHNlIEpTT04uc3RyaW5naWZ5IGFjdHVhbFxyXG4gIHRyeSBcclxuICAgIGNoYWkuYXNzZXJ0LmRlZXBFcXVhbCBleHBlY3RlZCwgYWN0dWFsXHJcbiAgICByb3cuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMwMEZGMDAnXHJcbiAgY2F0Y2ggIFxyXG4gICAgcm93LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjRkYwMDAwJ1xyXG5cclxuY2hhbmdlTGF5b3V0ID0gLT5cclxuICB3ID0gJCh3aW5kb3cpLndpZHRoKClcclxuICAkKFwiLkNvZGVNaXJyb3JcIikud2lkdGgody0yMTUpXHJcblxyXG5yZXNpemVUaW1lcj0wXHJcbiQod2luZG93KS5yZXNpemUgKCkgLT5cclxuICBjbGVhclRpbWVvdXQocmVzaXplVGltZXIpXHJcbiAgcmVzaXplVGltZXIgPSBzZXRUaW1lb3V0KGNoYW5nZUxheW91dCwgMTApXHJcblxyXG5zZXR1cCA9IC0+XHJcbiAgc2VsMSA9ICQoJyNzZWwxJylcclxuICBzZWwyID0gJCgnI3NlbDInKVxyXG4gIHRhYmxlID0gJCgnI3RhYmVsbCcpXHJcbiAgZmlsbFNlbGVjdCBzZWwxLCBkYXRhXHJcblxyXG53aW5kb3cub25sb2FkID0gLT5cclxuICB0YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkIFwiY29kZVwiXHJcbiAgbXlDb2RlTWlycm9yID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEgdGEsIFxyXG4gICAgbGluZU51bWJlcnM6IHRydWVcclxuICAgIG1vZGU6IFwiY29mZmVlc2NyaXB0XCJcclxuICAgIGtleU1hcDogXCJzdWJsaW1lXCJcclxuICAgIHRoZW1lOiBcImRyYWN1bGFcIlxyXG4gICAgYXV0b0Nsb3NlQnJhY2tldHM6IHRydWVcclxuICAgIGxpbmVXaXNlQ29weUN1dDogdHJ1ZVxyXG4gICAgdGFiU2l6ZTogMlxyXG4gICAgaW5kZW50V2l0aFRhYnM6IHRydWVcclxuICBcclxuICAkKFwiLkNvZGVNaXJyb3JcIikuY3NzICdmb250LXNpemUnLFwiMTZwdFwiXHJcbiAgbXlDb2RlTWlycm9yLm9uIFwiY2hhbmdlXCIsIHJ1bkFsbFxyXG5cclxuICBoZWxwID0gY3JlYXRlQSgnaHR0cHM6Ly9naXRodWIuY29tL0NocmlzdGVyTmlsc3Nvbi9wNUFzc2VydC9ibG9iL21hc3Rlci9SRUFETUUubWQnLCAnaGVscCcsICdfYmxhbmsnKVxyXG4gIGhlbHAucG9zaXRpb24gMTAsNDMwXHJcbiAgXHJcbiAgY2hhcHRlciA9ICdBc3NlcnQxJ1xyXG4gIHNlbDEudmFsKGNoYXB0ZXIpLmNoYW5nZSgpXHJcbiAgZXhlcmNpc2UgPSAnT3BlcmF0b3IxJ1xyXG4gIHNlbDIudmFsKGV4ZXJjaXNlKS5jaGFuZ2UoKVxyXG4gIFxyXG4gIG15Q29kZU1pcnJvci5mb2N1cygpXHJcbiAgd2luZG93LnJlc2l6ZVRvIDEwMDAsNzUwXHJcbiAgY2hhbmdlTGF5b3V0KClcclxuXHJcbnJ1bkFsbCA9IC0+XHJcbiAgYiA9IG15Q29kZU1pcnJvci5nZXRWYWx1ZSgpXHJcbiAgZGF0YVtjaGFwdGVyXVtleGVyY2lzZV1bXCJiXCJdID0gYlxyXG4gIHRhYmxlQ2xlYXIoKVxyXG4gIGRpY3QgPSBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVtcImNcIl0gICAgXHJcbiAgZm9yIGNhbGwsZXhwZWN0ZWRSZXN1bHQgb2YgZGljdCBcclxuICAgIHRyeVxyXG4gICAgICBjb2RlID0gdHJhbnNwaWxlIGIgKyBcIlxcbnJldHVybiBcIiArIGNhbGxcclxuICAgICAgdHJ5XHJcbiAgICAgICAgZXZhbCBcInJlc3VsdCA9IFwiICsgY29kZSBcclxuICAgICAgY2F0Y2ggZVxyXG4gICAgICAgIHJlc3VsdCA9IGUuc3RhY2suc3BsaXQoJ1xcbicpWzBdXHJcbiAgICBjYXRjaCBlXHJcbiAgICAgIHJlc3VsdCA9IGUubmFtZSArIFwiOiBcIiArIGUubWVzc2FnZVxyXG4gICAgdGFibGVBcHBlbmQgY2FsbCwgZXhwZWN0ZWRSZXN1bHQsIHJlc3VsdCBcclxuICAiXX0=
//# sourceURL=C:\github\p5Assert\p5Assert.coffee